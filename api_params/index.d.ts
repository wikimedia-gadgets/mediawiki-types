// AUTOMATICALLY GENERATED (see scripts/api-types-generator.js)

type OneOrMore<T> = T | T[];

declare global {
    namespace mw.Api {
        type UnknownParams = Record<
            string,
            string | number | boolean | File | string[] | number[] | undefined
        >;

        type Toggle<T extends string> = { [V in T]: V | `!${V}` }[T];

        type Limit = number | "max";

        type Assert = "anon" | "bot" | "user";

        type TokenType =
            | "createaccount"
            | "csrf"
            | "deleteglobalaccount"
            | "login"
            | "patrol"
            | "rollback"
            | "setglobalaccountstatus"
            | "userrights"
            | "watch";

        type LegacyTokenType =
            | "block"
            | "delete"
            | "edit"
            | "email"
            | "import"
            | "move"
            | "options"
            | "protect"
            | "unblock";

        /**
         * - {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Main_page Documentation}
         * - {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Etiquette Etiquette & usage guidelines}
         * - {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:FAQ FAQ}
         * - {@link https://lists.wikimedia.org/postorius/lists/mediawiki-api.lists.wikimedia.org/ Mailing list}
         * - {@link https://lists.wikimedia.org/postorius/lists/mediawiki-api-announce.lists.wikimedia.org/ API Announcements}
         * - {@link https://phabricator.wikimedia.org/maniphest/query/GebfyV4uCaLd/#R Bugs & requests}
         *
         * **Status:** The MediaWiki API is a mature and stable interface that is actively supported and improved. While we try to avoid it, we may occasionally need to make breaking changes; subscribe to {@link https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/ the mediawiki-api-announce mailing list} for notice of updates.
         *
         * **Erroneous requests:** When erroneous requests are sent to the API, an HTTP header will be sent with the key "MediaWiki-API-Error" and then both the value of the header and the error code sent back will be set to the same value. For more information see {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Errors_and_warnings API: Errors and warnings}.
         *
         * **Testing:** For ease of testing API requests, see {@link https://www.mediawiki.org/wiki/Special:ApiSandbox Special:ApiSandbox}.
         */
        interface Params extends UnknownParams {
            /**
             * Which action to perform.
             *
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/abusefiltercheckmatch abusefiltercheckmatch}**: Check to see if an AbuseFilter matches a set of variables, an edit, or a logged AbuseFilter event.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/abusefilterchecksyntax abusefilterchecksyntax}**: Check syntax of an AbuseFilter filter.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/abusefilterevalexpression abusefilterevalexpression}**: Evaluates an AbuseFilter expression.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/abusefilterunblockautopromote abusefilterunblockautopromote}**: Unblocks a user from receiving autopromotions due to an abusefilter consequence.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/abuselogprivatedetails abuselogprivatedetails}**: View private details of an AbuseLog entry.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/acquiretempusername acquiretempusername}**: Acquire a temporary user username and stash it in the current session, if temp account creation is enabled and the current user is logged out. If a name has already been stashed, returns the same name.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/aggregategroups aggregategroups}**: Manage aggregate message groups.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/antispoof antispoof}**: Check a username against AntiSpoof's normalisation checks.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/block block}**: Block a user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/centralauthtoken centralauthtoken}**: Fetch a centralauthtoken for making an authenticated request to an attached wiki.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/centralnoticecdncacheupdatebanner centralnoticecdncacheupdatebanner}**: Request the purge of banner content stored in the CDN (front-end) cache for anonymous users, for the requested banner and language
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/centralnoticechoicedata centralnoticechoicedata}**: Get data needed to choose a banner for a given project and language
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/centralnoticequerycampaign centralnoticequerycampaign}**: Get all configuration settings for a campaign.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/changeauthenticationdata changeauthenticationdata}**: Change authentication data for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/changecontentmodel changecontentmodel}**: Change the content model of a page
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/checktoken checktoken}**: Check the validity of a token from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`}.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cirrus-config-dump cirrus-config-dump}**: Dump of CirrusSearch configuration.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cirrus-mapping-dump cirrus-mapping-dump}**: Dump of CirrusSearch mapping for this wiki.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cirrus-profiles-dump cirrus-profiles-dump}**: Dump of CirrusSearch profiles for this wiki.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cirrus-settings-dump cirrus-settings-dump}**: Dump of CirrusSearch settings for this wiki.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/clearhasmsg clearhasmsg}**: Clears the `hasmsg` flag for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/clientlogin clientlogin}**: Log in to the wiki using the interactive flow.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare compare}**: Get the difference between two pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/createaccount createaccount}**: Create a new user account.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/createlocalaccount createlocalaccount}**: Forcibly create a local account. The central account must exist.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/delete delete}**: Delete a page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/deleteglobalaccount deleteglobalaccount}**: Delete a global user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolsedit discussiontoolsedit}**: Post a message on a discussion page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolsfindcomment discussiontoolsfindcomment}**: Find a comment by its ID or name.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolsgetsubscriptions discussiontoolsgetsubscriptions}**: Get the subscription statuses of given topics.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolssubscribe discussiontoolssubscribe}**: Subscribe (or unsubscribe) to receive notifications about a topic.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolsthank discussiontoolsthank}**: Send a public thank-you notification for a comment.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/echocreateevent echocreateevent}**: Manually trigger a notification to a user
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/echomarkread echomarkread}**: Mark notifications as read for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/echomarkseen echomarkseen}**: Mark notifications as seen for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/echomute echomute}**: Mute or unmute notifications from certain users or pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/edit edit}**: Create and edit pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/editmassmessagelist editmassmessagelist}**: Edit a mass message delivery list.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/emailuser emailuser}**: Email a user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates expandtemplates}**: Expands all templates within wikitext.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/featuredfeed featuredfeed}**: Returns a featured content feed.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/feedcontributions feedcontributions}**: Returns a user's contributions feed.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/feedrecentchanges feedrecentchanges}**: Returns a recent changes feed.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/feedthreads feedthreads}**: Return a feed of discussion threads.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/feedwatchlist feedwatchlist}**: Returns a watchlist feed.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/filerevert filerevert}**: Revert a file to an old version.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow flow}**: Allows actions to be taken on Structured Discussions pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow-parsoid-utils flow-parsoid-utils}**: Convert text between wikitext and HTML.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flowthank flowthank}**: Send a public thank-you notification for a Flow comment.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/globalblock globalblock}**: Globally block or unblock a user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/globalpreferenceoverrides globalpreferenceoverrides}**: Change local overrides for global preferences for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/globalpreferences globalpreferences}**: Change global preferences of the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/globaluserrights globaluserrights}**: Add/remove a user to/from global groups.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/groupreview groupreview}**: Set message group workflow states.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/help help}**: Display help for the specified modules.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/imagerotate imagerotate}**: This module has been disabled.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/import import}**: Import a page from another wiki, or from an XML file.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/jsonconfig jsonconfig}**: Allows direct access to JsonConfig subsystem.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/languagesearch languagesearch}**: Search for language names in any script.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/linkaccount linkaccount}**: Link an account from a third-party provider to the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/login login}**: Log in and get authentication cookies.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/logout logout}**: Log out and clear session data.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/managetags managetags}**: Perform management tasks relating to change tags.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/markfortranslation markfortranslation}**: Mark a page for translation
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/massmessage massmessage}**: Send a message to a list of pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/mergehistory mergehistory}**: Merge page histories.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/move move}**: Move a page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/newslettersubscribe newslettersubscribe}**: Subscribe to or unsubscribe from a newsletter.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch opensearch}**: Search the wiki using the OpenSearch protocol.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/options options}**: Change preferences of the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/paraminfo paraminfo}**: Obtain information about API modules.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse parse}**: Parses content and returns parser output.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/patrol patrol}**: Patrol a page or revision.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/protect protect}**: Change the protection level of a page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/purge purge}**: Purge the cache for the given titles.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query query}**: Fetch data from and about MediaWiki.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/removeauthenticationdata removeauthenticationdata}**: Remove authentication data for the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/resetpassword resetpassword}**: Send a password reset email to a user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/revisiondelete revisiondelete}**: Delete and undelete revisions.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/rollback rollback}**: Undo the last edit to the page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/rsd rsd}**: Export an RSD (Really Simple Discovery) schema.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/searchtranslations searchtranslations}**: Search translations.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/setglobalaccountstatus setglobalaccountstatus}**: Hide or lock (or unhide or unlock) a global user account.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/setnotificationtimestamp setnotificationtimestamp}**: Update the notification timestamp for watched pages.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/setpagelanguage setpagelanguage}**: Change the language of a page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/shortenurl shortenurl}**: Shorten a long URL into a shorter one.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/sitematrix sitematrix}**: Get Wikimedia sites list.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/spamblacklist spamblacklist}**: Validate one or more URLs against the spam block list.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/streamconfigs streamconfigs}**: Exposes event stream config. Returns only format=json with formatversion=2.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/strikevote strikevote}**: Allows admins to strike or unstrike a vote.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/tag tag}**: Add or remove change tags from individual revisions or log entries.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/templatedata templatedata}**: Fetch data stored by the TemplateData extension.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/thank thank}**: Send a thank-you notification to an editor.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/threadaction threadaction}**: Allows actions to be taken on threads and posts in threaded discussions.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/titleblacklist titleblacklist}**: Validate a page title, filename, or username against the TitleBlacklist.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/torblock torblock}**: Check if an IP address is blocked as a Tor exit node.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/transcodereset transcodereset}**: Users with the 'transcode-reset' right can reset and re-run a transcode job.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/translationaids translationaids}**: Query all translations aids.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/translationreview translationreview}**: Mark translations reviewed.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/translationstats translationstats}**: Fetch translation statistics
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/ttmserver ttmserver}**: Query suggestions from translation memories.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/unblock unblock}**: Unblock a user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/undelete undelete}**: Undelete revisions of a deleted page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/unlinkaccount unlinkaccount}**: Remove a linked third-party account from the current user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/upload upload}**: Upload a file, or get the status of pending uploads.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/userrights userrights}**: Change a user's group membership.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/validatepassword validatepassword}**: Validate a password against the wiki's password policies.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/watch watch}**: Add or remove pages from the current user's watchlist.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/webapp-manifest webapp-manifest}**: Returns a webapp manifest.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/webauthn webauthn}**: API Module to communicate between server and client during registration/authentication process.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/wikilove wikilove}**: Give WikiLove to another user.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/bouncehandler bouncehandler}**: Internal. Receive a bounce email and process it to handle the failing recipient.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/categorytree categorytree}**: Internal. Internal module for the CategoryTree extension.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cirrus-check-sanity cirrus-check-sanity}**: Internal. Reports on the correctness of a range of page ids in the search index
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection collection}**: Internal. API module for performing various operations on a wiki user's collection.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/cspreport cspreport}**: Internal. Used by browsers to report violations of the Content Security Policy. This module should never be used, except when used automatically by a CSP compliant web browser.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolscompare discussiontoolscompare}**: Internal. Get information about comment changes between two page revisions.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolspageinfo discussiontoolspageinfo}**: Internal. Returns metadata required to initialize the discussion tools.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/discussiontoolspreview discussiontoolspreview}**: Internal. Preview a message on a discussion page.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/editcheckreferenceurl editcheckreferenceurl}**: Internal. Check the status of a URL for use as a reference.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/fancycaptchareload fancycaptchareload}**: Internal. Get a new FancyCaptcha.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/jsondata jsondata}**: Internal. Retrieve localized JSON data.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/managegroupsynchronizationcache managegroupsynchronizationcache}**: Internal. Manage group synchronization cache.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/managemessagegroups managemessagegroups}**: Internal. Add a message as a rename of an existing message or a new message in the group during imports
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/messagegroupsubscription messagegroupsubscription}**: Internal. Message group subscription related operations
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/oathvalidate oathvalidate}**: Internal. Validate a two-factor authentication (OATH) token.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/parser-migration parser-migration}**: Internal. Parse a page with two different parser configurations.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists readinglists}**: Internal. Reading list write operations.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/sanitize-mapdata sanitize-mapdata}**: Internal. Performs data validation for Kartographer extension
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/scribunto-console scribunto-console}**: Internal. Internal module for servicing XHR requests from the Scribunto console.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/securepollauth securepollauth}**: Internal. Allows a remote wiki to authenticate users before granting access to vote in the election.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/stashedit stashedit}**: Internal. Prepare an edit in shared cache.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/timedtext timedtext}**: Internal. Provides timed text content for usage by <track> elements
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/translationcheck translationcheck}**: Internal. Validate translations.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/translationentitysearch translationentitysearch}**: Internal. Search for message groups and messages
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/ulslocalization ulslocalization}**: Internal. Get the localization of ULS in the given language.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/ulssetlang ulssetlang}**: Internal. Update user's preferred interface language.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/visualeditor visualeditor}**: Internal. Returns HTML5 for a page from the Parsoid service.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/visualeditoredit visualeditoredit}**: Internal. Save an HTML5 page to MediaWiki (converted to wikitext via the Parsoid service).
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/wikimediaeventsblockededit wikimediaeventsblockededit}**: Internal. Log information about blocked edit attempts
             *
             * Defaults to `help`.
             */
            action?: string;
            /**
             * The format of the output.
             *
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/json json}**: Output data in JSON format.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/jsonfm jsonfm}**: Output data in JSON format (pretty-print in HTML).
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/none none}**: Output nothing.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/php php}**: Output data in serialized PHP format.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/phpfm phpfm}**: Output data in serialized PHP format (pretty-print in HTML).
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/rawfm rawfm}**: Output data, including debugging elements, in JSON format (pretty-print in HTML).
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/xml xml}**: Output data in XML format.
             * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/xmlfm xmlfm}**: Output data in XML format (pretty-print in HTML).
             *
             * Defaults to `jsonfm`.
             */
            format?: string;
            /**
             * Maximum lag can be used when MediaWiki is installed on a database replicated cluster. To save actions causing any more site replication lag, this parameter can make the client wait until the replication lag is less than the specified value. In case of excessive lag, error code `maxlag` is returned with a message like `Waiting for $host: $lag seconds lagged`.<br />See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Maxlag_parameter Manual: Maxlag parameter} for more information.
             */
            maxlag?: number;
            /**
             * Set the `s-maxage` HTTP cache control header to this many seconds. Errors are never cached.
             *
             * Defaults to 0.
             */
            smaxage?: number;
            /**
             * Set the `max-age` HTTP cache control header to this many seconds. Errors are never cached.
             *
             * Defaults to 0.
             */
            maxage?: number;
            /**
             * Verify that the user is logged in (including possibly as a temporary user) if set to `user`, **not** logged in if set to `anon`, or has the bot user right if `bot`.
             */
            assert?: Assert;
            /**
             * Verify the current user is the named user.
             */
            assertuser?: string;
            /**
             * Any value given here will be included in the response. May be used to distinguish requests.
             */
            requestid?: string;
            /**
             * Include the hostname that served the request in the results.
             */
            servedby?: boolean;
            /**
             * Include the current timestamp in the result.
             */
            curtimestamp?: boolean;
            /**
             * Include the languages used for `uselang` and `errorlang` in the result.
             */
            responselanginfo?: boolean;
            /**
             * When accessing the API using a cross-domain AJAX request (CORS), set this to the originating domain. This must be included in any pre-flight request, and therefore must be part of the request URI (not the POST body).
             *
             * For authenticated requests, this must match one of the origins in the `Origin` header exactly, so it has to be set to something like {@link https://en.wikipedia.org `https://en.wikipedia.org`} or {@link https://meta.wikimedia.org `https://meta.wikimedia.org`}. If this parameter does not match the `Origin` header, a 403 response will be returned. If this parameter matches the `Origin` header and the origin is allowed, the `Access-Control-Allow-Origin` and `Access-Control-Allow-Credentials` headers will be set.
             *
             * For non-authenticated requests, specify the value `*`. This will cause the `Access-Control-Allow-Origin` header to be set, but `Access-Control-Allow-Credentials` will be `false` and all user-specific data will be restricted.
             */
            origin?: string;
            /**
             * Language to use for message translations. {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo `action=query&meta=siteinfo&siprop=languages`} returns a list of language codes. You can specify `user` to use the current user's language preference or `content` to use this wiki's content language.
             *
             * Defaults to `user`.
             */
            uselang?: string;
            /**
             * Variant of the language. Only works if the base language supports variant conversion.
             */
            variant?: string;
            /**
             * Format to use for warning and error text output
             *
             * - **plaintext**: Wikitext with HTML tags removed and entities replaced.
             * - **wikitext**: Unparsed wikitext.
             * - **html**: HTML
             * - **raw**: Message key and parameters.
             * - **none**: No text output, only the error codes.
             * - **bc**: Format used prior to MediaWiki 1.29. `errorlang` and `errorsuselocal` are ignored.
             *
             * Defaults to `bc`.
             */
            errorformat?: "bc" | "html" | "none" | "plaintext" | "raw" | "wikitext";
            /**
             * Language to use for warnings and errors. {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo `action=query&meta=siteinfo&siprop=languages`} returns a list of language codes. Specify `content` to use this wiki's content language or `uselang` to use the same value as the `uselang` parameter.
             *
             * Defaults to `uselang`.
             */
            errorlang?: string;
            /**
             * If given, error texts will use locally-customized messages from the MediaWiki namespace.
             */
            errorsuselocal?: boolean;
            /**
             * When accessing the API using a cross-domain AJAX request (CORS), use this to authenticate as the current SUL user. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/centralauthtoken `action=centralauthtoken`} on this wiki to retrieve the token, before making the CORS request. Each token may only be used once, and expires after 10 seconds. This should be included in any pre-flight request, and therefore should be included in the request URI (not the POST body).
             *
             * Sensitive parameter.
             */
            centralauthtoken?: string;
        }

        namespace Params {
            namespace Action {
                /**
                 * Check to see if an AbuseFilter matches a set of variables, an edit, or a logged AbuseFilter event.
                 *
                 * vars, rcid or logid is required however only one may be used.
                 */
                interface AbuseFilterCheckMatch extends Params {
                    action: "abusefiltercheckmatch";
                    /**
                     * The full filter text to check for a match.
                     */
                    filter: string;
                    /**
                     * JSON encoded array of variables to test against.
                     */
                    vars?: string;
                    /**
                     * Recent change ID to check against.
                     */
                    rcid?: number;
                    /**
                     * Abuse filter log ID to check against.
                     */
                    logid?: number;
                }

                /**
                 * Check syntax of an AbuseFilter filter.
                 */
                interface AbuseFilterCheckSyntax extends Params {
                    action: "abusefilterchecksyntax";
                    /**
                     * The full filter text to check syntax on.
                     */
                    filter: string;
                }

                /**
                 * Evaluates an AbuseFilter expression.
                 */
                interface AbuseFilterEvalExpression extends Params {
                    action: "abusefilterevalexpression";
                    /**
                     * The expression to evaluate.
                     */
                    expression: string;
                    /**
                     * Whether the result should be pretty-printed.
                     */
                    prettyprint?: boolean;
                }

                /**
                 * Unblocks a user from receiving autopromotions due to an abusefilter consequence.
                 */
                interface AbuseFilterUnblockAutopromote extends Params {
                    action: "abusefilterunblockautopromote";
                    /**
                     * Username of the user you want to unblock.
                     */
                    user: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * View private details of an AbuseLog entry.
                 */
                interface AbuseLogPrivateDetails extends Params {
                    action: "abuselogprivatedetails";
                    /**
                     * The ID of the AbuseLog entry to be checked.
                     */
                    logid?: number;
                    /**
                     * A valid reason for performing the check.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Acquire a temporary user username and stash it in the current session, if temp account creation is enabled and the current user is logged out. If a name has already been stashed, returns the same name.
                 *
                 * If the user later performs an action that results in temp account creation, the stashed username will be used for their account. It may also be used in previews. However, the account is not created yet, and the name is not visible to other users.
                 */
                interface AcquireTempUserName extends Params {
                    action: "acquiretempusername";
                }

                /**
                 * Manage aggregate message groups.
                 *
                 * You can add and remove aggregate message groups and associate or dissociate message groups from them (one at a time).
                 */
                interface AggregateGroups extends Params {
                    action: "aggregategroups";
                    /**
                     * What to do with aggregate message group.
                     */
                    do: "add" | "associate" | "dissociate" | "remove" | "update";
                    /**
                     * Aggregate message group ID.
                     */
                    aggregategroup?: string;
                    /**
                     * Message group ID. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     *
                     * @deprecated
                     */
                    group?: string;
                    /**
                     * List of message group IDs. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    groups?: string | string[];
                    /**
                     * Aggregate message group name.
                     */
                    groupname?: string;
                    /**
                     * Aggregate message group description.
                     *
                     * Defaults to an empty string.
                     */
                    groupdescription?: string;
                    /**
                     * Aggregate message group source language code, or `-` to not set a source language or remove the existing one.
                     *
                     * Defaults to `-`.
                     */
                    groupsourcelanguagecode?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Check a username against AntiSpoof's normalisation checks.
                 */
                interface AntiSpoof extends Params {
                    action: "antispoof";
                    /**
                     * The username to check against AntiSpoof.
                     */
                    username: string;
                }

                /**
                 * Block a user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Block
                 */
                interface Block extends Params {
                    action: "block";
                    /**
                     * The block ID to modify.
                     */
                    id?: number;
                    /**
                     * User to block.
                     */
                    user?: string;
                    /**
                     * Specify `user=#`ID`` instead.
                     *
                     * @deprecated
                     */
                    userid?: number;
                    /**
                     * Expiry time. May be relative (e.g. `5 months` or `2 weeks`) or absolute (e.g. the current timestamp). If set to `infinite`, `indefinite`, or `never`, the block will never expire.
                     *
                     * Defaults to `never`.
                     */
                    expiry?: string;
                    /**
                     * Reason for block.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Block anonymous users only (i.e. disable anonymous edits for this IP address, including temporary account edits).
                     */
                    anononly?: boolean;
                    /**
                     * Prevent account creation.
                     */
                    nocreate?: boolean;
                    /**
                     * Automatically block the last used IP address, and any subsequent IP addresses they try to login from.
                     */
                    autoblock?: boolean;
                    /**
                     * Prevent user from sending email through the wiki. (Requires the `blockemail` right).
                     */
                    noemail?: boolean;
                    /**
                     * Hide the username from the block log. (Requires the `hideuser` right).
                     */
                    hidename?: boolean;
                    /**
                     * Allow the user to edit their own talk page (depends on {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgBlockAllowsUTEdit `$wgBlockAllowsUTEdit`}).
                     */
                    allowusertalk?: boolean;
                    /**
                     * If the user is already blocked by a single block, overwrite the existing block. If the user is blocked more than once, this will fail -- use the id parameter instead to specify which block to overwrite.
                     */
                    reblock?: boolean;
                    /**
                     * Add another block even if the user is already blocked.
                     */
                    newblock?: boolean;
                    /**
                     * Watch the user's or IP address's user and talk pages.
                     */
                    watchuser?: boolean;
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * Change tags to apply to the entry in the block log.
                     */
                    tags?: string | string[];
                    /**
                     * Block user from specific pages or namespaces rather than the entire site.
                     */
                    partial?: boolean;
                    /**
                     * List of titles to block the user from editing. Only applies when `partial` is set to true.
                     */
                    pagerestrictions?: string | string[];
                    /**
                     * List of namespace IDs to block the user from editing. Only applies when `partial` is set to true.
                     */
                    namespacerestrictions?: number | number[] | "*";
                    /**
                     * List of actions to block the user from performing. Only applies when `partial` is set to true.
                     */
                    actionrestrictions?: OneOrMore<"create" | "move" | "thanks" | "upload">;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Receive a bounce email and process it to handle the failing recipient.
                 *
                 * @private
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:BounceHandler#API
                 */
                interface BounceHandler extends Params {
                    action: "bouncehandler";
                    /**
                     * The bounced email.
                     */
                    email: string;
                }

                /**
                 * Internal module for the CategoryTree extension.
                 *
                 * @private
                 */
                interface CategoryTree extends Params {
                    action: "categorytree";
                    /**
                     * Title in the category namespace, prefix will be ignored if given.
                     */
                    category: string;
                    /**
                     * Options for the CategoryTree constructor as a JSON object. The `depth` option defaults to `1`.
                     */
                    options?: string;
                }

                /**
                 * Fetch a centralauthtoken for making an authenticated request to an attached wiki.
                 *
                 * Returns a token that can be use to authenticate API requests on other wikis. For action API requests, put it in the `centralauthtoken` GET parameter. For REST API requests, add an `Authorization: CentralAuthToken {token}` header. In MediaWiki frontend logic, you can use the `mediawiki.ForeignApi` ResourceLoader module.
                 */
                interface CentralAuthToken extends Params {
                    action: "centralauthtoken";
                }

                /**
                 * Request the purge of banner content stored in the CDN (front-end) cache for anonymous users, for the requested banner and language
                 */
                interface CentralNoticeCdnCacheUpdateBanner extends Params {
                    action: "centralnoticecdncacheupdatebanner";
                    /**
                     * Name of the banner whose content should be purged
                     */
                    banner: string;
                    /**
                     * Language of the banner content to purge
                     */
                    language: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Get data needed to choose a banner for a given project and language
                 */
                interface CentralNoticeChoiceData extends Params {
                    action: "centralnoticechoicedata";
                    /**
                     * The project to get banner choice data for.
                     */
                    project: string;
                    /**
                     * The language to get banner choice data for.
                     */
                    language: string;
                }

                /**
                 * Get all configuration settings for a campaign.
                 */
                interface CentralNoticeQueryCampaign extends Params {
                    action: "centralnoticequerycampaign";
                    /**
                     * Campaign name. Separate multiple values with a "|" (vertical bar).
                     *
                     * Defaults to an empty string.
                     */
                    campaign?: string;
                }

                /**
                 * Change authentication data for the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Manage_authentication_data
                 */
                interface ChangeAuthenticationData extends Params {
                    action: "changeauthenticationdata";
                    /**
                     * Use this authentication request, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=change`.
                     */
                    changeauthrequest: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    changeauthtoken: string;
                }

                /**
                 * Change the content model of a page
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Help:ChangeContentModel
                 */
                interface ChangeContentModel extends Params {
                    action: "changecontentmodel";
                    /**
                     * Title of the page to change the contentmodel of. Cannot be used together with `pageid`.
                     */
                    title?: string;
                    /**
                     * Page ID of the page to change the contentmodel of. Cannot be used together with `title`.
                     */
                    pageid?: number;
                    /**
                     * Edit summary and log entry reason
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the log entry and edit.
                     */
                    tags?: string | string[];
                    /**
                     * Content model of the new content.
                     */
                    model: string;
                    /**
                     * Mark the content model change with a bot flag.
                     */
                    bot?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Check the validity of a token from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`}.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Checktoken
                 */
                interface CheckToken extends Params {
                    action: "checktoken";
                    /**
                     * Type of token being tested.
                     */
                    type: TokenType;
                    /**
                     * Token to test.
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Maximum allowed age of the token, in seconds.
                     */
                    maxtokenage?: number;
                }

                /**
                 * Reports on the correctness of a range of page ids in the search index
                 *
                 * @private
                 */
                interface CirrusCheckSanity extends Params {
                    action: "cirrus-check-sanity";
                    /**
                     * The search cluster to check indices in
                     */
                    cluster?: "cloudelastic" | "codfw" | "eqiad";
                    /**
                     * Page id to start checking at
                     */
                    from: number;
                    /**
                     * The number of page ids to check
                     *
                     * Defaults to 100.
                     */
                    limit?: Limit;
                    /**
                     * The number of times this set of page ids has been checked
                     */
                    sequenceid?: number;
                    /**
                     * Number of checks after which a page should be rerendered. Based off the provided sequenceid.
                     *
                     * Defaults to 16.
                     */
                    rerenderfrequency?: number;
                }

                /**
                 * Dump of CirrusSearch configuration.
                 */
                interface CirrusConfigDump extends Params {
                    action: "cirrus-config-dump";
                    /**
                     * Type of configuration variables to dump
                     *
                     * Defaults to `globals`, `namespacemap`, `profiles`, and `replicagroup`.
                     */
                    prop?: OneOrMore<
                        | "expectedindices"
                        | "globals"
                        | "namespacemap"
                        | "profiles"
                        | "replicagroup"
                        | "usertesting"
                    >;
                }

                /**
                 * Dump of CirrusSearch mapping for this wiki.
                 */
                interface CirrusMappingDump extends Params {
                    action: "cirrus-mapping-dump";
                }

                /**
                 * Dump of CirrusSearch profiles for this wiki.
                 */
                interface CirrusProfilesDump extends Params {
                    action: "cirrus-profiles-dump";
                    /**
                     * Dump the profiles content
                     */
                    verbose?: boolean;
                }

                /**
                 * Dump of CirrusSearch settings for this wiki.
                 */
                interface CirrusSettingsDump extends Params {
                    action: "cirrus-settings-dump";
                }

                /**
                 * Clears the `hasmsg` flag for the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:ClearHasMsg
                 */
                interface ClearHasMsg extends Params {
                    action: "clearhasmsg";
                }

                /**
                 * Log in to the wiki using the interactive flow.
                 *
                 * The general procedure to use this module is:
                 *
                 * - Fetch the fields available from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=login`, and a `login` token from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`}.
                 * - Present the fields to the user, and obtain their submission.
                 * - Post to this module, supplying `loginreturnurl` and any relevant fields.
                 * - Check the `status` in the response.
                 * - If you received `PASS` or `FAIL`, you're done. The operation either succeeded or it didn't.
                 * - If you received `UI`, present the new fields to the user and obtain their submission. Then post to this module with `logincontinue` and the relevant fields set, and repeat step 4.
                 * - If you received `REDIRECT`, direct the user to the `redirecttarget` and wait for the return to `loginreturnurl`. Then post to this module with `logincontinue` and any fields passed to the return URL, and repeat step 4.
                 * - If you received `RESTART`, that means the authentication worked but we don't have a linked user account. You might treat this as `UI` or as `FAIL`.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Login
                 */
                interface ClientLogin extends Params {
                    action: "clientlogin";
                    /**
                     * Only use these authentication requests, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=login` or from a previous response from this module.
                     */
                    loginrequests?: string | string[];
                    /**
                     * Format to use for returning messages.
                     *
                     * Defaults to `wikitext`.
                     */
                    loginmessageformat?: "html" | "none" | "raw" | "wikitext";
                    /**
                     * Merge field information for all authentication requests into one array.
                     */
                    loginmergerequestfields?: boolean;
                    /**
                     * Preserve state from a previous failed login attempt, if possible.
                     */
                    loginpreservestate?: boolean;
                    /**
                     * Return URL for third-party authentication flows, must be absolute. Either this or `logincontinue` is required.
                     *
                     * Upon receiving a `REDIRECT` response, you will typically open a browser or web view to the specified `redirecttarget` URL for a third-party authentication flow. When that completes, the third party will send the browser or web view to this URL. You should extract any query or POST parameters from the URL and pass them as a `logincontinue` request to this API module.
                     */
                    loginreturnurl?: string;
                    /**
                     * This request is a continuation after an earlier `UI` or `REDIRECT` response. Either this or `loginreturnurl` is required.
                     */
                    logincontinue?: boolean;
                    /**
                     * A "login" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    logintoken: string;
                }

                /**
                 * API module for performing various operations on a wiki user's collection.
                 *
                 * @private
                 */
                interface Collection extends Params {
                    action: "collection";
                    /**
                     * Submodule for performing various operations on a wiki user's collection.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Baddarticle addarticle}**: API module for adding a page to the collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Baddcategory addcategory}**: API module for adding pages from a given category to a user's collection.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Baddchapter addchapter}**: API module for adding a chapter to the collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bclearcollection clearcollection}**: API module for clearing the collection and the suggestions
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bgetbookcreatorboxcontent getbookcreatorboxcontent}**: API submodule for grabbing the box content of the user's book creator box special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bgetcollection getcollection}**: API module for listing the current pages in a collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bgetpopupdata getpopupdata}**: API module to get data and HTML to construct a popup
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bpostcollection postcollection}**: API module for posting pages to a user's collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bremovearticle removearticle}**: API module for removing a page from the collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bremoveitem removeitem}**: API module for removing an item from the collection index-wise via the Special:Book page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Brenamechapter renamechapter}**: API module for renaming a chapter in the user's collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bsetsorting setsorting}**: API module for reordering items in a collection
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bsettitles settitles}**: API module for setting the collection's title, subtitle, and settings
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bsortitems sortitems}**: API module to sort pages in a collection alphabetically. Pages within chapters are grouped and sorted together.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bsuggestarticleaction suggestarticleaction}**: API module to interact with suggestions
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/collection%2Bsuggestundoarticleaction suggestundoarticleaction}**: API module to undo actions done from suggestarticleaction
                     */
                    submodule: string;
                }

                /**
                 * Change the content of a configuration provider in Community configuration
                 */
                interface CommunityConfigurationEdit extends Params {
                    action: "communityconfigurationedit";
                    /**
                     * Provider key
                     */
                    provider:
                        | "AutoModerator"
                        | "CommunityUpdates"
                        | "GrowthHomepage"
                        | "GrowthMentorList"
                        | "GrowthSuggestedEdits"
                        | "HelpPanel"
                        | "Mentorship";
                    /**
                     * The current content of the provider will be replaced with this one. Use JSON to serialize the new content.
                     */
                    content: string;
                    /**
                     * Edit summary
                     *
                     * Defaults to an empty string.
                     */
                    summary?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Get the difference between two pages.
                 *
                 * A revision number, a page title, a page ID, text, or a relative reference for both "from" and "to" must be passed.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Compare
                 */
                interface Compare extends Params {
                    action: "compare";
                    /**
                     * First title to compare.
                     */
                    fromtitle?: string;
                    /**
                     * First page ID to compare.
                     */
                    fromid?: number;
                    /**
                     * First revision to compare.
                     */
                    fromrev?: number;
                    /**
                     * Override content of the revision specified by `fromtitle`, `fromid` or `fromrev`.
                     *
                     * This parameter specifies the slots that are to be modified. Use `fromtext-{slot}`, `fromcontentmodel-{slot}`, and `fromcontentformat-{slot}` to specify content for each slot.
                     */
                    fromslots?: string | string[];
                    /**
                     * Text of the specified slot. If omitted, the slot is removed from the revision.
                     */
                    [k: `fromtext-${string}`]: string;
                    /**
                     * When `fromtext-{slot}` is the content of a single section, this is the section identifier. It will be merged into the revision specified by `fromtitle`, `fromid` or `fromrev` as if for a section edit.
                     */
                    [k: `fromsection-${string}`]: string;
                    /**
                     * Content serialization format of `fromtext-{slot}`.
                     */
                    [k: `fromcontentformat-${string}`]:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Content model of `fromtext-{slot}`. If not supplied, it will be guessed based on the other parameters.
                     */
                    [k: `fromcontentmodel-${string}`]: string;
                    /**
                     * Do a pre-save transform on `fromtext-{slot}`.
                     */
                    frompst?: boolean;
                    /**
                     * Specify `fromslots=main` and use `fromtext-main` instead.
                     *
                     * @deprecated
                     */
                    fromtext?: string;
                    /**
                     * Specify `fromslots=main` and use `fromcontentformat-main` instead.
                     *
                     * @deprecated
                     */
                    fromcontentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Specify `fromslots=main` and use `fromcontentmodel-main` instead.
                     *
                     * @deprecated
                     */
                    fromcontentmodel?: string;
                    /**
                     * Only use the specified section of the specified 'from' content.
                     *
                     * @deprecated
                     */
                    fromsection?: string;
                    /**
                     * Second title to compare.
                     */
                    totitle?: string;
                    /**
                     * Second page ID to compare.
                     */
                    toid?: number;
                    /**
                     * Second revision to compare.
                     */
                    torev?: number;
                    /**
                     * Use a revision relative to the revision determined from `fromtitle`, `fromid` or `fromrev`. All of the other 'to' options will be ignored.
                     */
                    torelative?: "cur" | "next" | "prev";
                    /**
                     * Override content of the revision specified by `totitle`, `toid` or `torev`.
                     *
                     * This parameter specifies the slots that are to be modified. Use `totext-{slot}`, `tocontentmodel-{slot}`, and `tocontentformat-{slot}` to specify content for each slot.
                     */
                    toslots?: string | string[];
                    /**
                     * Text of the specified slot. If omitted, the slot is removed from the revision.
                     */
                    [k: `totext-${string}`]: string;
                    /**
                     * When `totext-{slot}` is the content of a single section, this is the section identifier. It will be merged into the revision specified by `totitle`, `toid` or `torev` as if for a section edit.
                     */
                    [k: `tosection-${string}`]: string;
                    /**
                     * Content serialization format of `totext-{slot}`.
                     */
                    [k: `tocontentformat-${string}`]:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Content model of `totext-{slot}`. If not supplied, it will be guessed based on the other parameters.
                     */
                    [k: `tocontentmodel-${string}`]: string;
                    /**
                     * Do a pre-save transform on `totext`.
                     */
                    topst?: boolean;
                    /**
                     * Specify `toslots=main` and use `totext-main` instead.
                     *
                     * @deprecated
                     */
                    totext?: string;
                    /**
                     * Specify `toslots=main` and use `tocontentformat-main` instead.
                     *
                     * @deprecated
                     */
                    tocontentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Specify `toslots=main` and use `tocontentmodel-main` instead.
                     *
                     * @deprecated
                     */
                    tocontentmodel?: string;
                    /**
                     * Only use the specified section of the specified 'to' content.
                     *
                     * @deprecated
                     */
                    tosection?: string;
                    /**
                     * Which pieces of information to get.
                     *
                     * - **diff**: The diff HTML.
                     * - **diffsize**: The size of the diff HTML, in bytes.
                     * - **rel**: The revision IDs of the revision previous to 'from' and after 'to', if any.
                     * - **ids**: The page and revision IDs of the 'from' and 'to' revisions.
                     * - **title**: The page titles of the 'from' and 'to' revisions.
                     * - **user**: The username and ID of the 'from' and 'to' revisions. If the user has been revision deleted, a `fromuserhidden` or `touserhidden` property will be returned.
                     * - **comment**: The comment on the 'from' and 'to' revisions. If the comment has been revision deleted, a `fromcommenthidden` or `tocommenthidden` property will be returned.
                     * - **parsedcomment**: The parsed comment on the 'from' and 'to' revisions. If the comment has been revision deleted, a `fromcommenthidden` or `tocommenthidden` property will be returned.
                     * - **size**: The size of the 'from' and 'to' revisions.
                     * - **timestamp**: The timestamp of the 'from' and 'to' revisions.
                     *
                     * Defaults to `diff`, `ids`, and `title`.
                     */
                    prop?: OneOrMore<
                        | "comment"
                        | "diff"
                        | "diffsize"
                        | "ids"
                        | "parsedcomment"
                        | "rel"
                        | "size"
                        | "timestamp"
                        | "title"
                        | "user"
                    >;
                    /**
                     * Return individual diffs for these slots, rather than one combined diff for all slots.
                     */
                    slots?: "*" | OneOrMore<"main" | "mediainfo">;
                    /**
                     * Return the comparison formatted as inline HTML.
                     *
                     * Defaults to `table`.
                     */
                    difftype?: "inline" | "table" | "unified";
                }

                /**
                 * Create a new user account.
                 *
                 * The general procedure to use this module is:
                 *
                 * - Fetch the fields available from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=create`, and a `createaccount` token from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`}.
                 * - Present the fields to the user, and obtain their submission.
                 * - Post to this module, supplying `createreturnurl` and any relevant fields.
                 * - Check the `status` in the response.
                 * - If you received `PASS` or `FAIL`, you're done. The operation either succeeded or it didn't.
                 * - If you received `UI`, present the new fields to the user and obtain their submission. Then post to this module with `createcontinue` and the relevant fields set, and repeat step 4.
                 * - If you received `REDIRECT`, direct the user to the `redirecttarget` and wait for the return to `createreturnurl`. Then post to this module with `createcontinue` and any fields passed to the return URL, and repeat step 4.
                 * - If you received `RESTART`, that means the authentication worked but we don't have a linked user account. You might treat this as `UI` or as `FAIL`.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Account_creation
                 */
                interface CreateAccount extends Params {
                    action: "createaccount";
                    /**
                     * Only use these authentication requests, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=create` or from a previous response from this module.
                     */
                    createrequests?: string | string[];
                    /**
                     * Format to use for returning messages.
                     *
                     * Defaults to `wikitext`.
                     */
                    createmessageformat?: "html" | "none" | "raw" | "wikitext";
                    /**
                     * Merge field information for all authentication requests into one array.
                     */
                    createmergerequestfields?: boolean;
                    /**
                     * Preserve state from a previous failed login attempt, if possible.
                     *
                     * If {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} returned true for `hasprimarypreservedstate`, requests marked as `primary-required` should be omitted. If it returned a non-empty value for `preservedusername`, that username must be used for the `username` parameter.
                     */
                    createpreservestate?: boolean;
                    /**
                     * Return URL for third-party authentication flows, must be absolute. Either this or `createcontinue` is required.
                     *
                     * Upon receiving a `REDIRECT` response, you will typically open a browser or web view to the specified `redirecttarget` URL for a third-party authentication flow. When that completes, the third party will send the browser or web view to this URL. You should extract any query or POST parameters from the URL and pass them as a `createcontinue` request to this API module.
                     */
                    createreturnurl?: string;
                    /**
                     * This request is a continuation after an earlier `UI` or `REDIRECT` response. Either this or `createreturnurl` is required.
                     */
                    createcontinue?: boolean;
                    /**
                     * A "createaccount" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    createtoken: string;
                }

                /**
                 * Forcibly create a local account. The central account must exist.
                 */
                interface CreateLocalAccount extends Params {
                    action: "createlocalaccount";
                    /**
                     * User to create the local account for.
                     */
                    username: string;
                    /**
                     * Reason for creating the local account.
                     */
                    reason?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Used by browsers to report violations of the Content Security Policy. This module should never be used, except when used automatically by a CSP compliant web browser.
                 *
                 * @private
                 */
                interface CSPReport extends Params {
                    action: "cspreport";
                    /**
                     * Mark as being a report from a monitoring policy, not an enforced policy
                     */
                    reportonly?: boolean;
                    /**
                     * What generated the CSP header that triggered this report
                     *
                     * Defaults to `internal`.
                     */
                    source?: string;
                }

                /**
                 * Check if any fast, unreviewed translation has been published recently for the current user.
                 *
                 * @private
                 */
                interface CXCheckUnreviewed extends Params {
                    action: "cxcheckunreviewed";
                }

                /**
                 * Delete a draft translation created using the Content Translation extension.
                 */
                interface CXDelete extends Params {
                    action: "cxdelete";
                    /**
                     * The source language code.
                     */
                    from: string;
                    /**
                     * The target language code.
                     */
                    to: string;
                    /**
                     * The title of the source page.
                     */
                    sourcetitle: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Save a page created using the Content Translation extension.
                 *
                 * @private
                 */
                interface CXPublish extends Params {
                    action: "cxpublish";
                    /**
                     * The title of the page to perform actions on.
                     */
                    title: string;
                    /**
                     * The content to save.
                     */
                    html: string;
                    /**
                     * The source language code.
                     */
                    from: string;
                    /**
                     * The target language code.
                     */
                    to: string;
                    /**
                     * The title of the source page.
                     */
                    sourcetitle: string;
                    /**
                     * The categories to put the published page in.
                     */
                    categories?: string;
                    /**
                     * The edit tags to add to the published page.
                     */
                    publishtags?: string | string[];
                    /**
                     * Captcha ID (when saving with a captcha response).
                     */
                    wpCaptchaId?: string;
                    /**
                     * Answer to the captcha (when saving with a captcha response).
                     */
                    wpCaptchaWord?: string;
                    /**
                     * Version of the editor used to publish the translation.
                     */
                    cxversion: number;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Save a section created using the Content Translation extension's section translation feature.
                 *
                 * @private
                 */
                interface CXPublishSection extends Params {
                    action: "cxpublishsection";
                    /**
                     * The title of the page to perform actions on.
                     */
                    title: string;
                    /**
                     * The content to save.
                     */
                    html: string;
                    /**
                     * The source language code.
                     */
                    sourcelanguage: string;
                    /**
                     * The target language code.
                     */
                    targetlanguage: string;
                    /**
                     * The title of the source page.
                     */
                    sourcetitle: string;
                    /**
                     * The source page revision id.
                     */
                    sourcerevid: string;
                    /**
                     * The title of the source section.
                     */
                    sourcesectiontitle: string;
                    /**
                     * The title of the target section.
                     */
                    targetsectiontitle: string;
                    /**
                     * The section translation id associated with the draft section translation.
                     */
                    sectiontranslationid: number;
                    /**
                     * Use a sandbox title for translation.
                     */
                    issandbox?: boolean;
                    /**
                     * Captcha ID (when saving with a captcha response).
                     */
                    captchaid?: string;
                    /**
                     * Answer to the captcha (when saving with a captcha response).
                     */
                    captchaword?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * This module allows to save draft translations by section to save bandwidth and to collect parallel corpora.
                 *
                 * @private
                 */
                interface CXSave extends Params {
                    action: "cxsave";
                    /**
                     * The source language code.
                     */
                    from: string;
                    /**
                     * The target language code.
                     */
                    to: string;
                    /**
                     * The title of the source page.
                     */
                    sourcetitle: string;
                    /**
                     * The title of the page to perform actions on.
                     */
                    title: string;
                    /**
                     * JSON-encoded section data. Each section is an object and has the following keys: content, sectionId, sequenceId, sequenceId, origin
                     */
                    content: string;
                    /**
                     * The revision of the source page.
                     */
                    sourcerevision: number;
                    /**
                     * Information about translation completion (progress). JSON with the keys `any`, `human`, `mt` and `mtSectionsCount`. The keys' values are percentages.
                     */
                    progress: string;
                    /**
                     * Version of the editor used to create the draft translation.
                     */
                    cxversion?: number;
                    /**
                     * JSON encoded array of source categories to be saved with draft translation.
                     */
                    sourcecategories?: string;
                    /**
                     * JSON encoded array of target categories to be saved with draft translation.
                     */
                    targetcategories?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Create and save a section translation to database, for every translated section of the given article translation
                 *
                 * @private
                 */
                interface CXSplit extends Params {
                    action: "cxsplit";
                    /**
                     * The id of the translation, for which the section translations will be created.
                     */
                    translationid: number;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Manage the suggestion lists. Add suggestions to lists and remove them.
                 */
                interface CXSuggestionList extends Params {
                    action: "cxsuggestionlist";
                    /**
                     * Suggestion list name.
                     */
                    listname: string;
                    /**
                     * Action to be performed on the list.
                     */
                    listaction: "add" | "remove" | "view";
                    /**
                     * Page titles.
                     */
                    titles: string | string[];
                    /**
                     * The source language code.
                     */
                    from: string;
                    /**
                     * The target language code.
                     */
                    to?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Get JWT tokens to authenticate with cxserver.
                 */
                interface CXToken extends Params {
                    action: "cxtoken";
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Delete a page.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Delete
                 */
                interface Delete extends Params {
                    action: "delete";
                    /**
                     * Title of the page to delete. Cannot be used together with `pageid`.
                     */
                    title?: string;
                    /**
                     * Page ID of the page to delete. Cannot be used together with `title`.
                     */
                    pageid?: number;
                    /**
                     * Reason for the deletion. If not set, an automatically generated reason will be used.
                     */
                    reason?: string;
                    /**
                     * Change tags to apply to the entry in the deletion log.
                     */
                    tags?: string | string[];
                    /**
                     * Delete the talk page, if it exists.
                     */
                    deletetalk?: boolean;
                    /**
                     * Add the page to the current user's watchlist.
                     *
                     * @deprecated
                     */
                    watch?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * Remove the page from the current user's watchlist.
                     *
                     * @deprecated
                     */
                    unwatch?: boolean;
                    /**
                     * The name of the old image to delete as provided by {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageinfo action=query&prop=imageinfo&iiprop=archivename}.
                     */
                    oldimage?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Delete a global user.
                 */
                interface DeleteGlobalAccount extends Params {
                    action: "deleteglobalaccount";
                    /**
                     * User to delete.
                     */
                    user: string;
                    /**
                     * Reason for deleting the user.
                     */
                    reason?: string;
                    /**
                     * A "deleteglobalaccount" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Get information about comment changes between two page revisions.
                 *
                 * @private
                 */
                interface DiscussionToolsCompare extends Params {
                    action: "discussiontoolscompare";
                    /**
                     * First title to compare.
                     */
                    fromtitle?: string;
                    /**
                     * First revision to compare.
                     */
                    fromrev?: number;
                    /**
                     * Second title to compare.
                     */
                    totitle?: string;
                    /**
                     * Second revision to compare.
                     */
                    torev?: number;
                }

                /**
                 * Post a message on a discussion page.
                 */
                interface DiscussionToolsEdit extends Params {
                    action: "discussiontoolsedit";
                    /**
                     * Action to perform.
                     *
                     * - **addcomment**: Add a new comment as a reply to an existing comment.
                     * - **addtopic**: Add a new discussion section and the first comment in it.
                     */
                    paction: "addcomment" | "addtopic";
                    /**
                     * Automatically subscribe the user to the talk page thread?
                     *
                     * Defaults to `default`.
                     */
                    autosubscribe?: "default" | "no" | "yes";
                    /**
                     * The page to perform actions on.
                     */
                    page: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * An optional unique ID generated in the client to prevent double-posting.
                     */
                    formtoken?: string;
                    /**
                     * Name of the comment to reply to. Only used when `paction` is `addcomment`.
                     */
                    commentname?: string;
                    /**
                     * ID of the comment to reply to. Only used when `paction` is `addcomment`. Overrides `commentname`.
                     */
                    commentid?: string;
                    /**
                     * Content to post, as wikitext. Cannot be used together with `html`.
                     */
                    wikitext?: string;
                    /**
                     * Content to post, as HTML. Cannot be used together with `wikitext`.
                     */
                    html?: string;
                    /**
                     * Edit summary.
                     */
                    summary?: string;
                    /**
                     * The title for a new section when using `$1section=new`. Only used when `paction` is `addtopic`.
                     */
                    sectiontitle?: string;
                    /**
                     * Allow posting a new section without a title.
                     */
                    allownosectiontitle?: boolean;
                    /**
                     * Apply the selected skin to the parser output. May affect the following properties: `text`, `langlinks`, `headitems`, `modules`, `jsconfigvars`, `indicators`.
                     */
                    useskin?: string;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     */
                    watchlist?: string;
                    /**
                     * Captcha ID (when saving with a captcha response).
                     */
                    captchaid?: string;
                    /**
                     * Answer to the captcha (when saving with a captcha response).
                     */
                    captchaword?: string;
                    /**
                     * Omit the HTML content of the new revision in the response.
                     */
                    nocontent?: string;
                    /**
                     * Change tags to apply to the edit.
                     */
                    tags?: string | string[];
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * Return parse output in a format suitable for mobile devices.
                     */
                    mobileformat?: boolean;
                }

                /**
                 * Find a comment by its ID or name.
                 */
                interface DiscussionToolsFindComment extends Params {
                    action: "discussiontoolsfindcomment";
                    /**
                     * Comment ID or name
                     */
                    idorname?: string;
                    /**
                     * Heading hash fragment
                     */
                    heading?: string;
                    /**
                     * Page that the heading hash fragment once existed on
                     */
                    page?: string;
                }

                /**
                 * Get the subscription statuses of given topics.
                 */
                interface DiscussionToolsGetSubscriptions extends Params {
                    action: "discussiontoolsgetsubscriptions";
                    /**
                     * Names of the topics to check
                     */
                    commentname: string | string[];
                }

                /**
                 * Returns metadata required to initialize the discussion tools.
                 *
                 * @private
                 */
                interface DiscussionToolsPageInfo extends Params {
                    action: "discussiontoolspageinfo";
                    /**
                     * The page to perform actions on.
                     */
                    page?: string;
                    /**
                     * The revision number to use (defaults to latest revision).
                     */
                    oldid?: number;
                    /**
                     * Which properties to get:
                     *
                     * - **transcludedfrom**: Which other pages comments have been transcluded from
                     * - **threaditemshtml**: Representation of the comment threads parsed from the page
                     *
                     * Defaults to `transcludedfrom`.
                     */
                    prop?: OneOrMore<"threaditemshtml" | "transcludedfrom">;
                    /**
                     * Exclude user signatures from the comments (when using `prop=threaditemshtml`).
                     */
                    excludesignatures?: boolean;
                }

                /**
                 * Preview a message on a discussion page.
                 *
                 * @private
                 */
                interface DiscussionToolsPreview extends Params {
                    action: "discussiontoolspreview";
                    /**
                     * Type of message to preview
                     *
                     * - **reply**: Add a new comment as a reply to an existing comment.
                     * - **topic**: Add a new discussion section and the first comment in it.
                     */
                    type: "reply" | "topic";
                    /**
                     * The page to perform actions on.
                     */
                    page: string;
                    /**
                     * Content to preview, as wikitext.
                     */
                    wikitext: string;
                    /**
                     * The title for a new section when using `section=new`.
                     */
                    sectiontitle?: string;
                    /**
                     * Apply the selected skin to the parser output. May affect the following properties: `text`, `langlinks`, `headitems`, `modules`, `jsconfigvars`, `indicators`.
                     */
                    useskin?: string;
                    /**
                     * Return parse output in a format suitable for mobile devices.
                     */
                    mobileformat?: boolean;
                }

                /**
                 * Subscribe (or unsubscribe) to receive notifications about a topic.
                 */
                interface DiscussionToolsSubscribe extends Params {
                    action: "discussiontoolssubscribe";
                    /**
                     * A page on which the topic appears
                     */
                    page: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Name of the topic to subscribe to (or unsubscribe from)
                     */
                    commentname: string;
                    /**
                     * True to subscribe, false to unsubscribe
                     */
                    subscribe: boolean;
                }

                /**
                 * Send a public thank-you notification for a comment.
                 */
                interface DiscussionToolsThank extends Params {
                    action: "discussiontoolsthank";
                    /**
                     * The page to perform actions on.
                     */
                    page: string;
                    /**
                     * ID of the comment to thank.
                     */
                    commentid: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Manually trigger a notification to a user
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Echo_(Notifications)/API
                 */
                interface EchoCreateEvent extends Params {
                    action: "echocreateevent";
                    /**
                     * User to send the notification to
                     */
                    user?: string;
                    /**
                     * Header content of the notification
                     */
                    header: string;
                    /**
                     * Body content of the notification
                     */
                    content: string;
                    /**
                     * Page to link to in the notification
                     */
                    page?: string;
                    /**
                     * Section where notification would be delivered
                     *
                     * Defaults to `notice`.
                     */
                    section: "alert" | "notice";
                    /**
                     * Whether to send an email as well
                     */
                    email?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Mark notifications as read for the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Echo_(Notifications)/API
                 */
                interface EchoMarkRead extends Params {
                    action: "echomarkread";
                    /**
                     * List of wikis to mark notification as read (defaults to only current wiki).
                     */
                    wikis?: string | string[];
                    /**
                     * A list of notification IDs to mark as read.
                     */
                    list?: string | string[];
                    /**
                     * A list of notification IDs to mark as unread.
                     */
                    unreadlist?: string | string[];
                    /**
                     * If set, marks all of a user's notifications as read.
                     */
                    all?: boolean;
                    /**
                     * A list of sections to mark as read.
                     */
                    sections?: OneOrMore<"alert" | "message">;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Mark notifications as seen for the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Echo_(Notifications)/API
                 */
                interface EchoMarkSeen extends Params {
                    action: "echomarkseen";
                    /**
                     * Type of notifications to mark as seen: 'alert', 'message' or 'all'.
                     */
                    type: "alert" | "all" | "message";
                    /**
                     * Timestamp format to use for output, 'ISO_8601' or 'MW'. 'MW' is deprecated here, so all clients should switch to 'ISO_8601'. This parameter will be removed, and 'ISO_8601' will become the only output format.
                     *
                     * Defaults to `MW`.
                     */
                    timestampFormat?: "ISO_8601" | "MW";
                }

                /**
                 * Mute or unmute notifications from certain users or pages.
                 */
                interface EchoMute extends Params {
                    action: "echomute";
                    /**
                     * Which mute list to add to or remove from
                     */
                    type: "page-linked-title" | "user";
                    /**
                     * Pages or users to add to the mute list
                     */
                    mute?: string | string[];
                    /**
                     * Pages or users to remove from the mute list
                     */
                    unmute?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Manage push subscriptions for the current user.
                 *
                 * @private
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:Echo#API
                 */
                interface EchoPushSubscriptions extends Params {
                    action: "echopushsubscriptions";
                    /**
                     * Action to perform.
                     *
                     * - **{@link https://en.wikipedia.org/wiki/Special:ApiHelp/echopushsubscriptions%2Bcreate create}**: Internal. Register push subscriptions for the current user.
                     * - **{@link https://en.wikipedia.org/wiki/Special:ApiHelp/echopushsubscriptions%2Bdelete delete}**: Internal. Unregister push subscriptions for the current user or another specified user.
                     */
                    command: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Create and edit pages.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Edit
                 */
                interface Edit extends Params {
                    action: "edit";
                    /**
                     * Title of the page to edit. Cannot be used together with `pageid`.
                     */
                    title?: string;
                    /**
                     * Page ID of the page to edit. Cannot be used together with `title`.
                     */
                    pageid?: number;
                    /**
                     * Section identifier. `0` for the top section, `new` for a new section. Often a positive integer, but can also be non-numeric.
                     */
                    section?: string;
                    /**
                     * The title for a new section when using `section=new`.
                     */
                    sectiontitle?: string;
                    /**
                     * Page content.
                     */
                    text?: string;
                    /**
                     * Edit summary.
                     *
                     * When this parameter is not provided or empty, {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Autosummary an edit summary may be generated automatically}.
                     *
                     * When using `section=new` and `sectiontitle` is not provided, the value of this parameter is used for the section title instead, and an edit summary is generated automatically.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as a minor edit.
                     */
                    minor?: boolean;
                    /**
                     * Do not mark this edit as a minor edit even if the "Mark all edits minor by default" user preference is set.
                     */
                    notminor?: boolean;
                    /**
                     * Mark this edit as a bot edit.
                     */
                    bot?: boolean;
                    /**
                     * ID of the base revision, used to detect edit conflicts. May be obtained through {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions action=query&prop=revisions}. Self-conflicts cause the edit to fail unless basetimestamp is set.
                     */
                    baserevid?: number;
                    /**
                     * Timestamp of the base revision, used to detect edit conflicts. May be obtained through {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions action=query&prop=revisions&rvprop=timestamp}. Self-conflicts are ignored.
                     */
                    basetimestamp?: string;
                    /**
                     * Timestamp when the editing process began, used to detect edit conflicts. An appropriate value may be obtained using {@link https://www.mediawiki.org/wiki/Special:ApiHelp/main `curtimestamp`} when beginning the edit process (e.g. when loading the page content to edit).
                     */
                    starttimestamp?: string;
                    /**
                     * Override any errors about the page having been deleted in the meantime.
                     */
                    recreate?: boolean;
                    /**
                     * Don't edit the page if it exists already.
                     */
                    createonly?: boolean;
                    /**
                     * Throw an error if the page doesn't exist.
                     */
                    nocreate?: boolean;
                    /**
                     * Add the page to the current user's watchlist.
                     *
                     * @deprecated
                     */
                    watch?: boolean;
                    /**
                     * Remove the page from the current user's watchlist.
                     *
                     * @deprecated
                     */
                    unwatch?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * The MD5 hash of the text parameter, or the prependtext and appendtext parameters concatenated. If set, the edit won't be done unless the hash is correct.
                     */
                    md5?: string;
                    /**
                     * Add this text to the beginning of the page or section. Overrides text.
                     */
                    prependtext?: string;
                    /**
                     * Add this text to the end of the page or section. Overrides text.
                     *
                     * Use section=new to append a new section, rather than this parameter.
                     */
                    appendtext?: string;
                    /**
                     * Undo this revision. Overrides text, prependtext and appendtext.
                     */
                    undo?: number;
                    /**
                     * Undo all revisions from undo to this one. If not set, just undo one revision.
                     */
                    undoafter?: number;
                    /**
                     * Automatically resolve redirects.
                     */
                    redirect?: boolean;
                    /**
                     * Content serialization format used for the input text.
                     */
                    contentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Content model of the new content.
                     */
                    contentmodel?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * The token should always be sent as the last parameter, or at least after the text parameter.
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * Answer to the CAPTCHA
                     */
                    captchaword?: string;
                    /**
                     * CAPTCHA ID from previous request
                     */
                    captchaid?: string;
                }

                /**
                 * Check the status of a URL for use as a reference.
                 *
                 * @private
                 */
                interface EditCheckReferenceUrl extends Params {
                    action: "editcheckreferenceurl";
                    /**
                     * URL to check.
                     */
                    url: string;
                }

                /**
                 * Edit a mass message delivery list.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:MassMessage/API
                 */
                interface EditMassMessageList extends Params {
                    action: "editmassmessagelist";
                    /**
                     * Title of the delivery list to update.
                     */
                    spamlist: string;
                    /**
                     * New description for the delivery list.
                     */
                    description?: string;
                    /**
                     * Titles to add to the list.
                     */
                    add?: string | string[];
                    /**
                     * Titles to remove from the list.
                     */
                    remove?: string | string[];
                    /**
                     * Whether the edit should be marked as minor in the history of the list.
                     */
                    minor?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Email a user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Email
                 */
                interface EmailUser extends Params {
                    action: "emailuser";
                    /**
                     * User to send the email to.
                     */
                    target: string;
                    /**
                     * Subject header.
                     */
                    subject?: string;
                    /**
                     * Email body.
                     */
                    text: string;
                    /**
                     * Send a copy of this mail to me.
                     */
                    ccme?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Expands all templates within wikitext.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Expandtemplates
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Parsing_wikitext#expandtemplates
                 */
                interface ExpandTemplates extends Params {
                    action: "expandtemplates";
                    /**
                     * Title of the page.
                     */
                    title?: string;
                    /**
                     * Wikitext to convert.
                     */
                    text: string;
                    /**
                     * Revision ID, for `{{REVISIONID}}` and similar variables.
                     */
                    revid?: number;
                    /**
                     * Which pieces of information to get.
                     *
                     * Note that if no values are selected, the result will contain the wikitext, but the output will be in a deprecated format.
                     *
                     * - **wikitext**: The expanded wikitext.
                     * - **categories**: Any categories present in the input that are not represented in the wikitext output.
                     * - **properties**: Page properties defined by expanded magic words in the wikitext.
                     * - **volatile**: Whether the output is volatile and should not be reused elsewhere within the page.
                     * - **ttl**: The maximum time after which caches of the result should be invalidated.
                     * - **modules**: Any ResourceLoader modules that parser functions have requested be added to the output. Either `jsconfigvars` or `encodedjsconfigvars` must be requested jointly with `modules`.
                     * - **jsconfigvars**: Gives the JavaScript configuration variables specific to the page.
                     * - **encodedjsconfigvars**: Gives the JavaScript configuration variables specific to the page as a JSON string.
                     * - **parsetree**: The XML parse tree of the input.
                     */
                    prop?: OneOrMore<
                        | "categories"
                        | "encodedjsconfigvars"
                        | "jsconfigvars"
                        | "modules"
                        | "parsetree"
                        | "properties"
                        | "ttl"
                        | "volatile"
                        | "wikitext"
                    >;
                    /**
                     * Whether to include HTML comments in the output.
                     */
                    includecomments?: boolean;
                    /**
                     * Whether to include internal merge strategy information in jsconfigvars.
                     */
                    showstrategykeys?: boolean;
                    /**
                     * Generate XML parse tree (replaced by prop=parsetree).
                     *
                     * @deprecated
                     */
                    generatexml?: boolean;
                    /**
                     * Template sandbox prefix, as with {@link https://www.mediawiki.org/wiki/Special:TemplateSandbox Special:TemplateSandbox}.
                     */
                    templatesandboxprefix?: string | string[];
                    /**
                     * Parse the page using `templatesandboxtext` in place of the contents of the page named here.
                     */
                    templatesandboxtitle?: string;
                    /**
                     * Parse the page using this page content in place of the page named by `templatesandboxtitle`.
                     */
                    templatesandboxtext?: string;
                    /**
                     * Content model of `templatesandboxtext`.
                     */
                    templatesandboxcontentmodel?: string;
                    /**
                     * Content format of `templatesandboxtext`.
                     */
                    templatesandboxcontentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                }

                /**
                 * Get a new FancyCaptcha.
                 *
                 * @private
                 */
                interface FancyCaptchaReload extends Params {
                    action: "fancycaptchareload";
                }

                /**
                 * Returns a featured content feed.
                 */
                interface FeaturedFeed extends Params {
                    action: "featuredfeed";
                    /**
                     * The format of the feed.
                     *
                     * Defaults to `rss`.
                     */
                    feedformat?: "atom" | "rss" | "sitemap";
                    /**
                     * Feed name.
                     */
                    feed: string;
                    /**
                     * Feed language code. Ignored by some feeds.
                     */
                    language?: string;
                }

                /**
                 * Returns a user's contributions feed.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Feedcontributions
                 */
                interface FeedContributions extends Params {
                    action: "feedcontributions";
                    /**
                     * The format of the feed.
                     *
                     * Defaults to `rss`.
                     */
                    feedformat?: "atom" | "rss" | "sitemap";
                    /**
                     * What users to get the contributions for.
                     */
                    user: string;
                    /**
                     * Which namespace to filter the contributions by.
                     */
                    namespace?: number;
                    /**
                     * From year (and earlier).
                     */
                    year?: number;
                    /**
                     * From month (and earlier).
                     */
                    month?: number;
                    /**
                     * Filter contributions that have these tags.
                     *
                     * Defaults to an empty string.
                     */
                    tagfilter?: string | string[];
                    /**
                     * Show only deleted contributions.
                     */
                    deletedonly?: boolean;
                    /**
                     * Only show edits that are the latest revisions.
                     */
                    toponly?: boolean;
                    /**
                     * Only show edits that are page creations.
                     */
                    newonly?: boolean;
                    /**
                     * Hide minor edits.
                     */
                    hideminor?: boolean;
                    /**
                     * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                     */
                    showsizediff?: boolean;
                }

                /**
                 * Returns a recent changes feed.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Feedrecentchanges
                 */
                interface FeedRecentChanges extends Params {
                    action: "feedrecentchanges";
                    /**
                     * The format of the feed.
                     *
                     * Defaults to `rss`.
                     */
                    feedformat?: "atom" | "rss" | "sitemap";
                    /**
                     * Namespace to limit the results to.
                     */
                    namespace?: number;
                    /**
                     * All namespaces but the selected one.
                     */
                    invert?: boolean;
                    /**
                     * Include associated (talk or main) namespace.
                     */
                    associated?: boolean;
                    /**
                     * Days to limit the results to.
                     *
                     * Defaults to 7.
                     */
                    days?: number;
                    /**
                     * Maximum number of results to return.
                     *
                     * Defaults to 50.
                     */
                    limit?: number;
                    /**
                     * Show changes since then.
                     */
                    from?: string;
                    /**
                     * Hide minor changes.
                     */
                    hideminor?: boolean;
                    /**
                     * Hide changes made by bots.
                     */
                    hidebots?: boolean;
                    /**
                     * Hide changes made by anonymous users.
                     */
                    hideanons?: boolean;
                    /**
                     * Hide changes made by registered users.
                     */
                    hideliu?: boolean;
                    /**
                     * Hide patrolled changes.
                     */
                    hidepatrolled?: boolean;
                    /**
                     * Hide changes made by the current user.
                     */
                    hidemyself?: boolean;
                    /**
                     * Hide category membership changes.
                     */
                    hidecategorization?: boolean;
                    /**
                     * Filter by tag.
                     */
                    tagfilter?: string;
                    /**
                     * All edits except ones tagged with the selected ones.
                     */
                    inverttags?: boolean;
                    /**
                     * Show only changes on pages linked from this page.
                     */
                    target?: string;
                    /**
                     * Show changes on pages linked to the selected page instead.
                     */
                    showlinkedto?: boolean;
                }

                /**
                 * Return a feed of discussion threads.
                 */
                interface FeedThreads extends Params {
                    action: "feedthreads";
                    /**
                     * The format of the feed.
                     *
                     * Defaults to `rss`.
                     */
                    feedformat?: "atom" | "rss" | "sitemap";
                    /**
                     * Number of days of threads to show.
                     *
                     * Defaults to 7.
                     */
                    days?: number;
                    /**
                     * Types of posts to show.
                     *
                     * Defaults to `newthreads`.
                     */
                    type?: OneOrMore<"newthreads" | "replies">;
                    /**
                     * Limit results to threads on these talk pages.
                     */
                    talkpage?: string | string[];
                    /**
                     * Limit results to these threads and their descendants.
                     */
                    thread?: string | string[];
                }

                /**
                 * Returns a watchlist feed.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist_feed
                 */
                interface FeedWatchlist extends Params {
                    action: "feedwatchlist";
                    /**
                     * The format of the feed.
                     *
                     * Defaults to `rss`.
                     */
                    feedformat?: "atom" | "rss" | "sitemap";
                    /**
                     * List pages modified within this many hours from now.
                     *
                     * Defaults to 24.
                     */
                    hours?: number;
                    /**
                     * Link directly to changed sections if possible.
                     */
                    linktosections?: boolean;
                    /**
                     * Include multiple revisions of the same page within given timeframe.
                     */
                    allrev?: boolean;
                    /**
                     * Used along with token to access a different user's watchlist.
                     */
                    wlowner?: string;
                    /**
                     * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                     *
                     * Sensitive parameter.
                     */
                    wltoken?: string;
                    /**
                     * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set show=minor|!anon.
                     */
                    wlshow?: OneOrMore<
                        Toggle<"anon" | "autopatrolled" | "bot" | "minor" | "patrolled" | "unread">
                    >;
                    /**
                     * Which types of changes to show:
                     *
                     * - **edit**: Regular page edits.
                     * - **new**: Page creations.
                     * - **log**: Log entries.
                     * - **external**: External changes.
                     * - **categorize**: Category membership changes.
                     *
                     * Defaults to `edit`, `new`, `log`, and `categorize`.
                     */
                    wltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                    /**
                     * Don't list changes by this user.
                     */
                    wlexcludeuser?: string;
                }

                /**
                 * Revert a file to an old version.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Filerevert
                 */
                interface FileRevert extends Params {
                    action: "filerevert";
                    /**
                     * Target filename, without the File: prefix.
                     */
                    filename: string;
                    /**
                     * Upload comment.
                     *
                     * Defaults to an empty string.
                     */
                    comment?: string;
                    /**
                     * Archive name of the revision to revert to.
                     */
                    archivename: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Get basic information about review flag configuration for this site.
                 *
                 * The following parameters are returned for each tag:
                 *
                 * - **name**: The key name of this tag.
                 * - **levels**: Number of levels the tag has (above "not tagged").
                 * Flagged revisions have an assigned level for each tag. The highest tier that all the tags meet is the review tier of the entire revision.
                 */
                interface FlagConfig extends Params {
                    action: "flagconfig";
                }

                /**
                 * Validate a Flickr URL by using the user ID (NSID) for blacklisting.
                 *
                 * When used with the `list` option, returns all blacklisted IDs.
                 */
                interface FlickrBlacklist extends Params {
                    action: "flickrblacklist";
                    /**
                     * The Flickr URL to be tested.
                     */
                    url?: string;
                    /**
                     * When set, the complete blacklist is returned. Cannot be used together with url.
                     */
                    list?: boolean;
                }

                /**
                 * Allows actions to be taken on Structured Discussions pages.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:Flow/API
                 */
                interface Flow extends Params {
                    action: "flow";
                    /**
                     * The Structured Discussions submodule to invoke.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bedit-header edit-header}**: Edits a board description.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bedit-post edit-post}**: Edits a post's content.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bedit-title edit-title}**: Edits a topic's title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bedit-topic-summary edit-topic-summary}**: Edits a topic summary's content.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Block-topic lock-topic}**: Lock or unlock a Structured Discussions topic.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bmoderate-post moderate-post}**: Moderates a Structured Discussions post.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bmoderate-topic moderate-topic}**: Moderates a Structured Discussions topic.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bnew-topic new-topic}**: Creates a new Structured Discussions topic on the given workflow.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Breply reply}**: Replies to a post.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bundo-edit-header undo-edit-header}**: Retrieve information necessary to undo description edits.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bundo-edit-post undo-edit-post}**: Retrieve information necessary to undo post edit.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bundo-edit-topic-summary undo-edit-topic-summary}**: Retrieve information necessary to undo topic summary edits.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-header view-header}**: View a board description.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-post view-post}**: View a post.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-post-history view-post-history}**: View the revision history of a post.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-topic view-topic}**: View a topic.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-topic-history view-topic-history}**: View the revision history of a topic.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-topic-summary view-topic-summary}**: View a topic summary.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bview-topiclist view-topiclist}**: View a list of topics.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Bclose-open-topic close-open-topic}**: Deprecated. Deprecated in favor of {@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Block-topic action=flow&submodule=lock-topic}.
                     */
                    submodule: string;
                    /**
                     * The page to take the action on.
                     *
                     * Defaults to `Topic:Flow-enabled_page`.
                     */
                    page?: string;
                    /**
                     * A token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Defaults to an empty string.
                     */
                    token?: string;
                }

                /**
                 * Convert text between wikitext and HTML.
                 */
                interface FlowParsoidUtils extends Params {
                    action: "flow-parsoid-utils";
                    /**
                     * Format to convert content from.
                     */
                    from: "html" | "wikitext";
                    /**
                     * Format to convert content to.
                     */
                    to: "html" | "wikitext";
                    /**
                     * Content to be converted.
                     */
                    content: string;
                    /**
                     * Title of the page. Cannot be used together with pageid.
                     */
                    title?: string;
                    /**
                     * ID of the page. Cannot be used together with title.
                     */
                    pageid?: number;
                }

                /**
                 * Send a public thank-you notification for a Flow comment.
                 */
                interface FlowThank extends Params {
                    action: "flowthank";
                    /**
                     * The UUID of the post to thank for.
                     */
                    postid: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Globally block or unblock a user.
                 */
                interface GlobalBlock extends Params {
                    "action": "globalblock";
                    /**
                     * ID of the global block to modify or unblock (obtained through `list=globalblocks`). Cannot be used together with `target`.
                     */
                    "id"?: number;
                    /**
                     * The target IP address or username. Cannot be used together with `id`.
                     */
                    "target"?: string;
                    /**
                     * If specified, will block or reblock the user. Determines how long the block will last for, e.g. "5 months" or "2 weeks". If set to "infinite" or "indefinite" the block will never expire.
                     */
                    "expiry"?: string;
                    /**
                     * If specified, will unblock the user.
                     */
                    "unblock"?: boolean;
                    /**
                     * The reason for blocking/unblocking.
                     */
                    "reason": string;
                    /**
                     * Specify this if the block should only affect logged-out users globally.
                     */
                    "anononly"?: boolean;
                    /**
                     * Specify this if the global block should not prevent account creation.
                     */
                    "allow-account-creation"?: boolean;
                    /**
                     * Specify this if the global block should trigger global autoblocks.
                     */
                    "enable-autoblock"?: boolean;
                    /**
                     * Specify this if the existing block on the target should be modified
                     */
                    "modify"?: boolean;
                    /**
                     * Block the user locally as well. Cannot be used together with `id`.
                     */
                    "alsolocal"?: boolean;
                    /**
                     * Revoke talk page access locally. Cannot be used together with `id`.
                     */
                    "localblockstalk"?: boolean;
                    /**
                     * Revoke email access locally. Cannot be used together with `id`.
                     */
                    "localblocksemail"?: boolean;
                    /**
                     * Specify this if the block should only affect logged-out users locally. Cannot be used together with `id`.
                     */
                    "localanononly"?: boolean;
                    /**
                     * Specify this if the local block should not prevent account creation. Cannot be used together with `id`.
                     */
                    "local-allow-account-creation"?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    "token": string;
                }

                /**
                 * Change local overrides for global preferences for the current user.
                 *
                 * Global values for affected preferences will be ignored.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GlobalPreferences/API
                 */
                interface GlobalPreferenceOverrides extends Params {
                    action: "globalpreferenceoverrides";
                    /**
                     * Reset local overrides. Removes all, or, depending on the value of the `resetkinds` parameter, some types of local overrides and makes them global again.
                     */
                    reset?: boolean;
                    /**
                     * List of types of overrides to reset when the `reset` option is set.
                     *
                     * Defaults to `all`.
                     */
                    resetkinds?: OneOrMore<
                        | "all"
                        | "registered"
                        | "registered-checkmatrix"
                        | "registered-multiselect"
                        | "special"
                        | "unused"
                        | "userjs"
                    >;
                    /**
                     * List of changes, formatted name=value (e.g. skin=vector). If no value is given (not even an equals sign), e.g., preferencename|otherpreference|..., the override will be removed. If any value passed contains the pipe character (`|`), use the {@link https://www.mediawiki.org/wiki/Special:ApiHelp/main#main/datatypes alternative multiple-value separator} for correct operation.
                     */
                    change?: string | string[];
                    /**
                     * The name of the override that should be set to the value given by `optionvalue`.
                     */
                    optionname?: string;
                    /**
                     * The value for the override specified by `optionname`.
                     */
                    optionvalue?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Change global preferences of the current user.
                 *
                 * Only preferences registered for the current wiki can be changed locally.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Globalpreferences
                 */
                interface GlobalPreferences extends Params {
                    action: "globalpreferences";
                    /**
                     * Reset global preferences. Removes all, or, depending on the value of the `resetkinds` parameter, some types of global preferences and make them not global anymore.
                     */
                    reset?: boolean;
                    /**
                     * List of types of preferences to reset when the `reset` option is set.
                     *
                     * Defaults to `all`.
                     */
                    resetkinds?: OneOrMore<
                        | "all"
                        | "registered"
                        | "registered-checkmatrix"
                        | "registered-multiselect"
                        | "special"
                        | "unused"
                        | "userjs"
                    >;
                    /**
                     * List of changes, formatted name=value (e.g. skin=vector). If no value is given (not even an equals sign), e.g., preferencename|otherpreference|..., the preference will be made non-global. If any value passed contains the pipe character (`|`), use the {@link https://www.mediawiki.org/wiki/Special:ApiHelp/main#main/datatypes alternative multiple-value separator} for correct operation.
                     */
                    change?: string | string[];
                    /**
                     * The name of the preference that should be set to the value given by `optionvalue`.
                     */
                    optionname?: string;
                    /**
                     * The value for the preference specified by `optionname`.
                     */
                    optionvalue?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Add/remove a user to/from global groups.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:User_group_membership
                 */
                interface GlobalUserRights extends Params {
                    action: "globaluserrights";
                    /**
                     * Global username.
                     */
                    user?: string;
                    /**
                     * Global user ID.
                     *
                     * @deprecated
                     */
                    userid?: number;
                    /**
                     * Add the user to these global groups.
                     */
                    add?: OneOrMore<
                        | "abusefilter-helper"
                        | "abusefilter-maintainer"
                        | "apihighlimits-requestor"
                        | "captcha-exempt"
                        | "founder"
                        | "global-bot"
                        | "global-deleter"
                        | "global-flow-create"
                        | "global-interface-editor"
                        | "global-ipblock-exempt"
                        | "global-rollbacker"
                        | "global-sysop"
                        | "global-temporary-account-viewer"
                        | "new-wikis-importer"
                        | "oathauth-tester"
                        | "ombuds"
                        | "recursive-export"
                        | "staff"
                        | "steward"
                        | "sysadmin"
                        | "u4c-member"
                        | "vrt-permissions"
                        | "wmf-email-block-override"
                        | "wmf-researcher"
                    >;
                    /**
                     * Expiry timestamps. May be relative (e.g. `5 months` or `2 weeks`) or absolute (e.g. the current timestamp). If only one timestamp is set, it will be used for all groups passed to the `add` parameter. Use `infinite`, `indefinite`, `infinity`, or `never` for a never-expiring user group.
                     *
                     * Defaults to `infinite`.
                     */
                    expiry?: string | string[];
                    /**
                     * Remove the user from these global groups.
                     */
                    remove?: OneOrMore<
                        | "abusefilter-helper"
                        | "abusefilter-maintainer"
                        | "apihighlimits-requestor"
                        | "captcha-exempt"
                        | "founder"
                        | "global-bot"
                        | "global-deleter"
                        | "global-flow-create"
                        | "global-interface-editor"
                        | "global-ipblock-exempt"
                        | "global-rollbacker"
                        | "global-sysop"
                        | "global-temporary-account-viewer"
                        | "new-wikis-importer"
                        | "oathauth-tester"
                        | "ombuds"
                        | "recursive-export"
                        | "staff"
                        | "steward"
                        | "sysadmin"
                        | "u4c-member"
                        | "vrt-permissions"
                        | "wmf-email-block-override"
                        | "wmf-researcher"
                    >;
                    /**
                     * Reason for the change.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * A "userrights" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * For compatibility, the token used in the web UI is also accepted.
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * This parameter is currently unused.
                     */
                    tags?: string | string[];
                }

                /**
                 * Set message group workflow states.
                 */
                interface GroupReview extends Params {
                    action: "groupreview";
                    /**
                     * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    group: string;
                    /**
                     * Language code.
                     *
                     * Defaults to `en`.
                     */
                    language?: string;
                    /**
                     * The new state for the group.
                     */
                    state: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Invalidate an image recommendation.
                 *
                 * Calling this API will:
                 *
                 * - Reset the {@link https://www.mediawiki.org/wiki/wikitech:Add_Image "hasrecommendation:image" weighted tag} for the article, so the article is no longer returned in search results for image suggestions.
                 * - Add the article to a short-lived cache, which the {@link https://www.mediawiki.org/wiki/Extension:GrowthExperiments GrowthExperiments} extension's ImageRecommendationFilter consults to decide if the article should be excluded from the user's suggested edits queue when accessed on {@link https://en.wikipedia.org/wiki/Special:Homepage Special:Homepage} or via the {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Bgrowthtasks action=query&list=growthtasks} API.
                 * - Generate and send an event to EventGate to the {@link https://schema.wikimedia.org/#!/secondary/jsonschema/mediawiki/page/image-suggestions-feedback image-suggestion-feedback stream}. This allows improvements in the image suggestion pipeline, as the code in the pipeline can account for user feedback when generating recommendations.
                 * Further reading: {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Growth/Personalized_first_day/Structured_tasks/Add_an_image mediawiki.org}
                 *
                 * @private
                 */
                interface GrowthInvalidateImageRecommendation extends Params {
                    action: "growthinvalidateimagerecommendation";
                    /**
                     * Task type (top-level or section-level)
                     *
                     * Defaults to `image-recommendation`.
                     */
                    tasktype?: "image-recommendation" | "section-image-recommendation";
                    /**
                     * Title of the article the image recommendation task is for
                     */
                    title: string;
                    /**
                     * The unprefixed filename for the image recommendation, e.g. `Foo.jpg`
                     */
                    filename: string;
                    /**
                     * The title of the section the image recommendation is for, e.g. `History`
                     */
                    sectiontitle?: string;
                    /**
                     * The 1-based index of the section the image recommendation is for, e.g. `3`
                     */
                    sectionnumber?: number;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Invalidates a suggestion of a praiseworthy mentee in the Personalized praise module on the Mentor dashboard
                 *
                 * @private
                 */
                interface GrowthInvalidatePersonalizedPraiseSuggestion extends Params {
                    action: "growthinvalidatepersonalizedpraisesuggestion";
                    /**
                     * Mentee to invalidate
                     */
                    mentee: string;
                    /**
                     * Reason to invalidate the suggestion
                     */
                    reason?: "praised" | "skipped";
                    /**
                     * Skip reason to invalidate the suggestion
                     */
                    skipreason?: "already-praised" | "not-now" | "not-praiseworthy" | "other";
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Manage information in the structured mentor list (usually stored in {@link https://en.wikipedia.org/wiki/MediaWiki:GrowthMentors.json MediaWiki:GrowthMentors.json}). This module can be used by both current and future mentors (to add themselves or change their details) and administrators (for all users).
                 */
                interface GrowthManageMentorList extends Params {
                    action: "growthmanagementorlist";
                    /**
                     * Action
                     */
                    geaction: "add" | "change" | "remove";
                    /**
                     * Introduction message (use an empty string for the default mentor message)
                     */
                    message?: string;
                    /**
                     * Weight
                     */
                    weight?: "0" | "1" | "2" | "4";
                    /**
                     * Is the mentor currently away? Has to be set (defaults to false).
                     */
                    isaway?: boolean;
                    /**
                     * Until when is the mentor away? Maximum is 1 year from today. Ignored unless isaway is true.
                     */
                    awaytimestamp?: string;
                    /**
                     * Reason for the change
                     *
                     * Defaults to an empty string.
                     */
                    summary?: string;
                    /**
                     * Username of the mentor affected by the change. If not provided, currently logged in user will be used. Can be only used by privileged users.
                     */
                    username?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Schedule an extraordinary update of the mentee overview module in the mentor dashboard. You can only schedule one update per two hours for performance reasons.
                 */
                interface GrowthMentorDashboardUpdateData extends Params {
                    action: "growthmentordashboardupdatedata";
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Set mentee's status (allows mentees to enable/disable mentorship module, or to opt-out entirely, which deletes the mentee/mentor relationship)
                 */
                interface GrowthSetMenteeStatus extends Params {
                    action: "growthsetmenteestatus";
                    /**
                     * New status of the mentee (warning: setting this to optout will permanently deletes mentee/mentor relationship)
                     *
                     * - **enabled**: Mentorship module is enabled
                     * - **disabled**: Mentorship module is fully disabled. This is normally set by the software and used for A/B testing.
                     * - **optout**: Mentee opted out from mentorship; mentee/mentor relationship will be deleted, mentorship module will be replaced with a possibility to opt back in
                     */
                    state: "disabled" | "enabled" | "optout";
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Set user's mentor. Change will be publicly logged.
                 */
                interface GrowthSetMentor extends Params {
                    action: "growthsetmentor";
                    /**
                     * Mentee's username
                     */
                    mentee: string;
                    /**
                     * Mentor's username
                     */
                    mentor: string;
                    /**
                     * Reason for the change
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Mark or unmark a mentee as starred by current user (stored privately and not logged)
                 */
                interface GrowthStarMentee extends Params {
                    action: "growthstarmentee";
                    /**
                     * Action to take (`star` or `unstar`)
                     */
                    gesaction: "star" | "unstar";
                    /**
                     * Mentee to (un)star
                     */
                    gesmentee: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Display help for the specified modules.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Main_page
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:FAQ
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Quick_start_guide
                 */
                interface Help extends Params {
                    action?: "help";
                    /**
                     * Modules to display help for (values of the `action` and `format` parameters, or `main`). Can specify submodules with a `+`.
                     *
                     * Defaults to `main`.
                     */
                    modules?: string | string[];
                    /**
                     * Include help for submodules of the named module.
                     */
                    submodules?: boolean;
                    /**
                     * Include help for submodules recursively.
                     */
                    recursivesubmodules?: boolean;
                    /**
                     * Wrap the output in a standard API response structure.
                     */
                    wrap?: boolean;
                    /**
                     * Include a table of contents in the HTML output.
                     */
                    toc?: boolean;
                }

                /**
                 * Handle questions posted via the help panel for the current user.
                 *
                 * @private
                 */
                interface HelpPanelQuestionPoster extends Params {
                    action: "helppanelquestionposter";
                    /**
                     * The text of the question provided by the user.
                     */
                    body: string;
                    /**
                     * The method by which the question was posted.
                     *
                     * - **helpdesk**: The "Ask the help desk" panel
                     * - **mentor-homepage**: The "Ask your mentor" panel on the newcomer homepage
                     * - **mentor-helppanel**: The "Ask your mentor" screen on the help panel
                     * - **helppanel**: The "Ask the help desk" panel (old name)
                     * - **homepage-mentorship**: The "Ask your mentor" panel on the newcomer homepage (old name)
                     *
                     * Defaults to `helpdesk`.
                     */
                    source?:
                        | "helpdesk"
                        | "helppanel"
                        | "homepage-mentorship"
                        | "mentor-helppanel"
                        | "mentor-homepage";
                    /**
                     * The relevant title, if selected, to include with the question.
                     */
                    relevanttitle?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Obtain formatted questions posted via homepage modules
                 */
                interface HomePageQuestionStore extends Params {
                    action: "homepagequestionstore";
                    /**
                     * The storage location of the questions.
                     */
                    storage:
                        | "growthexperiments-helppanel-questions"
                        | "growthexperiments-mentor-questions";
                }

                /**
                 * This module has been disabled.
                 */
                interface ImageRotate extends Params {
                    action: "imagerotate";
                    /**
                     * Degrees to rotate image clockwise.
                     */
                    rotation: "180" | "270" | "90";
                    /**
                     * When more results are available, use this to continue.
                     */
                    continue?: string;
                    /**
                     * Tags to apply to the entry in the upload log.
                     */
                    tags?: string;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `titles`, `pageids`, and `revids`, and in pages returned by `generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, kk, ku, shi, sr, tg, uz and zh.
                     */
                    converttitles?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Import a page from another wiki, or from an XML file.
                 *
                 * Note that the HTTP POST must be done as a file upload (i.e. using multipart/form-data) when sending a file for the `xml` parameter.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Import
                 */
                interface Import extends Params {
                    action: "import";
                    /**
                     * Log entry import summary.
                     */
                    summary?: string;
                    /**
                     * Uploaded XML file.
                     */
                    xml?: File;
                    /**
                     * For uploaded imports: interwiki prefix to apply to unknown usernames (and known users if `assignknownusers` is set).
                     */
                    interwikiprefix?: string;
                    /**
                     * For interwiki imports: wiki to import from.
                     */
                    interwikisource?: string;
                    /**
                     * For interwiki imports: page to import.
                     */
                    interwikipage?: string;
                    /**
                     * For interwiki imports: import the full history, not just the current version.
                     */
                    fullhistory?: boolean;
                    /**
                     * For interwiki imports: import all included templates as well.
                     */
                    templates?: boolean;
                    /**
                     * Import to this namespace. Cannot be used together with `rootpage`.
                     */
                    namespace?: number;
                    /**
                     * Assign edits to local users where the named user exists locally.
                     */
                    assignknownusers?: boolean;
                    /**
                     * Import as subpage of this page. Cannot be used together with `namespace`.
                     */
                    rootpage?: string;
                    /**
                     * Change tags to apply to the entry in the import log and to the null revision on the imported pages.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Allows direct access to JsonConfig subsystem.
                 */
                interface JsonConfig extends Params {
                    action: "jsonconfig";
                    /**
                     * Which sub-action to perform on JsonConfig:
                     *
                     * - **status**: Shows JsonConfig configuration.
                     * - **reset**: Clears configurations from cache. Requires title parameter and jsonconfig-flush right.
                     * - **reload**: Reloads and caches configurations from config store. Requires title parameter and jsonconfig-reset right.
                     *
                     * Defaults to `status`.
                     */
                    command?: "reload" | "reset" | "status";
                    /**
                     * Namespace number of the title to process.
                     */
                    namespace?: number;
                    /**
                     * Title to process without namespace prefix.
                     *
                     * Defaults to an empty string.
                     */
                    title?: string;
                    /**
                     * For command=reload, use this content instead.
                     *
                     * Defaults to an empty string.
                     */
                    content?: string;
                }

                /**
                 * Retrieve localized JSON data.
                 *
                 * @private
                 */
                interface JsonData extends Params {
                    action: "jsondata";
                    /**
                     * Title to get. By default assumes namespace to be "Data:"
                     */
                    title: string;
                }

                /**
                 * Retrieve a JSON Schema page.
                 */
                interface JsonSchema extends Params {
                    action: "jsonschema";
                    /**
                     * Schema revision ID.
                     */
                    revid?: number;
                    /**
                     * Schema name.
                     */
                    title?: string;
                }

                /**
                 * Search for language names in any script.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Languagesearch
                 */
                interface LanguageSearch extends Params {
                    action: "languagesearch";
                    /**
                     * Search string.
                     */
                    search: string;
                    /**
                     * Number of spelling mistakes allowed in the search string.
                     *
                     * Defaults to 1.
                     */
                    typos?: number;
                }

                /**
                 * Link an account from a third-party provider to the current user.
                 *
                 * The general procedure to use this module is:
                 *
                 * - Fetch the fields available from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=link`, and a `csrf` token from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`}.
                 * - Present the fields to the user, and obtain their submission.
                 * - Post to this module, supplying `linkreturnurl` and any relevant fields.
                 * - Check the `status` in the response.
                 * - If you received `PASS` or `FAIL`, you're done. The operation either succeeded or it didn't.
                 * - If you received `UI`, present the new fields to the user and obtain their submission. Then post to this module with `linkcontinue` and the relevant fields set, and repeat step 4.
                 * - If you received `REDIRECT`, direct the user to the `redirecttarget` and wait for the return to `linkreturnurl`. Then post to this module with `linkcontinue` and any fields passed to the return URL, and repeat step 4.
                 * - If you received `RESTART`, that means the authentication worked but we don't have a linked user account. You might treat this as `UI` or as `FAIL`.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkaccount
                 */
                interface LinkAccount extends Params {
                    action: "linkaccount";
                    /**
                     * Only use these authentication requests, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=link` or from a previous response from this module.
                     */
                    linkrequests?: string | string[];
                    /**
                     * Format to use for returning messages.
                     *
                     * Defaults to `wikitext`.
                     */
                    linkmessageformat?: "html" | "none" | "raw" | "wikitext";
                    /**
                     * Merge field information for all authentication requests into one array.
                     */
                    linkmergerequestfields?: boolean;
                    /**
                     * Return URL for third-party authentication flows, must be absolute. Either this or `linkcontinue` is required.
                     *
                     * Upon receiving a `REDIRECT` response, you will typically open a browser or web view to the specified `redirecttarget` URL for a third-party authentication flow. When that completes, the third party will send the browser or web view to this URL. You should extract any query or POST parameters from the URL and pass them as a `linkcontinue` request to this API module.
                     */
                    linkreturnurl?: string;
                    /**
                     * This request is a continuation after an earlier `UI` or `REDIRECT` response. Either this or `linkreturnurl` is required.
                     */
                    linkcontinue?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    linktoken: string;
                }

                /**
                 * Log in and get authentication cookies.
                 *
                 * This action should only be used in combination with {@link https://www.mediawiki.org/wiki/Special:BotPasswords Special:BotPasswords}; use for main-account login is deprecated and may fail without warning. To safely log in to the main account, use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/clientlogin `action=clientlogin`}.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Login
                 */
                interface Login extends Params {
                    action: "login";
                    /**
                     * Username.
                     */
                    lgname?: string;
                    /**
                     * Password.
                     *
                     * Sensitive parameter.
                     */
                    lgpassword?: string;
                    /**
                     * Domain (optional).
                     */
                    lgdomain?: string;
                    /**
                     * A "login" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    lgtoken?: string;
                }

                /**
                 * Log out and clear session data.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Logout
                 */
                interface Logout extends Params {
                    action: "logout";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Client hints data supplied alongside requests to ApiLogout. For internal use only.
                     *
                     * Sensitive parameter.
                     */
                    checkuserclienthints?: string;
                }

                /**
                 * Manage group synchronization cache.
                 *
                 * @private
                 */
                interface ManageGroupSynchronizationCache extends Params {
                    action: "managegroupsynchronizationcache";
                    /**
                     * The operation to be performed. Possible values: resolve
                     */
                    operation: "resolveGroup" | "resolveMessage";
                    /**
                     * Message title being marked as resolved
                     */
                    title?: string;
                    /**
                     * Group Id of the message being resolved. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    group: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Add a message as a rename of an existing message or a new message in the group during imports
                 *
                 * @private
                 */
                interface ManageMessageGroups extends Params {
                    action: "managemessagegroups";
                    /**
                     * Group Id. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    groupId: string;
                    /**
                     * Target message key being renamed
                     */
                    renameMessageKey?: string;
                    /**
                     * Replacement message key
                     */
                    messageKey: string;
                    /**
                     * The operation to be performed. Possible values: rename / new
                     */
                    operation: "new" | "rename";
                    /**
                     * Changeset name - Default / Unattended / MediaWiki etc.
                     *
                     * Defaults to `default`.
                     */
                    changesetName?: string;
                    /**
                     * Unix timestamp of when the changeset was last modified. If the changeset has been modified after this the API will throw an error.
                     */
                    changesetModified: number;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Perform management tasks relating to change tags.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Tag_management
                 */
                interface ManageTags extends Params {
                    action: "managetags";
                    /**
                     * Which operation to perform:
                     *
                     * - **create**: Create a new change tag for manual use.
                     * - **delete**: Remove a change tag from the database, including removing the tag from all revisions, recent change entries and log entries on which it is used.
                     * - **activate**: Activate a change tag, allowing users to apply it manually.
                     * - **deactivate**: Deactivate a change tag, preventing users from applying it manually.
                     */
                    operation: "activate" | "create" | "deactivate" | "delete";
                    /**
                     * Tag to create, delete, activate or deactivate. For tag creation, the tag must not exist. For tag deletion, the tag must exist. For tag activation, the tag must exist and not be in use by an extension. For tag deactivation, the tag must be currently active and manually defined.
                     */
                    tag: string;
                    /**
                     * An optional reason for creating, deleting, activating or deactivating the tag.
                     */
                    reason?: string;
                    /**
                     * Whether to ignore any warnings that are issued during the operation.
                     */
                    ignorewarnings?: boolean;
                    /**
                     * Change tags to apply to the entry in the tag management log.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Mark a page for translation
                 */
                interface MarkForTranslation extends Params {
                    action: "markfortranslation";
                    /**
                     * The title of the page to act on. Either `title` or `pageid` must be set.
                     */
                    title?: string;
                    /**
                     * The page ID of the page to act on. Either `title` or `pageid` must be set.
                     */
                    pageid?: number;
                    /**
                     * Assert that the current version of the page has this revision ID before continuing. If the page has been updated, exit with an error.
                     */
                    revid?: number;
                    /**
                     * If `yes`, allow translation of the display title. If `no`, do not allow translation. If absent, allow translation unless the page previously disallowed translation, or if the page is a template.
                     */
                    translatetitle?: "no" | "yes";
                    /**
                     * A list of priority language codes. If this is absent, any previously set value will be retained.
                     */
                    prioritylanguages?: string | string[];
                    /**
                     * This parameter is ignored unless the `prioritylanguages` parameter is present. If `true`, prevent translations to languages other than the priority languages.
                     */
                    forcepriority?: boolean;
                    /**
                     * This parameter is ignored unless the `prioritylanguages` parameter is present. A string giving the reason for priority translation.
                     */
                    priorityreason?: string;
                    /**
                     * A list of translation unit IDs which should not be fuzzied. This will be merged with the default list, in which any units with only tvar changes will not be fuzzied.
                     */
                    nofuzzyunits?: string | string[];
                    /**
                     * A list of translation unit IDs which should be fuzzied. This is only useful to override the default and allows fuzzying even units with only tvar changes.
                     */
                    fuzzyunits?: string | string[];
                    /**
                     * If `false`, do not use latest syntax version for this page. If absent, latest syntax version is used.
                     */
                    forcelatestsyntaxversion?: boolean;
                    /**
                     * If `yes` or absent, enable translation aware transclusion for this page. If `no`, disable transclusion.
                     */
                    transclusion?: "no" | "yes";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Send a message to a list of pages.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:MassMessage/API
                 */
                interface MassMessage extends Params {
                    "action": "massmessage";
                    /**
                     * Page containing list of pages to leave a message on.
                     */
                    "spamlist": string;
                    /**
                     * Subject line of the message.
                     */
                    "subject": string;
                    /**
                     * Message body text.
                     */
                    "message"?: string;
                    /**
                     * Page to be sent along with the message body.
                     */
                    "page-message"?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    "token": string;
                }

                /**
                 * Return the likelihood that the stashed image represented by the supplied filekey is a logo
                 */
                interface MediaDetection extends Params {
                    action: "mediadetection";
                    /**
                     * Name of the file page
                     */
                    filename?: string;
                    /**
                     * `filekey` returned from the `stash` API request
                     */
                    filekey?: string;
                }

                /**
                 * Merge page histories.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Mergehistory
                 */
                interface MergeHistory extends Params {
                    action: "mergehistory";
                    /**
                     * Title of the page from which history will be merged. Cannot be used together with `fromid`.
                     */
                    from?: string;
                    /**
                     * Page ID of the page from which history will be merged. Cannot be used together with `from`.
                     */
                    fromid?: number;
                    /**
                     * Title of the page to which history will be merged. Cannot be used together with `toid`.
                     */
                    to?: string;
                    /**
                     * Page ID of the page to which history will be merged. Cannot be used together with `to`.
                     */
                    toid?: number;
                    /**
                     * Timestamp up to which revisions will be moved from the source page's history to the destination page's history. If omitted, the entire page history of the source page will be merged into the destination page.
                     */
                    timestamp?: string;
                    /**
                     * Reason for the history merge.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Message group subscription related operations
                 *
                 * @private
                 */
                interface MessageGroupSubscription extends Params {
                    action: "messagegroupsubscription";
                    /**
                     * Message group ID for the group being subscribed to. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    groupId: string;
                    /**
                     * The operation to be performed.
                     */
                    operation: "subscribe" | "unsubscribe";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Move a page.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Move
                 */
                interface Move extends Params {
                    action: "move";
                    /**
                     * Title of the page to rename. Cannot be used together with `fromid`.
                     */
                    from?: string;
                    /**
                     * Page ID of the page to rename. Cannot be used together with `from`.
                     */
                    fromid?: number;
                    /**
                     * Title to rename the page to.
                     */
                    to: string;
                    /**
                     * Reason for the rename.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Rename the talk page, if it exists.
                     */
                    movetalk?: boolean;
                    /**
                     * Rename subpages, if applicable.
                     */
                    movesubpages?: boolean;
                    /**
                     * Don't create a redirect.
                     */
                    noredirect?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * Ignore any warnings.
                     */
                    ignorewarnings?: boolean;
                    /**
                     * Change tags to apply to the entry in the move log and to the null revision on the destination page.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Subscribe to or unsubscribe from a newsletter.
                 */
                interface NewsletterSubscribe extends Params {
                    action: "newslettersubscribe";
                    /**
                     * ID of the newsletter for which the subscription should be changed.
                     */
                    id: number;
                    /**
                     * Action to do. Should be either `subscribe` or `unsubscribe`.
                     */
                    do: "subscribe" | "unsubscribe";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Validate a two-factor authentication (OATH) token.
                 *
                 * @private
                 */
                interface OATHValidate extends Params {
                    action: "oathvalidate";
                    /**
                     * User to validate token for. Defaults to the current user.
                     */
                    user?: string;
                    /**
                     * JSON encoded data expected by the module currently activated for the user being authenticated
                     */
                    data: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Search the wiki using the OpenSearch protocol.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Opensearch
                 */
                interface OpenSearch extends Params {
                    action: "opensearch";
                    /**
                     * Search string.
                     */
                    search: string;
                    /**
                     * Namespaces to search. Ignored if `search` begins with a valid namespace prefix.
                     *
                     * Defaults to 0.
                     */
                    namespace?: number | number[] | "*";
                    /**
                     * Maximum number of results to return.
                     *
                     * Defaults to 10.
                     */
                    limit?: Limit;
                    /**
                     * Search profile to use.
                     *
                     * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                     * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                     * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                     * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                     * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                     * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                     * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                     * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                     *
                     * Defaults to `engine_autoselect`.
                     */
                    profile?:
                        | "classic"
                        | "engine_autoselect"
                        | "fast-fuzzy"
                        | "fuzzy"
                        | "fuzzy-subphrases"
                        | "normal"
                        | "normal-subphrases"
                        | "strict";
                    /**
                     * No longer used.
                     *
                     * @deprecated
                     */
                    suggest?: boolean;
                    /**
                     * How to handle redirects:
                     *
                     * - **return**: Return the redirect itself.
                     * - **resolve**: Return the target page. May return fewer than limit results.
                     * For historical reasons, the default is "return" for format=json and "resolve" for other formats.
                     */
                    redirects?: "resolve" | "return";
                    /**
                     * The format of the output.
                     *
                     * Defaults to `json`.
                     */
                    format?: "json" | "jsonfm" | "xml" | "xmlfm";
                    /**
                     * If warnings are raised with `format=json`, return an API error instead of ignoring them.
                     */
                    warningsaserror?: boolean;
                }

                /**
                 * Change preferences of the current user.
                 *
                 * Only options which are registered in core or in one of installed extensions, or options with keys prefixed with `userjs-` (intended to be used by user scripts), can be set.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Options
                 */
                interface Options extends Params {
                    action: "options";
                    /**
                     * Resets preferences to the site defaults.
                     */
                    reset?: boolean;
                    /**
                     * List of types of options to reset when the `reset` option is set.
                     *
                     * Defaults to `all`.
                     */
                    resetkinds?: OneOrMore<
                        | "all"
                        | "registered"
                        | "registered-checkmatrix"
                        | "registered-multiselect"
                        | "special"
                        | "unused"
                        | "userjs"
                    >;
                    /**
                     * List of changes, formatted name=value (e.g. skin=vector). If no value is given (not even an equals sign), e.g., optionname|otheroption|..., the option will be reset to its default value. If any value passed contains the pipe character (`|`), use the {@link https://www.mediawiki.org/wiki/Special:ApiHelp/main#main/datatypes alternative multiple-value separator} for correct operation.
                     */
                    change?: string | string[];
                    /**
                     * The name of the option that should be set to the value given by `optionvalue`.
                     */
                    optionname?: string;
                    /**
                     * The value for the option specified by `optionname`. When `optionname` is set but `optionvalue` is omitted, the option will be reset to its default value.
                     */
                    optionvalue?: string;
                    /**
                     * What to do if the option was set globally using the GlobalPreferences extension.
                     *
                     * - `ignore`: Do nothing. The option remains with its previous value.
                     * - `override`: Add a local override.
                     * - `update`: Update the option globally.
                     *
                     * Defaults to `ignore`.
                     */
                    global?: "ignore" | "override" | "update";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Mark an article as reviewed or unreviewed.
                 */
                interface PageTriageAction extends Params {
                    action: "pagetriageaction";
                    /**
                     * ID for the page that the action is performed on.
                     */
                    pageid: number;
                    /**
                     * Whether the page should be marked as reviewed
                     */
                    reviewed?: "0" | "1";
                    /**
                     * Whether the page should be added to PageTriage queue.
                     */
                    enqueue?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Personal note to page creators from reviewers.
                     */
                    note?: string;
                    /**
                     * Whether to skip notification.
                     */
                    skipnotif?: boolean;
                    /**
                     * Change tags to apply to the log entries generated for this action.
                     */
                    tags?: string | string[];
                }

                /**
                 * Get a list of page IDs for building a PageTriage queue.
                 */
                interface PageTriageList extends Params {
                    action: "pagetriagelist";
                    /**
                     * Whether to include predicted class stub
                     */
                    show_predicted_class_stub?: boolean;
                    /**
                     * Whether to include predicted class start
                     */
                    show_predicted_class_start?: boolean;
                    /**
                     * Whether to include predicted class C
                     */
                    show_predicted_class_c?: boolean;
                    /**
                     * Whether to include predicted class B
                     */
                    show_predicted_class_b?: boolean;
                    /**
                     * Whether to include predicted class good
                     */
                    show_predicted_class_good?: boolean;
                    /**
                     * Whether to included predicted class featured
                     */
                    show_predicted_class_featured?: boolean;
                    /**
                     * Whether to include potential issues of vandalism
                     */
                    show_predicted_issues_vandalism?: boolean;
                    /**
                     * Whether to include potential issues of spam
                     */
                    show_predicted_issues_spam?: boolean;
                    /**
                     * Whether to include potential issues of attack
                     */
                    show_predicted_issues_attack?: boolean;
                    /**
                     * Whether to include no potential issues
                     */
                    show_predicted_issues_none?: boolean;
                    /**
                     * Whether to include potential issues of copyvio
                     */
                    show_predicted_issues_copyvio?: boolean;
                    /**
                     * Whether to show only bot edits.
                     */
                    showbots?: boolean;
                    /**
                     * Whether to show only edits by users with the autopatrol user right.
                     */
                    showautopatrolled?: boolean;
                    /**
                     * Whether to include redirects.
                     */
                    showredirs?: boolean;
                    /**
                     * Whether to include pages that are not redirects nor nominated for deletion.
                     */
                    showothers?: boolean;
                    /**
                     * Whether to include reviewed.
                     */
                    showreviewed?: boolean;
                    /**
                     * Whether to include unreviewed.
                     */
                    showunreviewed?: boolean;
                    /**
                     * Whether to include "proposed for deletion".
                     */
                    showdeleted?: boolean;
                    /**
                     * What namespace to pull pages from.
                     */
                    namespace?: number;
                    /**
                     * Which Articles-for-Creation state to show.
                     */
                    afc_state?: number;
                    /**
                     * Whether to show only pages with no category.
                     */
                    no_category?: boolean;
                    /**
                     * Whether to show only pages without any references.
                     */
                    unreferenced?: boolean;
                    /**
                     * Whether to show only pages with no inbound links.
                     */
                    no_inbound_links?: boolean;
                    /**
                     * Whether to show only pages that were previously deleted.
                     */
                    recreated?: boolean;
                    /**
                     * Whether to show only pages created by non autoconfirmed users.
                     */
                    non_autoconfirmed_users?: boolean;
                    /**
                     * Whether to show only pages created by newly autoconfirmed users.
                     */
                    learners?: boolean;
                    /**
                     * Whether to show only pages created by blocked users.
                     */
                    blocked_users?: boolean;
                    /**
                     * Show only pages created by username.
                     */
                    username?: string;
                    /**
                     * Show only pages with this keyword in the snippet.
                     */
                    keyword?: string;
                    /**
                     * Show only pages created on this date and after.
                     */
                    date_range_from?: string;
                    /**
                     * Show only pages created on this date and before.
                     */
                    date_range_to?: string;
                    /**
                     * Return data for the specified page IDs, ignoring other parameters.
                     */
                    page_id?: number;
                    /**
                     * The maximum number of results to return.
                     *
                     * Defaults to 20.
                     */
                    limit?: number;
                    /**
                     * Timestamp to start from.
                     */
                    offset?: number;
                    /**
                     * Page ID to start from (requires offset param to be passed as well).
                     */
                    pageoffset?: number;
                    /**
                     * The direction the list should be sorted in - oldestfirst, newestfirst, oldestreview or newestreview.
                     */
                    dir?: "newestfirst" | "newestreview" | "oldestfirst" | "oldestreview";
                }

                /**
                 * Get the stats for page triage.
                 */
                interface PageTriageStats extends Params {
                    action: "pagetriagestats";
                    /**
                     * Whether to include predicted class stub
                     */
                    show_predicted_class_stub?: boolean;
                    /**
                     * Whether to include predicted class start
                     */
                    show_predicted_class_start?: boolean;
                    /**
                     * Whether to include predicted class C
                     */
                    show_predicted_class_c?: boolean;
                    /**
                     * Whether to include predicted class B
                     */
                    show_predicted_class_b?: boolean;
                    /**
                     * Whether to include predicted class good
                     */
                    show_predicted_class_good?: boolean;
                    /**
                     * Whether to included predicted class featured
                     */
                    show_predicted_class_featured?: boolean;
                    /**
                     * Whether to include potential issues of vandalism
                     */
                    show_predicted_issues_vandalism?: boolean;
                    /**
                     * Whether to include potential issues of spam
                     */
                    show_predicted_issues_spam?: boolean;
                    /**
                     * Whether to include potential issues of attack
                     */
                    show_predicted_issues_attack?: boolean;
                    /**
                     * Whether to include no potential issues
                     */
                    show_predicted_issues_none?: boolean;
                    /**
                     * Whether to include potential issues of copyvio
                     */
                    show_predicted_issues_copyvio?: boolean;
                    /**
                     * Whether to include only pages created by bots.
                     */
                    showbots?: boolean;
                    /**
                     * Whether to show only edits by users with the autopatrol user right.
                     */
                    showautopatrolled?: boolean;
                    /**
                     * Whether to include redirects.
                     */
                    showredirs?: boolean;
                    /**
                     * Whether to include normal pages that are not redirects nor nominated for deletion.
                     */
                    showothers?: boolean;
                    /**
                     * Whether to include reviewed.
                     */
                    showreviewed?: boolean;
                    /**
                     * Whether to include unreviewed.
                     */
                    showunreviewed?: boolean;
                    /**
                     * Whether to include "proposed for deletion".
                     */
                    showdeleted?: boolean;
                    /**
                     * What namespace to pull stats from.
                     */
                    namespace?: number;
                    /**
                     * Which Articles-for-Creation state to get stats for.
                     */
                    afc_state?: number;
                    /**
                     * Whether to include only pages with no category.
                     */
                    no_category?: boolean;
                    /**
                     * Whether to include only pages with no references.
                     */
                    unreferenced?: boolean;
                    /**
                     * Whether to include only pages with no inbound links.
                     */
                    no_inbound_links?: boolean;
                    /**
                     * Whether to include only pages that were previously deleted.
                     */
                    recreated?: boolean;
                    /**
                     * Whether to include only pages created by non-autoconfirmed users.
                     */
                    non_autoconfirmed_users?: boolean;
                    /**
                     * Whether to include only pages created by newly autoconfirmed users.
                     */
                    learners?: boolean;
                    /**
                     * Whether to include only pages created by blocked users.
                     */
                    blocked_users?: boolean;
                    /**
                     * Include only pages created by username.
                     */
                    username?: string;
                    /**
                     * Include only pages with this keyword in the snippet.
                     */
                    keyword?: string;
                    /**
                     * Include only pages created on this date and after.
                     */
                    date_range_from?: string;
                    /**
                     * Include only pages created on this date and before.
                     */
                    date_range_to?: string;
                }

                /**
                 * Tag a revision as a likely copyright violation.
                 *
                 * The revision is shown on Special:NewPagesFeed. Requires the pagetriage-copyvio right.
                 */
                interface PageTriageTagCopyvio extends Params {
                    action: "pagetriagetagcopyvio";
                    /**
                     * Revision ID to tag as a likely copyright violation
                     */
                    revid: number;
                    /**
                     * Remove the copyright violation tag
                     */
                    untag?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Add tags to an article.
                 */
                interface PageTriageTagging extends Params {
                    action: "pagetriagetagging";
                    /**
                     * The article for which to be tagged.
                     */
                    pageid: number;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The wikitext containing the tag added to the article.
                     */
                    wikitext: string;
                    /**
                     * Whether or not the tagging is for a deletion nomination.
                     */
                    deletion?: boolean;
                    /**
                     * Personal note to page creators from reviewers.
                     */
                    note?: string;
                    /**
                     * Pipe-separated list of tags.
                     */
                    taglist: string | string[];
                }

                /**
                 * Obtain information about API modules.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Parameter_information
                 */
                interface ParamInfo extends Params {
                    action: "paraminfo";
                    /**
                     * List of module names (values of the `action` and `format` parameters, or `main`). Can specify submodules with a `+`, or all submodules with `+*`, or all submodules recursively with `+**`.
                     */
                    modules?: string | string[];
                    /**
                     * Format of help strings.
                     *
                     * Defaults to `none`.
                     */
                    helpformat?: "html" | "none" | "raw" | "wikitext";
                    /**
                     * List of query module names (value of `prop`, `meta` or `list` parameter). Use `modules=query+foo` instead of `querymodules=foo`.
                     *
                     * @deprecated
                     */
                    querymodules?: string | string[];
                    /**
                     * Get information about the main (top-level) module as well. Use `modules=main` instead.
                     *
                     * @deprecated
                     */
                    mainmodule?: string;
                    /**
                     * Get information about the pageset module (providing titles= and friends) as well.
                     *
                     * @deprecated
                     */
                    pagesetmodule?: string;
                    /**
                     * List of format module names (value of `format` parameter). Use `modules` instead.
                     *
                     * @deprecated
                     */
                    formatmodules?: OneOrMore<
                        "json" | "jsonfm" | "none" | "php" | "phpfm" | "rawfm" | "xml" | "xmlfm"
                    >;
                }

                /**
                 * Parses content and returns parser output.
                 *
                 * See the various prop-modules of {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query `action=query`} to get information from the current version of a page.
                 *
                 * There are several ways to specify the text to parse:
                 *
                 * - Specify a page or revision, using `page`, `pageid`, or `oldid`.
                 * - Specify content explicitly, using `text`, `title`, `revid`, and `contentmodel`.
                 * - Specify only a summary to parse. `prop` should be given an empty value.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Parsing_wikitext
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Parsing_wikitext#parse
                 */
                interface Parse extends Params {
                    action: "parse";
                    /**
                     * Title of page the text belongs to. If omitted, `contentmodel` must be specified, and {@link https://www.mediawiki.org/wiki/API API} will be used as the title.
                     */
                    title?: string;
                    /**
                     * Text to parse. Use `title` or `contentmodel` to control the content model.
                     */
                    text?: string;
                    /**
                     * Revision ID, for `{{REVISIONID}}` and similar variables.
                     */
                    revid?: number;
                    /**
                     * Summary to parse.
                     */
                    summary?: string;
                    /**
                     * Parse the content of this page. Cannot be used together with `text` and `title`.
                     */
                    page?: string;
                    /**
                     * Parse the content of this page. Overrides `page`.
                     */
                    pageid?: number;
                    /**
                     * If `page` or `pageid` is set to a redirect, resolve it.
                     */
                    redirects?: boolean;
                    /**
                     * Parse the content of this revision. Overrides `page` and `pageid`.
                     */
                    oldid?: number;
                    /**
                     * Which pieces of information to get:
                     *
                     * - **text**: Gives the parsed text of the wikitext.
                     * - **langlinks**: Gives the language links in the parsed wikitext.
                     * - **categories**: Gives the categories in the parsed wikitext.
                     * - **categorieshtml**: Gives the HTML version of the categories.
                     * - **links**: Gives the internal links in the parsed wikitext.
                     * - **templates**: Gives the templates in the parsed wikitext.
                     * - **images**: Gives the images in the parsed wikitext.
                     * - **externallinks**: Gives the external links in the parsed wikitext.
                     * - **sections**: Gives the sections in the parsed wikitext.
                     * - **revid**: Adds the revision ID of the parsed page.
                     * - **displaytitle**: Adds the title of the parsed wikitext.
                     * - **subtitle**: Adds the page subtitle for the parsed page.
                     * - **headhtml**: Gives parsed doctype, opening `<html>`, `<head>` element and opening `<body>` of the page.
                     * - **modules**: Gives the ResourceLoader modules used on the page. To load, use `mw.loader.using()`. Either `jsconfigvars` or `encodedjsconfigvars` must be requested jointly with `modules`.
                     * - **jsconfigvars**: Gives the JavaScript configuration variables specific to the page. To apply, use `mw.config.set()`.
                     * - **encodedjsconfigvars**: Gives the JavaScript configuration variables specific to the page as a JSON string.
                     * - **indicators**: Gives the HTML of page status indicators used on the page.
                     * - **iwlinks**: Gives interwiki links in the parsed wikitext.
                     * - **wikitext**: Gives the original wikitext that was parsed.
                     * - **properties**: Gives various properties defined in the parsed wikitext.
                     * - **limitreportdata**: Gives the limit report in a structured way. Gives no data, when `disablelimitreport` is set.
                     * - **limitreporthtml**: Gives the HTML version of the limit report. Gives no data, when `disablelimitreport` is set.
                     * - **parsetree**: The XML parse tree of revision content (requires content model `wikitext`)
                     * - **parsewarnings**: Gives the warnings that occurred while parsing content (as wikitext).
                     * - **parsewarningshtml**: Gives the warnings that occurred while parsing content (as HTML).
                     * - **headitems**: Deprecated. Gives items to put in the `<head>` of the page.
                     *
                     * Defaults to `text`, `langlinks`, `categories`, `links`, `templates`, `images`, `externallinks`, `sections`, `revid`, `displaytitle`, `iwlinks`, `properties`, and `parsewarnings`.
                     */
                    prop?: OneOrMore<
                        | "categories"
                        | "categorieshtml"
                        | "displaytitle"
                        | "encodedjsconfigvars"
                        | "externallinks"
                        | "headhtml"
                        | "headitems"
                        | "images"
                        | "indicators"
                        | "iwlinks"
                        | "jsconfigvars"
                        | "langlinks"
                        | "limitreportdata"
                        | "limitreporthtml"
                        | "links"
                        | "modules"
                        | "parsetree"
                        | "parsewarnings"
                        | "parsewarningshtml"
                        | "properties"
                        | "revid"
                        | "sections"
                        | "subtitle"
                        | "templates"
                        | "text"
                        | "wikitext"
                    >;
                    /**
                     * CSS class to use to wrap the parser output.
                     *
                     * Defaults to `mw-parser-output`.
                     */
                    wrapoutputclass?: string;
                    /**
                     * Use the ArticleParserOptions hook to ensure the options used match those used for article page views
                     */
                    usearticle?: boolean;
                    /**
                     * Generate HTML conforming to the {@link https://www.mediawiki.org/wiki/Specs/HTML MediaWiki DOM spec} using {@link https://www.mediawiki.org/wiki/Parsoid Parsoid}.
                     */
                    parsoid?: boolean;
                    /**
                     * Do a pre-save transform on the input before parsing it. Only valid when used with text.
                     */
                    pst?: boolean;
                    /**
                     * Do a pre-save transform (PST) on the input, but don't parse it. Returns the same wikitext, after a PST has been applied. Only valid when used with `text`.
                     */
                    onlypst?: boolean;
                    /**
                     * Includes language links supplied by extensions (for use with `prop=langlinks`).
                     *
                     * @deprecated
                     */
                    effectivelanglinks?: boolean;
                    /**
                     * Only parse the content of the section with this identifier.
                     *
                     * When `new`, parse `text` and `sectiontitle` as if adding a new section to the page.
                     *
                     * `new` is allowed only when specifying `text`.
                     */
                    section?: string;
                    /**
                     * New section title when `section` is `new`.
                     *
                     * Unlike page editing, this does not fall back to `summary` when omitted or empty.
                     */
                    sectiontitle?: string;
                    /**
                     * Use `disablelimitreport` instead.
                     *
                     * @deprecated
                     */
                    disablepp?: boolean;
                    /**
                     * Omit the limit report ("NewPP limit report") from the parser output.
                     */
                    disablelimitreport?: boolean;
                    /**
                     * Omit edit section links from the parser output.
                     */
                    disableeditsection?: boolean;
                    /**
                     * Do not deduplicate inline stylesheets in the parser output.
                     */
                    disablestylededuplication?: boolean;
                    /**
                     * Whether to include internal merge strategy information in jsconfigvars.
                     */
                    showstrategykeys?: boolean;
                    /**
                     * Generate XML parse tree (requires content model `wikitext`; replaced by `prop=parsetree`).
                     *
                     * @deprecated
                     */
                    generatexml?: boolean;
                    /**
                     * Parse in preview mode.
                     */
                    preview?: boolean;
                    /**
                     * Parse in section preview mode (enables preview mode too).
                     */
                    sectionpreview?: boolean;
                    /**
                     * Omit table of contents in output.
                     */
                    disabletoc?: boolean;
                    /**
                     * Apply the selected skin to the parser output. May affect the following properties: `text`, `langlinks`, `headitems`, `modules`, `jsconfigvars`, `indicators`.
                     */
                    useskin?: string;
                    /**
                     * Content serialization format used for the input text. Only valid when used with text.
                     */
                    contentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Content model of the input text. If omitted, title must be specified, and default will be the model of the specified title. Only valid when used with text.
                     */
                    contentmodel?: string;
                    /**
                     * Return parse output in a format suitable for mobile devices.
                     */
                    mobileformat?: boolean;
                    /**
                     * Template sandbox prefix, as with {@link https://www.mediawiki.org/wiki/Special:TemplateSandbox Special:TemplateSandbox}.
                     */
                    templatesandboxprefix?: string | string[];
                    /**
                     * Parse the page using `templatesandboxtext` in place of the contents of the page named here.
                     */
                    templatesandboxtitle?: string;
                    /**
                     * Parse the page using this page content in place of the page named by `templatesandboxtitle`.
                     */
                    templatesandboxtext?: string;
                    /**
                     * Content model of `templatesandboxtext`.
                     */
                    templatesandboxcontentmodel?: string;
                    /**
                     * Content format of `templatesandboxtext`.
                     */
                    templatesandboxcontentformat?:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                }

                /**
                 * Parse a page with two different parser configurations.
                 *
                 * @private
                 */
                interface ParserMigration extends Params {
                    action: "parser-migration";
                    /**
                     * The title of the page to load and parse.
                     */
                    title: string;
                    /**
                     * The parser configuration to use. May be "old", "new" or "old|new".
                     *
                     * - **old**: Parses the page using the "old" configuration; MediaWiki's legacy parser
                     * - **new**: Parses the page using the "new" configuration; Parsoid
                     *
                     * Defaults to `old` and `new`.
                     */
                    config?: OneOrMore<"new" | "old">;
                    /**
                     * Redirects are followed by default. Use "no" to not follow redirects.
                     */
                    redirect?: string;
                }

                /**
                 * Patrol a page or revision.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Patrol
                 */
                interface Patrol extends Params {
                    action: "patrol";
                    /**
                     * Recentchanges ID to patrol.
                     */
                    rcid?: number;
                    /**
                     * Revision ID to patrol.
                     */
                    revid?: number;
                    /**
                     * Change tags to apply to the entry in the patrol log.
                     */
                    tags?: string | string[];
                    /**
                     * A "patrol" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Change the protection level of a page.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protect
                 */
                interface Protect extends Params {
                    action: "protect";
                    /**
                     * Title of the page to (un)protect. Cannot be used together with pageid.
                     */
                    title?: string;
                    /**
                     * ID of the page to (un)protect. Cannot be used together with title.
                     */
                    pageid?: number;
                    /**
                     * List of protection levels, formatted `action=level` (e.g. `edit=sysop`). A level of `all` means everyone is allowed to take the action, i.e. no restriction.
                     *
                     * **Note:** Any actions not listed will have restrictions removed.
                     */
                    protections: string | string[];
                    /**
                     * Expiry timestamps. If only one timestamp is set, it'll be used for all protections. Use `infinite`, `indefinite`, `infinity`, or `never`, for a never-expiring protection.
                     *
                     * Defaults to `infinite`.
                     */
                    expiry?: string | string[];
                    /**
                     * Reason for (un)protecting.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Change tags to apply to the entry in the protection log.
                     */
                    tags?: string | string[];
                    /**
                     * Enable cascading protection (i.e. protect transcluded templates and images used in this page). Ignored if none of the given protection levels support cascading.
                     */
                    cascade?: boolean;
                    /**
                     * If set, add the page being (un)protected to the current user's watchlist.
                     *
                     * @deprecated
                     */
                    watch?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Purge the cache for the given titles.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Purge
                 */
                interface Purge extends Params {
                    action: "purge";
                    /**
                     * Update the links tables and do other secondary data updates.
                     */
                    forcelinkupdate?: boolean;
                    /**
                     * Same as `forcelinkupdate`, and update the links tables for any page that uses this page as a template.
                     */
                    forcerecursivelinkupdate?: boolean;
                    /**
                     * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                     */
                    continue?: string;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on. Note that almost all query modules will convert revision IDs to the corresponding page ID and work on the latest revision instead. Only `prop=revisions` uses exact revisions for its response.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `titles`, `pageids`, and `revids`, and in pages returned by `generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, ku, mni, sh, shi, sr, tg, tly, uz, wuu, zgh and zh.
                     */
                    converttitles?: boolean;
                }

                /**
                 * Fetch data from and about MediaWiki.
                 *
                 * All data modifications will first have to use query to acquire a token to prevent abuse from malicious sites.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Query
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Meta
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Properties
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Lists
                 */
                interface Query extends Params {
                    action: "query";
                    /**
                     * Which properties to get for the queried pages.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategoryinfo categoryinfo}**: Returns information about the given categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcirrusbuilddoc cirrusbuilddoc}**: Dump of a CirrusSearch article document from the database servers
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcirruscompsuggestbuilddoc cirruscompsuggestbuilddoc}**: Dump of the document used by the completion suggester
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcirrusdoc cirrusdoc}**: Dump of a CirrusSearch article document from the search servers
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcontributors contributors}**: Get the list of logged-in contributors and the count of logged-out contributors to a page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bextlinks extlinks}**: Returns all external URLs (not interwikis) from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bextracts extracts}**: Returns plain-text or limited HTML extracts of the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalusage globalusage}**: Returns global image usage for a certain image.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageinfo imageinfo}**: Returns file information and upload history.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Binfo info}**: Get basic page information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwlinks iwlinks}**: Returns all interwiki links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blanglinks langlinks}**: Returns all interlanguage links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmmcontent mmcontent}**: Get the description and targets of a spamlist
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageimages pageimages}**: Returns information about images on the page, such as thumbnail and presence of photos.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageprops pageprops}**: Get various page properties defined in the page content.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageterms pageterms}**: Get the Wikidata terms (typically labels, descriptions and aliases) associated with a page via a sitelink.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageviews pageviews}**: Shows per-page pageview data (the number of daily pageviews for each of the last `pvipdays` days).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bstashimageinfo stashimageinfo}**: Returns file information for stashed files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscodestatus transcodestatus}**: Get transcode status for a given file page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bvideoinfo videoinfo}**: Extends imageinfo to include video source (derivatives) information
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwbentityusage wbentityusage}**: Returns all entity IDs used in the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bflowinfo flowinfo}**: Deprecated. Get basic Structured Discussions information about a page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdescription description}**: Internal. Get a short description a.k.a. subtitle explaining what the target page is about.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmapdata mapdata}**: Internal. Request all Kartographer map data for the given pages
                     */
                    prop?: string | string[];
                    /**
                     * Which lists to get.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Babusefilters abusefilters}**: Show details of the abuse filters.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Babuselog abuselog}**: Show events that were caught by one of the abuse filters.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballusers allusers}**: Enumerate all registered users.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbetafeatures betafeatures}**: List all BetaFeatures
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bblocks blocks}**: List all blocked users and IP addresses.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcentralnoticeactivecampaigns centralnoticeactivecampaigns}**: Get a list of currently active campaigns with start and end dates and associated banners.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcentralnoticelogs centralnoticelogs}**: Get a log of campaign configuration changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcheckuser checkuser}**: Check which IP addresses are used by a given username or which usernames are used by a given IP address.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcheckuserlog checkuserlog}**: Get entries from the CheckUser log.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bextdistrepos extdistrepos}**: Returns the list of repositories supported by ExtensionDistributor
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfilearchive filearchive}**: Enumerate all deleted files sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bgadgetcategories gadgetcategories}**: Returns a list of gadget categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bgadgets gadgets}**: Returns a list of gadgets used on this wiki.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalallusers globalallusers}**: Enumerate all global users.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalblocks globalblocks}**: List all globally blocked IP addresses.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalgroups globalgroups}**: Enumerate all global groups.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinterrors linterrors}**: Get a list of lint errors
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blogevents logevents}**: Get events from logs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmystashedfiles mystashedfiles}**: Get a list of files in the current user's upload stash.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames pagepropnames}**: List all page property names in use on the wiki.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btags tags}**: List change tags.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bthreads threads}**: Show details of LiquidThreads threads.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Busercontribs usercontribs}**: Get all edits by a user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Busers users}**: Get information about a list of users.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwikisets wikisets}**: Enumerate all wiki sets.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevs deletedrevs}**: Deprecated. List deleted revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bextdistbranches extdistbranches}**: Internal. Returns the list of branches for a repository supported by ExtensionDistributor
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroupsubscription messagegroupsubscription}**: Internal. List message groups the current user is subscribed to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    list?: string | string[];
                    /**
                     * Which metadata to get.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballmessages allmessages}**: Return messages from this site.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo authmanagerinfo}**: Retrieve information about the current authentication status.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbabel babel}**: Get information about what languages the user knows
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfeatureusage featureusage}**: Get a summary of logged API feature usages for a user agent.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfilerepoinfo filerepoinfo}**: Return meta information about image repositories configured on the wiki.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalpreferences globalpreferences}**: Retrieve global preferences for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobalrenamestatus globalrenamestatus}**: Show information about global renames that are in progress.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bglobaluserinfo globaluserinfo}**: Show information about a global user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blanguageinfo languageinfo}**: Return information about available languages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blanguagestats languagestats}**: Query language stats.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinterstats linterstats}**: Get number of lint errors in each category
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmanagemessagegroups managemessagegroups}**: Fetch possible renames for a message in a group during imports
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups messagegroups}**: Return information about message groups.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroupstats messagegroupstats}**: Query message group stats.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagetranslations messagetranslations}**: Query all translations for a single message.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bnotifications notifications}**: Get notifications waiting for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo siteinfo}**: Return general information about the site.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteviews siteviews}**: Shows sitewide pageview data (daily pageview totals for each of the last `pvisdays` days).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens tokens}**: Gets tokens for data-modifying actions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bunreadnotificationpages unreadnotificationpages}**: Get pages for which there are unread notifications for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Buserinfo userinfo}**: Get information about the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwikibase wikibase}**: Get information about the Wikibase client and the associated Wikibase repository.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Boath oath}**: Internal. Check to see if two-factor authentication (OATH) is enabled for a user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglists readinglists}**: Internal. List or filter the user's reading lists and show metadata about them.
                     */
                    meta?: string | string[];
                    /**
                     * Include an additional pageids section listing all returned page IDs.
                     */
                    indexpageids?: boolean;
                    /**
                     * Export the current revisions of all given or generated pages.
                     */
                    export?: boolean;
                    /**
                     * Return the export XML without wrapping it in an XML result (same format as {@link https://www.mediawiki.org/wiki/Special:Export Special:Export}). Can only be used with query+export.
                     */
                    exportnowrap?: boolean;
                    /**
                     * Target the given version of the XML dump format when exporting. Can only be used with `query+export`.
                     *
                     * Defaults to `0.11`.
                     */
                    exportschema?: "0.10" | "0.11";
                    /**
                     * Whether to get the full URL if the title is an interwiki link.
                     */
                    iwurl?: boolean;
                    /**
                     * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                     */
                    continue?: string;
                    /**
                     * Return raw `query-continue` data for continuation.
                     */
                    rawcontinue?: boolean;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on. Note that almost all query modules will convert revision IDs to the corresponding page ID and work on the latest revision instead. Only `prop=revisions` uses exact revisions for its response.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `query+titles`, `query+pageids`, and `query+revids`, and in pages returned by `query+generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, ku, mni, sh, shi, sr, tg, tly, uz, wuu, zgh and zh.
                     */
                    converttitles?: boolean;
                }

                /**
                 * Reading list write operations.
                 *
                 * Create/update/delete/sort reading lists and entries. See the documentation of the various commands for details.
                 *
                 * @private
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                 */
                interface ReadingLists extends Params {
                    action: "readinglists";
                    /**
                     * Command (API submodule) for reading list write operations.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bcreate create}**: Internal. Create a new list for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bcreateentry createentry}**: Internal. Add a new page to a list belonging to the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bdelete delete}**: Internal. Delete a list belonging to the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bdeleteentry deleteentry}**: Internal. Delete a page from a list belonging to the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bsetup setup}**: Internal. Enable lists for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bteardown teardown}**: Internal. Disable lists for the current user.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bupdate update}**: Internal. Update a list belonging to the current user.
                     */
                    command: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Remove authentication data for the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Manage_authentication_data
                 */
                interface RemoveAuthenticationData extends Params {
                    action: "removeauthenticationdata";
                    /**
                     * Use this authentication request, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=remove`.
                     */
                    request: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Send a password reset email to a user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Manage_authentication_data
                 */
                interface ResetPassword extends Params {
                    action: "resetpassword";
                    /**
                     * User being reset.
                     */
                    user?: string;
                    /**
                     * Email address of the user being reset.
                     */
                    email?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Review a revision by approving or de-approving it.
                 */
                interface Review extends Params {
                    action: "review";
                    /**
                     * The revision ID for which to set the flags.
                     */
                    revid?: string;
                    /**
                     * Comment for the review.
                     */
                    comment?: string;
                    /**
                     * If set, revision will be unapproved rather than approved.
                     */
                    unapprove?: boolean;
                    /**
                     * Set the flag _value_ to the specified value.
                     *
                     * Defaults to `1`.
                     */
                    flag_value?: "0" | "1" | "2" | "3";
                    /**
                     * Set the flag _accuracy_ to the specified value.
                     *
                     * Defaults to `1`.
                     */
                    flag_accuracy?: "0" | "1" | "2";
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Delete and undelete revisions.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisiondelete
                 */
                interface RevisionDelete extends Params {
                    action: "revisiondelete";
                    /**
                     * Type of revision deletion being performed.
                     */
                    type: "archive" | "filearchive" | "logging" | "oldimage" | "revision";
                    /**
                     * Page title for the revision deletion, if required for the type.
                     */
                    target?: string;
                    /**
                     * Identifiers for the revisions to be deleted.
                     */
                    ids: string | string[];
                    /**
                     * What to hide for each revision.
                     */
                    hide?: OneOrMore<"comment" | "content" | "user">;
                    /**
                     * What to unhide for each revision.
                     */
                    show?: OneOrMore<"comment" | "content" | "user">;
                    /**
                     * Whether to suppress data from administrators as well as others.
                     *
                     * Defaults to `nochange`.
                     */
                    suppress?: "no" | "nochange" | "yes";
                    /**
                     * Reason for the deletion or undeletion.
                     */
                    reason?: string;
                    /**
                     * Tags to apply to the entry in the deletion log.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Undo the last edit to the page.
                 *
                 * If the last user who edited the page made multiple edits in a row, they will all be rolled back.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Rollback
                 */
                interface Rollback extends Params {
                    action: "rollback";
                    /**
                     * Title of the page to roll back. Cannot be used together with `pageid`.
                     */
                    title?: string;
                    /**
                     * Page ID of the page to roll back. Cannot be used together with `title`.
                     */
                    pageid?: number;
                    /**
                     * Tags to apply to the rollback.
                     */
                    tags?: string | string[];
                    /**
                     * Name of the user whose edits are to be rolled back.
                     */
                    user: string;
                    /**
                     * Custom edit summary. If empty, default summary will be used.
                     *
                     * Defaults to an empty string.
                     */
                    summary?: string;
                    /**
                     * Mark the reverted edits and the revert as bot edits.
                     */
                    markbot?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * A "rollback" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * For compatibility, the token used in the web UI is also accepted.
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Export an RSD (Really Simple Discovery) schema.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Rsd
                 */
                interface Rsd extends Params {
                    action: "rsd";
                }

                /**
                 * Performs data validation for Kartographer extension
                 *
                 * @private
                 */
                interface SanitizeMapData extends Params {
                    action: "sanitize-mapdata";
                    /**
                     * Title of page on which this GeoJSON is supposed to be located. If no title is provided, a dummy one will be used.
                     *
                     * Defaults to `Dummy title (called from Kartographer\Api\ApiSanitizeMapData)`.
                     */
                    title?: string;
                    /**
                     * GeoJSON to sanitize
                     */
                    text: string;
                }

                /**
                 * Internal module for servicing XHR requests from the Scribunto console.
                 *
                 * @private
                 */
                interface ScribuntoConsole extends Params {
                    action: "scribunto-console";
                    /**
                     * The title of the module to test.
                     */
                    title?: string;
                    /**
                     * The new content of the module.
                     */
                    content?: string;
                    /**
                     * Session token.
                     */
                    session?: number;
                    /**
                     * The next line to evaluate as a script.
                     */
                    question: string;
                    /**
                     * Set to clear the current session state.
                     */
                    clear?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Search translations.
                 */
                interface SearchTranslations extends Params {
                    action: "searchtranslations";
                    /**
                     * Which of the available translation services to use.
                     *
                     * Defaults to `default`.
                     */
                    service?: "codfw" | "default" | "eqiad";
                    /**
                     * The string to search for.
                     */
                    query: string;
                    /**
                     * The language code of the source text.
                     *
                     * Defaults to `en`.
                     */
                    sourcelanguage?: string;
                    /**
                     * The language code to search string for.
                     *
                     * Defaults to an empty string.
                     */
                    language?: string;
                    /**
                     * The group ID to search string in. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     *
                     * Defaults to an empty string.
                     */
                    group?: string;
                    /**
                     * Message translation status filter.
                     *
                     * Defaults to an empty string.
                     */
                    filter?: "" | "fuzzy" | "translated" | "untranslated";
                    /**
                     * Match any/all search words.
                     *
                     * Defaults to an empty string.
                     */
                    match?: string;
                    /**
                     * Case (in)sensitive search.
                     *
                     * Defaults to `0`.
                     */
                    case?: string;
                    /**
                     * Offset for the translations.
                     *
                     * Defaults to 0.
                     */
                    offset?: number;
                    /**
                     * Size of the result.
                     *
                     * Defaults to 25.
                     */
                    limit?: Limit;
                }

                /**
                 * Allows a remote wiki to authenticate users before granting access to vote in the election.
                 *
                 * @private
                 */
                interface SecurePollAuth extends Params {
                    action: "securepollauth";
                    /**
                     * A token based on the user's login token.
                     */
                    token: string;
                    /**
                     * The ID of the user who intends to vote.
                     */
                    id: number;
                }

                /**
                 * Hide or lock (or unhide or unlock) a global user account.
                 */
                interface SetGlobalAccountStatus extends Params {
                    action: "setglobalaccountstatus";
                    /**
                     * User to change the status of.
                     */
                    user: string;
                    /**
                     * Change whether this user is locked or not.
                     */
                    locked?: "" | "lock" | "unlock";
                    /**
                     * Change whether this user is not hidden, hidden from the global users list, or suppressed.
                     */
                    hidden?: "" | "lists" | "suppressed";
                    /**
                     * Reason for changing the user's status.
                     */
                    reason?: string;
                    /**
                     * Optional MD5 of the expected current `userid:username:hidden:locked`. This is used to detect edit conflicts. The value of `hidden` must be an empty string if not hidden or the strings `lists` or `suppressed`. The value of `locked` must be 1 for locked, 0 for unlocked. Examples: `2128506:LeeSmith::0`; `3839611:VandalGoblin:suppressed:1`.
                     */
                    statecheck?: string;
                    /**
                     * A "setglobalaccountstatus" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Update the notification timestamp for watched pages.
                 *
                 * This affects the highlighting of changed pages in the watchlist and history, and the sending of email when the "Email me when a page or a file on my watchlist is changed" preference is enabled.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:SetNotificationTimestamp
                 */
                interface SetNotificationTimestamp extends Params {
                    action: "setnotificationtimestamp";
                    /**
                     * Work on all watched pages.
                     */
                    entirewatchlist?: boolean;
                    /**
                     * Timestamp to which to set the notification timestamp.
                     */
                    timestamp?: string;
                    /**
                     * Revision to set the notification timestamp to (one page only).
                     */
                    torevid?: number;
                    /**
                     * Revision to set the notification timestamp newer than (one page only).
                     */
                    newerthanrevid?: number;
                    /**
                     * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                     */
                    continue?: string;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on. Note that almost all query modules will convert revision IDs to the corresponding page ID and work on the latest revision instead. Only `prop=revisions` uses exact revisions for its response.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `titles`, `pageids`, and `revids`, and in pages returned by `generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, ku, mni, sh, shi, sr, tg, tly, uz, wuu, zgh and zh.
                     */
                    converttitles?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Change the language of a page.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:SetPageLanguage
                 */
                interface SetPageLanguage extends Params {
                    action: "setpagelanguage";
                    /**
                     * Title of the page whose language you wish to change. Cannot be used together with `pageid`.
                     */
                    title?: string;
                    /**
                     * Page ID of the page whose language you wish to change. Cannot be used together with `title`.
                     */
                    pageid?: number;
                    /**
                     * Language code of the language to change the page to. Use `default` to reset the page to the wiki's default content language.
                     */
                    lang: string;
                    /**
                     * Reason for the change.
                     */
                    reason?: string;
                    /**
                     * Change tags to apply to the log entry resulting from this action.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Shorten a long URL into a shorter one.
                 */
                interface ShortenUrl extends Params {
                    action: "shortenurl";
                    /**
                     * URL to be shortened.
                     */
                    url: string;
                    /**
                     * Get a QR code. The linked URL will only be shortened if it is very long.
                     */
                    qrcode?: boolean;
                }

                /**
                 * Get Wikimedia sites list.
                 *
                 * The code (technically dbname/wikiid) is either the language code + project code for content projects or the subdomain + main domain for all the others.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Sitematrix
                 */
                interface SiteMatrix extends Params {
                    action: "sitematrix";
                    /**
                     * Filter the Site Matrix by type:
                     *
                     * - **special**: One off and multilingual Wikimedia projects.
                     * - **language**: Wikimedia projects under this language code.
                     *
                     * Defaults to `special` and `language`.
                     */
                    smtype?: OneOrMore<"language" | "special">;
                    /**
                     * Filter the Site Matrix by wiki state.
                     *
                     * Defaults to `all`.
                     */
                    smstate?: OneOrMore<"all" | "closed" | "fishbowl" | "nonglobal" | "private">;
                    /**
                     * Which information about a language to return.
                     *
                     * Defaults to `code`, `name`, `site`, `dir`, and `localname`.
                     */
                    smlangprop?: OneOrMore<"code" | "dir" | "localname" | "name" | "site">;
                    /**
                     * Which information about a site to return.
                     *
                     * Defaults to `url`, `dbname`, `code`, and `sitename`.
                     */
                    smsiteprop?: OneOrMore<"code" | "dbname" | "lang" | "sitename" | "url">;
                    /**
                     * Maximum number of results.
                     *
                     * Defaults to 5000.
                     */
                    smlimit?: Limit;
                    /**
                     * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                     */
                    smcontinue?: string;
                }

                /**
                 * Validate one or more URLs against the spam block list.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:SpamBlacklist/API
                 */
                interface SpamBlacklist extends Params {
                    action: "spamblacklist";
                    /**
                     * URLs to validate against the block list.
                     */
                    url: string | string[];
                }

                /**
                 * Configure review-protection settings for a page.
                 */
                interface Stabilize extends Params {
                    action: "stabilize";
                    /**
                     * The review-protection level.
                     *
                     * Defaults to `none`.
                     */
                    protectlevel?: "autoconfirmed" | "none";
                    /**
                     * Default revision to show.
                     */
                    default: "latest" | "stable";
                    /**
                     * Auto-review restriction.
                     *
                     * Defaults to `none`.
                     */
                    autoreview?: "none" | "sysop";
                    /**
                     * Review-protection expiry.
                     *
                     * Defaults to `infinite`.
                     */
                    expiry?: string;
                    /**
                     * Reason.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Review this page.
                     */
                    review?: boolean;
                    /**
                     * Title of the page to be review-protected.
                     */
                    title: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Prepare an edit in shared cache.
                 *
                 * This is intended to be used via AJAX from the edit form to improve the performance of the page save.
                 *
                 * @private
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Stashedit
                 */
                interface StashEdit extends Params {
                    action: "stashedit";
                    /**
                     * Title of the page being edited.
                     */
                    title: string;
                    /**
                     * Section identifier. `0` for the top section, `new` for a new section.
                     */
                    section?: string;
                    /**
                     * The title for a new section.
                     */
                    sectiontitle?: string;
                    /**
                     * Page content.
                     */
                    text?: string;
                    /**
                     * Page content hash from a prior stash to use instead.
                     */
                    stashedtexthash?: string;
                    /**
                     * Change summary.
                     *
                     * Defaults to an empty string.
                     */
                    summary?: string;
                    /**
                     * Content model of the new content.
                     */
                    contentmodel: string;
                    /**
                     * Content serialization format used for the input text.
                     */
                    contentformat:
                        | "application/json"
                        | "application/octet-stream"
                        | "application/unknown"
                        | "application/vnd.php.serialized"
                        | "application/x-binary"
                        | "text/css"
                        | "text/javascript"
                        | "text/plain"
                        | "text/unknown"
                        | "text/x-wiki"
                        | "unknown/unknown";
                    /**
                     * Revision ID of the base revision.
                     */
                    baserevid: number;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Exposes event stream config. Returns only format=json with formatversion=2.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:EventStreamConfig
                 */
                interface StreamConfigS extends Params {
                    action: "streamconfigs";
                    /**
                     * List of streams to get config for
                     */
                    streams?: string | string[];
                    /**
                     * Filter results for stream config entries that have these settings
                     */
                    constraints?: string | string[];
                    /**
                     * Include all settings in stream config results. Deprecated since 1.41. All settings are included by default.
                     *
                     * @deprecated
                     */
                    all_settings?: boolean;
                }

                /**
                 * Allows admins to strike or unstrike a vote.
                 */
                interface StrikeVote extends Params {
                    action: "strikevote";
                    /**
                     * Which action to take: strike or unstrike a vote.
                     *
                     * - **strike**: Strike a vote (remove it from the count).
                     * - **unstrike**: Unstrike a vote (restore it to the count).
                     */
                    option: "strike" | "unstrike";
                    /**
                     * The reason for striking or unstriking the vote.
                     */
                    reason: string;
                    /**
                     * The ID of the vote to be struck or unstruck.
                     */
                    voteid: number;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Delete the draft section translation and its parallel corpora from database.
                 */
                interface SXDelete extends Params {
                    action: "sxdelete";
                    /**
                     * The section translation id associated with the draft section translation.
                     */
                    sectiontranslationid: number;
                    /**
                     * The translation id associated with the draft section translation.
                     */
                    translationid: number;
                    /**
                     * The id of the section of the draft section translation.
                     */
                    sectionid: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Save the draft section translation and store the parallel corpora
                 *
                 * @private
                 */
                interface SXSave extends Params {
                    action: "sxsave";
                    /**
                     * The source language code.
                     */
                    sourcelanguage: string;
                    /**
                     * The target language code.
                     */
                    targetlanguage: string;
                    /**
                     * The title of the source page.
                     */
                    sourcetitle: string;
                    /**
                     * The title of the target page.
                     */
                    targettitle: string;
                    /**
                     * JSON-encoded section data. Each section is an object and has the following keys: content, sectionId, origin, validate
                     */
                    content: string;
                    /**
                     * The source page revision id.
                     */
                    sourcerevision: number;
                    /**
                     * The title of the source section.
                     */
                    sourcesectiontitle: string;
                    /**
                     * The title of the target section.
                     */
                    targetsectiontitle: string;
                    /**
                     * The page section id.
                     */
                    sectionid: string;
                    /**
                     * Use a sandbox title for translation.
                     */
                    issandbox?: boolean;
                    /**
                     * The progress of the translation.
                     */
                    progress: string;
                    /**
                     * A "csrf" token retrieved from {@link https://en.wikipedia.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Add or remove change tags from individual revisions or log entries.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Tag
                 */
                interface Tag extends Params {
                    action: "tag";
                    /**
                     * One or more recent changes IDs from which to add or remove the tag.
                     */
                    rcid?: number | number[];
                    /**
                     * One or more revision IDs from which to add or remove the tag.
                     */
                    revid?: number | number[];
                    /**
                     * One or more log entry IDs from which to add or remove the tag.
                     */
                    logid?: number | number[];
                    /**
                     * Tags to add. Only manually defined tags can be added.
                     */
                    add?: string | string[];
                    /**
                     * Tags to remove. Only tags that are either manually defined or completely undefined can be removed.
                     */
                    remove?: string | string[];
                    /**
                     * Reason for the change.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Tags to apply to the log entry that will be created as a result of this action.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Fetch data stored by the TemplateData extension.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:TemplateData
                 */
                interface TemplateData extends Params {
                    action: "templatedata";
                    /**
                     * Return data about titles even if they are missing or lack TemplateData. By default titles are only returned if they exist and have TemplateData.
                     */
                    includeMissingTitles?: boolean;
                    /**
                     * Return data about titles even if they are missing or lack TemplateData. By default (for backwards compatibility) titles are only returned if they exist and have TemplateData.
                     *
                     * @deprecated
                     */
                    doNotIgnoreMissingTitles?: boolean;
                    /**
                     * Return localized values in this language. By default all available translations are returned.
                     */
                    lang?: string;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on. Note that almost all query modules will convert revision IDs to the corresponding page ID and work on the latest revision instead. Only `prop=revisions` uses exact revisions for its response.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `titles`, `pageids`, and `revids`, and in pages returned by `generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, ku, mni, sh, shi, sr, tg, tly, uz, wuu, zgh and zh.
                     */
                    converttitles?: boolean;
                }

                /**
                 * Send a thank-you notification to an editor.
                 *
                 * @see https://www.mediawiki.org/wiki/Extension:Thanks#API_Documentation
                 */
                interface Thank extends Params {
                    action: "thank";
                    /**
                     * Revision ID to thank someone for. This or 'log' must be provided.
                     */
                    rev?: number;
                    /**
                     * Log ID to thank someone for. This or 'rev' must be provided.
                     */
                    log?: number;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * A short string describing the source of the request, for example `diff` or `history`.
                     */
                    source?: string;
                }

                /**
                 * Allows actions to be taken on threads and posts in threaded discussions.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Threadaction
                 */
                interface ThreadAction extends Params {
                    action: "threadaction";
                    /**
                     * Thread IDs or titles to act on.
                     */
                    thread?: string | string[];
                    /**
                     * The talkpage to act on (if applicable).
                     */
                    talkpage?: string;
                    /**
                     * The action to take.
                     */
                    threadaction:
                        | "addreaction"
                        | "deletereaction"
                        | "edit"
                        | "inlineeditform"
                        | "markread"
                        | "markunread"
                        | "merge"
                        | "newthread"
                        | "reply"
                        | "setsortkey"
                        | "setsubject"
                        | "split";
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The subject to set for the new or split thread.
                     */
                    subject?: string;
                    /**
                     * If applicable, the reason/summary for the action.
                     */
                    reason?: string;
                    /**
                     * If merging a thread, the ID or title for its new parent.
                     */
                    newparent?: string;
                    /**
                     * The text of the post to create.
                     */
                    text?: string;
                    /**
                     * On post and reply methods, the top-level thread after the change will be rendered and returned in the result.
                     */
                    render?: string;
                    /**
                     * Overrides default behavior as to whether or not to.
                     */
                    bump?: string;
                    /**
                     * Specifies the timestamp to which to set a thread's sort key. May be "now".
                     */
                    sortkey?: string;
                    /**
                     * Specifies the signature to use for that post, instead of the default.
                     */
                    signature?: string;
                    /**
                     * Specifies the type of reaction to add.
                     */
                    type?: string;
                    /**
                     * Specifies the value associated with the reaction to add.
                     */
                    value?: string;
                    /**
                     * For getting inline edit forms, the method to get a form for.
                     */
                    method?: string;
                    /**
                     * (no description)
                     */
                    operand?: string;
                    /**
                     * Answer to the CAPTCHA
                     */
                    captchaword?: string;
                    /**
                     * CAPTCHA ID from previous request
                     */
                    captchaid?: string;
                }

                /**
                 * Provides timed text content for usage by <track> elements
                 *
                 * @private
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:TimedMediaHandler
                 */
                interface TimedText extends Params {
                    action: "timedtext";
                    /**
                     * The media file title for which to retrieve timed text
                     */
                    title?: string;
                    /**
                     * The pageid of the media file for which to retrieve timed text
                     */
                    pageid?: number;
                    /**
                     * The file format in which to return timed text
                     */
                    trackformat: "srt" | "vtt";
                    /**
                     * The language of the timed text to retrieve
                     */
                    lang?: string;
                }

                /**
                 * Validate a page title, filename, or username against the TitleBlacklist.
                 */
                interface TitleBlacklist extends Params {
                    action: "titleblacklist";
                    /**
                     * The string to validate against the blacklist.
                     */
                    tbtitle: string;
                    /**
                     * The action to be checked.
                     *
                     * Defaults to `edit`.
                     */
                    tbaction?:
                        | "create"
                        | "createpage"
                        | "createtalk"
                        | "edit"
                        | "move"
                        | "new-account"
                        | "upload";
                    /**
                     * Don't try to override the titleblacklist.
                     */
                    tbnooverride?: boolean;
                }

                /**
                 * Get tokens for data-modifying actions.
                 *
                 * This module is deprecated in favor of {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens action=query&meta=tokens}.
                 *
                 * @deprecated
                 */
                interface Tokens extends Params {
                    action: "tokens";
                    /**
                     * Types of token to request.
                     *
                     * Defaults to `edit`.
                     */
                    type?: string;
                }

                /**
                 * Check if an IP address is blocked as a Tor exit node.
                 */
                interface TorBlock extends Params {
                    action: "torblock";
                    /**
                     * The IP address to check.
                     */
                    ip: string;
                }

                /**
                 * Users with the 'transcode-reset' right can reset and re-run a transcode job.
                 */
                interface TranscodeReset extends Params {
                    action: "transcodereset";
                    /**
                     * The media file title.
                     */
                    title: string;
                    /**
                     * The transcode key you wish to reset. Fetch from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscodestatus action=query&prop=transcodestatus}.
                     */
                    transcodekey?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Query all translations aids.
                 */
                interface TranslationAids extends Params {
                    action: "translationaids";
                    /**
                     * Page title of a known message, with namespace and language code.
                     */
                    title: string;
                    /**
                     * Message group the message belongs to. If empty then primary group is used.
                     */
                    group?: string;
                    /**
                     * Which translation helpers to include.
                     *
                     * Defaults to `groups`, `definition`, `translation`, `inotherlanguages`, `documentation`, `mt`, `definitiondiff`, `ttmserver`, `support`, `gettext`, `insertables`, and `editsummaries`.
                     */
                    prop?: OneOrMore<
                        | "definition"
                        | "definitiondiff"
                        | "documentation"
                        | "editsummaries"
                        | "gettext"
                        | "groups"
                        | "inotherlanguages"
                        | "insertables"
                        | "mt"
                        | "support"
                        | "translation"
                        | "ttmserver"
                    >;
                }

                /**
                 * Validate translations.
                 *
                 * Statistics includes translation edits, active translators, new users, translation reviews and reviewers.
                 *
                 * @private
                 */
                interface TranslationCheck extends Params {
                    action: "translationcheck";
                    /**
                     * Page title with namespace and language code.
                     */
                    title: string;
                    /**
                     * The translation to validate.
                     */
                    translation: string;
                }

                /**
                 * Search for message groups and messages
                 *
                 * @private
                 */
                interface TranslationEntitySearch extends Params {
                    action: "translationentitysearch";
                    /**
                     * Entity type being queried
                     *
                     * Defaults to `groups` and `messages`.
                     */
                    entitytype?: OneOrMore<"groups" | "messages">;
                    /**
                     * Search query
                     *
                     * Defaults to an empty string.
                     */
                    query?: string;
                    /**
                     * Maximum number of search results
                     *
                     * Defaults to 10.
                     */
                    limit?: Limit;
                    /**
                     * Group type(s) to filter by
                     */
                    grouptypes?: OneOrMore<
                        "aggregate-groups" | "message-bundles" | "translatable-pages"
                    >;
                }

                /**
                 * Mark translations reviewed.
                 */
                interface TranslationReview extends Params {
                    action: "translationreview";
                    /**
                     * The revision number to review.
                     */
                    revision: number;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Fetch translation statistics
                 */
                interface TranslationStats extends Params {
                    action: "translationstats";
                    /**
                     * Type of statistics being requested
                     */
                    count: "edits" | "reviewers" | "reviews" | "users";
                    /**
                     * Number of days to fetch statistics for
                     *
                     * Defaults to 30.
                     */
                    days: number;
                    /**
                     * List of groups to fetch statistics for. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                     */
                    group?: string | string[];
                    /**
                     * List of languages to fetch statistics for.
                     */
                    language?: string | string[];
                    /**
                     * Scale of the translation statistics
                     *
                     * Defaults to `days`.
                     */
                    scale?: "days" | "hours" | "months" | "weeks" | "years";
                    /**
                     * Starting date from which to fetch translation statistics. Defaults to current date minus the number of `days`.
                     */
                    start?: string;
                }

                /**
                 * Query suggestions from translation memories.
                 */
                interface TtmServer extends Params {
                    action: "ttmserver";
                    /**
                     * Which of the available translation services to use.
                     */
                    service?: string;
                    /**
                     * The language code of the source text.
                     */
                    sourcelanguage: string;
                    /**
                     * The language code of the suggestion.
                     */
                    targetlanguage: string;
                    /**
                     * The text to find suggestions for.
                     */
                    text: string;
                }

                /**
                 * Get the localization of ULS in the given language.
                 *
                 * @private
                 */
                interface ULSLocalization extends Params {
                    action: "ulslocalization";
                    /**
                     * Language code.
                     */
                    language: string;
                }

                /**
                 * Update user's preferred interface language.
                 *
                 * @private
                 */
                interface ULSSetLang extends Params {
                    action: "ulssetlang";
                    /**
                     * The preferred language code.
                     */
                    languagecode: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Unblock a user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Block
                 */
                interface Unblock extends Params {
                    action: "unblock";
                    /**
                     * ID of the block to unblock (obtained through `list=blocks`). Cannot be used together with `user`.
                     */
                    id?: number;
                    /**
                     * User to unblock. Cannot be used together with `id`.
                     */
                    user?: string;
                    /**
                     * Specify `user=#`ID`` instead.
                     *
                     * @deprecated
                     */
                    userid?: number;
                    /**
                     * Reason for unblock.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Change tags to apply to the entry in the block log.
                     */
                    tags?: string | string[];
                    /**
                     * Watch the user's or IP address's user and talk pages.
                     */
                    watchuser?: boolean;
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Undelete revisions of a deleted page.
                 *
                 * A list of deleted revisions (including timestamps) can be retrieved through {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions prop=deletedrevisions}, and a list of deleted file IDs can be retrieved through {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfilearchive list=filearchive}.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Undelete
                 */
                interface Undelete extends Params {
                    action: "undelete";
                    /**
                     * Title of the page to undelete.
                     */
                    title: string;
                    /**
                     * Reason for restoring.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * Change tags to apply to the entry in the deletion log.
                     */
                    tags?: string | string[];
                    /**
                     * Timestamps of the revisions to undelete. If both `timestamps` and `fileids` are empty, all will be undeleted.
                     */
                    timestamps?: string | string[];
                    /**
                     * IDs of the file revisions to restore. If both `timestamps` and `fileids` are empty, all will be restored.
                     */
                    fileids?: number | number[];
                    /**
                     * Undelete all revisions of the associated talk page, if any.
                     */
                    undeletetalk?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "unwatch" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Remove a linked third-party account from the current user.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Manage_authentication_data
                 */
                interface UnlinkAccount extends Params {
                    action: "unlinkaccount";
                    /**
                     * Use this authentication request, by the `id` returned from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bauthmanagerinfo `action=query&meta=authmanagerinfo`} with `amirequestsfor=unlink`.
                     */
                    request: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Upload a file, or get the status of pending uploads.
                 *
                 * Several methods are available:
                 *
                 * - Upload file contents directly, using the `file` parameter.
                 * - Upload the file in pieces, using the `filesize`, `chunk`, and `offset` parameters.
                 * - Have the MediaWiki server fetch a file from a URL, using the `url` parameter.
                 * - Complete an earlier upload that failed due to warnings, using the `filekey` parameter.
                 * Note that the HTTP POST must be done as a file upload (i.e. using `multipart/form-data`) when sending the `file`.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Upload
                 */
                interface Upload extends Params {
                    action: "upload";
                    /**
                     * Target filename.
                     */
                    filename?: string;
                    /**
                     * Upload comment. Also used as the initial page text for new files if `text` is not specified.
                     *
                     * Defaults to an empty string.
                     */
                    comment?: string;
                    /**
                     * Change tags to apply to the upload log entry and file page revision.
                     */
                    tags?: string | string[];
                    /**
                     * Initial page text for new files.
                     */
                    text?: string;
                    /**
                     * Watch the page.
                     *
                     * @deprecated
                     */
                    watch?: boolean;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     *
                     * Defaults to `preferences`.
                     */
                    watchlist?: "nochange" | "preferences" | "watch";
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                    /**
                     * Ignore any warnings.
                     */
                    ignorewarnings?: boolean;
                    /**
                     * File contents.
                     */
                    file?: File;
                    /**
                     * URL to fetch the file from.
                     */
                    url?: string;
                    /**
                     * Key that identifies a previous upload that was stashed temporarily.
                     */
                    filekey?: string;
                    /**
                     * Same as filekey, maintained for backward compatibility.
                     *
                     * @deprecated
                     */
                    sessionkey?: string;
                    /**
                     * If set, the server will stash the file temporarily instead of adding it to the repository.
                     */
                    stash?: boolean;
                    /**
                     * Filesize of entire upload.
                     */
                    filesize?: number;
                    /**
                     * Offset of chunk in bytes.
                     */
                    offset?: number;
                    /**
                     * Chunk contents.
                     */
                    chunk?: File;
                    /**
                     * Make potentially large file operations asynchronous when possible.
                     */
                    async?: boolean;
                    /**
                     * Only fetch the upload status for the given file key.
                     */
                    checkstatus?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Change a user's group membership.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:User_group_membership
                 */
                interface Userrights extends Params {
                    action: "userrights";
                    /**
                     * User.
                     */
                    user?: string;
                    /**
                     * Specify `user=#`ID`` instead.
                     *
                     * @deprecated
                     */
                    userid?: number;
                    /**
                     * Add the user to these groups, or if they are already a member, update the expiry of their membership in that group.
                     */
                    add?: string | string[];
                    /**
                     * Expiry timestamps. May be relative (e.g. `5 months` or `2 weeks`) or absolute (e.g. the current timestamp). If only one timestamp is set, it will be used for all groups passed to the `add` parameter. Use `infinite`, `indefinite`, `infinity`, or `never` for a never-expiring user group.
                     *
                     * Defaults to `infinite`.
                     */
                    expiry?: string | string[];
                    /**
                     * Remove the user from these groups.
                     */
                    remove?: string | string[];
                    /**
                     * Reason for the change.
                     *
                     * Defaults to an empty string.
                     */
                    reason?: string;
                    /**
                     * A "userrights" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * For compatibility, the token used in the web UI is also accepted.
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Change tags to apply to the entry in the user rights log.
                     */
                    tags?: string | string[];
                    /**
                     * Watch the user's user and talk pages.
                     */
                    watchuser?: boolean;
                    /**
                     * Watchlist expiry timestamp. Omit this parameter entirely to leave the current expiry unchanged.
                     */
                    watchlistexpiry?: string;
                }

                /**
                 * Validate a password against the wiki's password policies.
                 *
                 * Validity is reported as `Good` if the password is acceptable, `Change` if the password may be used for login but must be changed, or `Invalid` if the password is not usable.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Validatepassword
                 */
                interface ValidatePassword extends Params {
                    action: "validatepassword";
                    /**
                     * Password to validate.
                     *
                     * Sensitive parameter.
                     */
                    password: string;
                    /**
                     * Username, for use when testing account creation. The named user must not exist.
                     */
                    user?: string;
                    /**
                     * Email address, for use when testing account creation.
                     */
                    email?: string;
                    /**
                     * Real name, for use when testing account creation.
                     */
                    realname?: string;
                }

                /**
                 * Returns HTML5 for a page from the Parsoid service.
                 *
                 * @private
                 */
                interface VisualEditor extends Params {
                    action: "visualeditor";
                    /**
                     * The page to perform actions on.
                     */
                    page: string;
                    /**
                     * If RESTBase query returned a seemingly invalid ETag, pass it here for logging purposes.
                     */
                    badetag?: string;
                    /**
                     * The format of the output.
                     *
                     * Defaults to `jsonfm`.
                     */
                    format?: "json" | "jsonfm";
                    /**
                     * Action to perform.
                     */
                    paction: "metadata" | "parse" | "parsefragment" | "templatesused" | "wikitext";
                    /**
                     * Wikitext to send to Parsoid to convert to HTML (paction=parsefragment).
                     */
                    wikitext?: string;
                    /**
                     * The section on which to act.
                     */
                    section?: string;
                    /**
                     * When saving, set this true if you want to use the stashing API.
                     */
                    stash?: boolean;
                    /**
                     * The revision number to use (defaults to latest revision).
                     */
                    oldid?: number;
                    /**
                     * Edit intro to add to notices.
                     */
                    editintro?: string;
                    /**
                     * Pre-save transform wikitext before sending it to Parsoid (paction=parsefragment).
                     */
                    pst?: boolean;
                    /**
                     * The page to use content from if the fetched page has no content yet.
                     */
                    preload?: string;
                    /**
                     * Parameters to substitute into the preload page, if present.
                     */
                    preloadparams?: string | string[];
                }

                /**
                 * Save an HTML5 page to MediaWiki (converted to wikitext via the Parsoid service).
                 *
                 * @private
                 */
                interface VisualEditorEdit extends Params {
                    action: "visualeditoredit";
                    /**
                     * Action to perform.
                     */
                    paction: "diff" | "save" | "serialize" | "serializeforcache";
                    /**
                     * The page to perform actions on.
                     */
                    page: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The wikitext to act with.
                     */
                    wikitext?: string;
                    /**
                     * The section on which to act.
                     */
                    section?: string;
                    /**
                     * Title for new section.
                     */
                    sectiontitle?: string;
                    /**
                     * When saving, set this to the timestamp of the revision that was edited. Used to detect edit conflicts.
                     */
                    basetimestamp?: string;
                    /**
                     * When saving, set this to the timestamp of when the page was loaded. Used to detect edit conflicts.
                     */
                    starttimestamp?: string;
                    /**
                     * The revision number to use. Defaults to latest revision.
                     */
                    oldid?: number;
                    /**
                     * Flag for minor edit.
                     */
                    minor?: string;
                    /**
                     * Unconditionally add or remove the page from the current user's watchlist, use preferences (ignored for bot users) or do not change watch.
                     */
                    watchlist?: string;
                    /**
                     * HTML to send to Parsoid in exchange for wikitext.
                     */
                    html?: string;
                    /**
                     * ETag to send.
                     */
                    etag?: string;
                    /**
                     * Edit summary.
                     */
                    summary?: string;
                    /**
                     * Captcha ID (when saving with a captcha response).
                     */
                    captchaid?: string;
                    /**
                     * Answer to the captcha (when saving with a captcha response).
                     */
                    captchaword?: string;
                    /**
                     * Use the result of a previous serializeforcache request with this key. Overrides html.
                     */
                    cachekey?: string;
                    /**
                     * Omit the HTML content of the new revision in the response.
                     */
                    nocontent?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * Apply the selected skin to the parser output. May affect the following properties: `text`, `langlinks`, `headitems`, `modules`, `jsconfigvars`, `indicators`.
                     */
                    useskin?: string;
                    /**
                     * Change tags to apply to the edit.
                     */
                    tags?: string | string[];
                    /**
                     * Plugins associated with the API request.
                     */
                    plugins?: string | string[];
                    /**
                     * Arbitrary data sent by a plugin with the API request.
                     */
                    [k: `data-${string}`]: string;
                    /**
                     * Return parse output in a format suitable for mobile devices.
                     */
                    mobileformat?: boolean;
                }

                /**
                 * Add or remove pages from the current user's watchlist.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watch
                 */
                interface Watch extends Params {
                    action: "watch";
                    /**
                     * The page to (un)watch. Use `titles` instead.
                     *
                     * @deprecated
                     */
                    title?: string;
                    /**
                     * Expiry timestamp to be applied to all given pages. Omit this parameter entirely to leave any current expiries unchanged.
                     */
                    expiry?: string;
                    /**
                     * If set the page will be unwatched rather than watched.
                     */
                    unwatch?: boolean;
                    /**
                     * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                     */
                    continue?: string;
                    /**
                     * A list of titles to work on.
                     */
                    titles?: string | string[];
                    /**
                     * A list of page IDs to work on.
                     */
                    pageids?: number | number[];
                    /**
                     * A list of revision IDs to work on. Note that almost all query modules will convert revision IDs to the corresponding page ID and work on the latest revision instead. Only `prop=revisions` uses exact revisions for its response.
                     */
                    revids?: number | number[];
                    /**
                     * Get the list of pages to work on by executing the specified query module.
                     *
                     * **Note:** Generator parameter names must be prefixed with a "g", see examples.
                     *
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballcategories allcategories}**: Enumerate all categories.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balldeletedrevisions alldeletedrevisions}**: List all deleted revisions by a user or in a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballfileusages allfileusages}**: List all file usages, including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballimages allimages}**: Enumerate all images sequentially.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balllinks alllinks}**: Enumerate all links that point to a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages allpages}**: Enumerate all pages sequentially in a given namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballredirects allredirects}**: List all redirects to a namespace.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballrevisions allrevisions}**: List all revisions.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Balltransclusions alltransclusions}**: List all transclusions (pages embedded using {{x}}), including non-existing.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bbacklinks backlinks}**: Find all pages that link to the given page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategories categories}**: List all categories the pages belong to.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bcategorymembers categorymembers}**: List all pages in a given category.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bdeletedrevisions deletedrevisions}**: Get deleted revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bduplicatefiles duplicatefiles}**: List all files that are duplicates of the given files based on hash values.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bembeddedin embeddedin}**: Find all pages that embed (transclude) the given title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bexturlusage exturlusage}**: Enumerate pages that contain a given URL.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bfileusage fileusage}**: Find all pages that use the given files.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimages images}**: Returns all files contained on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageusage imageusage}**: Find all pages that use the given image title.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Biwbacklinks iwbacklinks}**: Find all pages that link to the given interwiki link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blangbacklinks langbacklinks}**: Find all pages that link to the given language link.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinks links}**: Returns all links from the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Blinkshere linkshere}**: Find all pages that link to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagecollection messagecollection}**: Query MessageCollection about translations.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmostviewed mostviewed}**: Lists the most viewed pages (based on last day's pageview count).
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpageswithprop pageswithprop}**: List all pages using a given page property.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprefixsearch prefixsearch}**: Perform a prefix search for page titles.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bprotectedtitles protectedtitles}**: List all titles protected from creation.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bquerypage querypage}**: Get a list provided by a QueryPage-based special page.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brandom random}**: Get a set of random pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brecentchanges recentchanges}**: Enumerate recent changes.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bredirects redirects}**: Returns all redirects to the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Brevisions revisions}**: Get revision information.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsearch search}**: Perform a full text search.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btemplates templates}**: Returns all pages transcluded on the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btranscludedin transcludedin}**: Find all pages that transclude the given pages.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlist watchlist}**: Get recent changes to pages in the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwatchlistraw watchlistraw}**: Get all pages on the current user's watchlist.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bwblistentityusage wblistentityusage}**: Returns all pages that use the given entity IDs.
                     * - **{@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries readinglistentries}**: Internal. List the pages of a certain list.
                     */
                    generator?: string;
                    /**
                     * Automatically resolve redirects in `titles`, `pageids`, and `revids`, and in pages returned by `generator`.
                     */
                    redirects?: boolean;
                    /**
                     * Convert titles to other variants if necessary. Only works if the wiki's content language supports variant conversion. Languages that support variant conversion include ban, en, crh, gan, iu, ku, mni, sh, shi, sr, tg, tly, uz, wuu, zgh and zh.
                     */
                    converttitles?: boolean;
                    /**
                     * A "watch" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Queries available badge items.
                 */
                interface WBAvailableBadges extends Params {
                    action: "wbavailablebadges";
                }

                /**
                 * Checks the constraint parameters of constraint statements.
                 *
                 * Either or both of the `property` and `constraintid` parameters may be specified; all constraints selected by either parameter will be checked.
                 */
                interface WBCheckConstraintParameters extends Params {
                    action: "wbcheckconstraintparameters";
                    /**
                     * List of property IDs to check. All constraint statements of these properties will be checked.
                     *
                     * If this parameter is specified, it must be nonempty.
                     */
                    propertyid?: string | string[];
                    /**
                     * List of constraint IDs (constraint statement GUIDs) to check.
                     *
                     * If this parameter is specified, it must be nonempty.
                     */
                    constraintid?: string | string[];
                }

                /**
                 * Performs constraint checks on any entity you want and returns the result.
                 */
                interface WBCheckConstraints extends Params {
                    action: "wbcheckconstraints";
                    /**
                     * ID list of the entities to get the data from. Separate values with '|' or alternative.
                     */
                    id?: string | string[];
                    /**
                     * GUID list identifying a claim to check a constraint report. Separate values with '|'.
                     */
                    claimid?: string | string[];
                    /**
                     * Optional filter to return only the constraints that have the specified constraint ID.
                     */
                    constraintid?: string | string[];
                    /**
                     * Optional filter to return only check results with the selected statuses.
                     *
                     * Note that only results for the 'violation', 'warning', 'suggestion' and 'bad-parameters' statuses are cached, so requests that select any statuses beyond those four do not benefit from caching.
                     *
                     * - **compliance**: The statement satisfies the constraint.
                     * - **violation**: The statement violates the constraint.
                     * - **warning**: The statement violates the constraint, but the constraint is not mandatory.
                     * - **suggestion**: The statement violates the constraint, but the constraint is just a suggestion.
                     * - **exception**: The subject entity of the statement is a known exception to the constraint.
                     * - **not-in-scope**: The constraint is not checked on this kind of snak (main snak, qualifier or reference), so the constraint check is skipped.
                     * - **deprecated**: The constraint has not been checked because the statement is deprecated.
                     * - **bad-parameters**: The constraint parameters are broken.
                     * - **todo**: The constraint is not implemented.
                     *
                     * Defaults to `violation`, `warning`, `suggestion`, and `bad-parameters`.
                     */
                    status?:
                        | "*"
                        | OneOrMore<
                              | "bad-parameters"
                              | "compliance"
                              | "deprecated"
                              | "exception"
                              | "not-in-scope"
                              | "suggestion"
                              | "todo"
                              | "violation"
                              | "warning"
                          >;
                }

                /**
                 * Creates Wikibase claims.
                 */
                interface WBCreateClaim extends Params {
                    action: "wbcreateclaim";
                    /**
                     * ID of the entity the claim is being added to
                     */
                    entity: string;
                    /**
                     * The type of the snak
                     */
                    snaktype: "novalue" | "somevalue" | "value";
                    /**
                     * ID of the snaks property
                     */
                    property: string;
                    /**
                     * Value of the snak when creating a claim with a snak that has a value
                     */
                    value?: string;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Creates Entity redirects.
                 */
                interface WBCreateRedirect extends Params {
                    action: "wbcreateredirect";
                    /**
                     * Entity ID to make a redirect
                     */
                    from: string;
                    /**
                     * Entity ID to point the redirect to
                     */
                    to: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Creates a single new Wikibase entity and modifies it with serialised information.
                 */
                interface WBEditEntity extends Params {
                    action: "wbeditentity";
                    /**
                     * The identifier for the entity, including the prefix.
                     * Use either `id` or `site` and `title` together.
                     */
                    id?: string;
                    /**
                     * If set, a new entity will be created.
                     * Set this to the type of the entity to be created.
                     * It is not allowed to have this set when `id` is also set.
                     */
                    new?: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `title` to make a complete sitelink.
                     */
                    site?: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `site` to make a complete sitelink.
                     */
                    title?: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * The serialized object that is used as the data source.
                     * A newly created entity will be assigned an 'id'.
                     */
                    data: string;
                    /**
                     * If set, the complete entity is emptied before proceeding.
                     * The entity will not be saved before it is filled with the "`data`", possibly with parts excluded.
                     */
                    clear?: boolean;
                }

                /**
                 * Formats entity IDs to HTML.
                 *
                 * The language can be specified with the global `uselang` parameter.
                 */
                interface WBFormatEntities extends Params {
                    action: "wbformatentities";
                    /**
                     * The entity IDs to format.
                     */
                    ids?: string | string[];
                }

                /**
                 * Formats a reference for display to users.
                 *
                 * @private
                 */
                interface WBFormatReference extends Params {
                    action: "wbformatreference";
                    /**
                     * The reference as a JSON object.
                     */
                    reference: string;
                    /**
                     * The style in which to format the reference.
                     *
                     * - **internal-data-bridge**: The style used by {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Wikidata_Bridge Data Bridge}. Not intended for general use.
                     */
                    style: "internal-data-bridge";
                    /**
                     * The format in which the result should be returned.
                     *
                     * - **html**: HTML markup.
                     */
                    outputformat: "html";
                }

                /**
                 * Formats DataValues.
                 */
                interface WBFormatValue extends Params {
                    action: "wbformatvalue";
                    /**
                     * The desired output format to generate.
                     *
                     * Defaults to `text/x-wiki`.
                     */
                    generate?:
                        | "text/html"
                        | "text/html; disposition=verbose"
                        | "text/html; disposition=verbose-preview"
                        | "text/plain"
                        | "text/x-wiki";
                    /**
                     * The data to format. This has to be the JSON serialization of a DataValue object.
                     */
                    datavalue: string;
                    /**
                     * The value's data type. This is distinct from the value's type
                     */
                    datatype?:
                        | "commonsMedia"
                        | "entity-schema"
                        | "external-id"
                        | "geo-shape"
                        | "globe-coordinate"
                        | "math"
                        | "monolingualtext"
                        | "musical-notation"
                        | "quantity"
                        | "string"
                        | "tabular-data"
                        | "time"
                        | "url"
                        | "wikibase-form"
                        | "wikibase-item"
                        | "wikibase-lexeme"
                        | "wikibase-property"
                        | "wikibase-sense";
                    /**
                     * Property ID the data value belongs to, should be used instead of the `datatype` parameter.
                     */
                    property?: string;
                    /**
                     * The options the formatter should use. Provided as a JSON object.
                     *
                     * The supported options are:
                     *
                     * - **lang**: The language in which the value should be formatted (a MediaWiki language code).
                     * - **applyRounding**: Whether to apply rounding to the number. Can be a boolean (automatic / no rounding) or an integer (exponent of the last significant decimal digits). Only useful for quantity values.
                     * - **applyUnit**: Whether to include the unit in the output (a boolean). Only useful for quantity values.
                     * - **showcalendar**: Whether to show the calendar model. Can be a boolean (always / never show) or the string `"auto"` (automatically determine whether to show). Only useful for time values.
                     */
                    options?: string;
                }

                /**
                 * Gets Wikibase claims.
                 */
                interface WBGetClaims extends Params {
                    action: "wbgetclaims";
                    /**
                     * ID of the entity from which to obtain claims. Required unless claim GUID is provided.
                     */
                    entity?: string;
                    /**
                     * Optional filter to only return claims with a main snak that has the specified property.
                     */
                    property?: string;
                    /**
                     * A GUID identifying the claim. Required unless entity is provided. The GUID is the globally unique identifier for a claim, e.g. "`q42$D8404CDA-25E4-4334-AF13-A3290BCD9C0F`".
                     */
                    claim?: string;
                    /**
                     * Optional filter to return only the claims that have the specified rank
                     */
                    rank?: "deprecated" | "normal" | "preferred";
                    /**
                     * Some parts of the claim are returned optionally. This parameter controls which ones are returned.
                     *
                     * Defaults to `references`.
                     */
                    props?: OneOrMore<"references">;
                }

                /**
                 * Gets the data for multiple Wikibase entities.
                 */
                interface WBGetEntities extends Params {
                    action: "wbgetentities";
                    /**
                     * The IDs of the entities to get the data from
                     */
                    ids?: string | string[];
                    /**
                     * Identifier for the site on which the corresponding page resides.
                     * Use together with `title`, but only give one site for several titles or several sites for one title.
                     */
                    sites?: string | string[];
                    /**
                     * The title of the corresponding page.
                     * Use together with `sites`, but only give one site for several titles or several sites for one title.
                     */
                    titles?: string | string[];
                    /**
                     * Whether redirects shall be resolved.
                     * If set to "no", redirects will be treated like deleted entities.
                     *
                     * Defaults to `yes`.
                     */
                    redirects?: "no" | "yes";
                    /**
                     * The names of the properties to get back from each entity.
                     * Will be further filtered by any languages given.
                     *
                     * Defaults to `info`, `sitelinks`, `aliases`, `labels`, `descriptions`, `claims`, and `datatype`.
                     */
                    props?: OneOrMore<
                        | "aliases"
                        | "claims"
                        | "datatype"
                        | "descriptions"
                        | "info"
                        | "labels"
                        | "sitelinks"
                        | "sitelinks/urls"
                    >;
                    /**
                     * By default the internationalized values are returned in all available languages.
                     * This parameter allows filtering these down to one or more languages by providing one or more language codes.
                     */
                    languages?: string | string[];
                    /**
                     * Apply language fallback for languages defined in the `languages` parameter, with the current context of API call.
                     */
                    languagefallback?: boolean;
                    /**
                     * Try to normalize the page title against the client site.
                     * This only works if exactly one site and one page have been given.
                     */
                    normalize?: boolean;
                    /**
                     * Filter sitelinks in entities to those with these site IDs.
                     */
                    sitefilter?: string | string[];
                }

                /**
                 * Adds Form to Lexeme
                 *
                 * @private
                 */
                interface WBLAddForm extends Params {
                    action: "wbladdform";
                    /**
                     * ID of the Lexeme, e.g. L10
                     */
                    lexemeId: string;
                    /**
                     * JSON encoded data for Form i.e. representations and grammatical features
                     */
                    data: string;
                    /**
                     * Base Revision ID of the Lexeme, if edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Adds a Sense to a Lexeme
                 *
                 * @private
                 */
                interface WBLAddSense extends Params {
                    action: "wbladdsense";
                    /**
                     * ID of the Lexeme, e.g. L10
                     */
                    lexemeId: string;
                    /**
                     * JSON-encoded data for the Sense, i.e. its glosses
                     */
                    data: string;
                    /**
                     * Base Revision ID of the Lexeme, if edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Edits representations and grammatical features of a Form
                 *
                 * @private
                 */
                interface WBLEditFormElements extends Params {
                    action: "wbleditformelements";
                    /**
                     * ID of the Form, e.g. L10-F2
                     */
                    formId: string;
                    /**
                     * JSON-encoded representation and grammatical feature data
                     */
                    data: string;
                    /**
                     * Base Revision ID of the Lexeme, if form elements edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Edits glosses of a Sense
                 *
                 * @private
                 */
                interface WBLEditSenseElements extends Params {
                    action: "wbleditsenseelements";
                    /**
                     * ID of the Sense, e.g. L10-S2
                     */
                    senseId: string;
                    /**
                     * JSON-encoded gloss data
                     */
                    data: string;
                    /**
                     * Base Revision ID of the Lexeme, if sense elements edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Associates two pages on two different wikis with a Wikibase item.
                 */
                interface WBLinkTitles extends Params {
                    action: "wblinktitles";
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `totitle` to make a complete sitelink.
                     */
                    tosite: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `tosite` to make a complete sitelink.
                     */
                    totitle: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `fromtitle` to make a complete sitelink.
                     */
                    fromsite: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `fromsite` to make a complete sitelink.
                     */
                    fromtitle: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    bot?: boolean;
                }

                /**
                 * Merges two Lexemes.
                 */
                interface WBLMergeLexemes extends Params {
                    action: "wblmergelexemes";
                    /**
                     * The ID to merge from
                     */
                    source: string;
                    /**
                     * The ID to merge to
                     */
                    target: string;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Removes Form from Lexeme
                 *
                 * @private
                 */
                interface WBLRemoveForm extends Params {
                    action: "wblremoveform";
                    /**
                     * ID of the Form, e.g. L10-F20
                     */
                    id: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Base Revision ID of the Lexeme, if edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Removes Sense from Lexeme
                 *
                 * @private
                 */
                interface WBLRemoveSense extends Params {
                    action: "wblremovesense";
                    /**
                     * ID of the Sense, e.g. L10-S20
                     */
                    id: string;
                    /**
                     * Base Revision ID of the Lexeme, if edit conflict check is wanted.
                     */
                    baserevid?: number;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Merges multiple items.
                 */
                interface WBMergeItems extends Params {
                    action: "wbmergeitems";
                    /**
                     * The ID to merge from
                     */
                    fromid: string;
                    /**
                     * The ID to merge to
                     */
                    toid: string;
                    /**
                     * Array of elements of the item to ignore conflicts for. Can only contain values of "`description`", "`sitelink`" and "`statement`"
                     */
                    ignoreconflicts?: OneOrMore<"description" | "sitelink" | "statement">;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revisions.
                     */
                    tags?: string | string[];
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    bot?: boolean;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Parses values using a `ValueParser`.
                 */
                interface WBParseValue extends Params {
                    action: "wbparsevalue";
                    /**
                     * Datatype of the value to parse. Determines the parser to use.
                     */
                    datatype?:
                        | "commonsMedia"
                        | "entity-schema"
                        | "external-id"
                        | "geo-shape"
                        | "globe-coordinate"
                        | "math"
                        | "monolingualtext"
                        | "musical-notation"
                        | "quantity"
                        | "string"
                        | "tabular-data"
                        | "time"
                        | "url"
                        | "wikibase-form"
                        | "wikibase-item"
                        | "wikibase-lexeme"
                        | "wikibase-property"
                        | "wikibase-sense";
                    /**
                     * Property ID the value to parse belongs to. Determines the parser to use.
                     */
                    property?: string;
                    /**
                     * ID of the `ValueParser` to use. Deprecated. Use the `datatype` parameter instead.
                     *
                     * @deprecated
                     */
                    parser?:
                        | "commonsMedia"
                        | "entity-schema"
                        | "external-id"
                        | "geo-shape"
                        | "globe-coordinate"
                        | "globecoordinate"
                        | "math"
                        | "monolingualtext"
                        | "musical-notation"
                        | "null"
                        | "quantity"
                        | "string"
                        | "tabular-data"
                        | "time"
                        | "url"
                        | "wikibase-entityid"
                        | "wikibase-form"
                        | "wikibase-item"
                        | "wikibase-lexeme"
                        | "wikibase-property"
                        | "wikibase-sense";
                    /**
                     * The values to parse
                     */
                    values: string | string[];
                    /**
                     * The options the parser should use. Provided as a JSON object.
                     */
                    options?: string;
                    /**
                     * Whether to additionally verify the data passed in.
                     */
                    validate?: boolean;
                }

                /**
                 * Removes Wikibase claims.
                 */
                interface WBRemoveClaims extends Params {
                    action: "wbremoveclaims";
                    /**
                     * One GUID or several (pipe-separated) GUIDs identifying the claims to be removed.
                     * All claims must belong to the same entity.
                     */
                    claim: string | string[];
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Removes a qualifier from a claim.
                 */
                interface WBRemoveQualifiers extends Params {
                    action: "wbremovequalifiers";
                    /**
                     * A GUID identifying the claim from which to remove qualifiers
                     */
                    claim: string;
                    /**
                     * Snak hashes of the qualifiers to remove
                     */
                    qualifiers: string | string[];
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Removes one or more references of the same statement.
                 */
                interface WBRemoveReferences extends Params {
                    action: "wbremovereferences";
                    /**
                     * A GUID identifying the statement for which a reference is being set
                     */
                    statement: string;
                    /**
                     * The hashes of the references that should be removed
                     */
                    references: string | string[];
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Searches for entities using labels and aliases.
                 *
                 * Returns a label and description for the entity in the user language if possible.
                 * Returns details of the matched term.
                 * The matched term text is also present in the aliases key if different from the display label.
                 */
                interface WBSearchEntities extends Params {
                    action: "wbsearchentities";
                    /**
                     * Search for this text.
                     */
                    search: string;
                    /**
                     * Search in this language. This only affects how entities are selected, not the language in which the results are returned: this is controlled by the "uselang" parameter.
                     */
                    language: string;
                    /**
                     * Whether to disable language fallback
                     */
                    strictlanguage?: boolean;
                    /**
                     * Search for this type of entity.
                     *
                     * Defaults to `item`.
                     */
                    type?: "entity-schema" | "form" | "item" | "lexeme" | "property" | "sense";
                    /**
                     * Maximal number of results
                     *
                     * Defaults to 7.
                     */
                    limit?: Limit;
                    /**
                     * Offset where to continue a search
                     *
                     * Defaults to 0.
                     */
                    continue?: number;
                    /**
                     * Return these properties for each entity.
                     *
                     * Defaults to `url`.
                     */
                    props?: OneOrMore<"url">;
                    /**
                     * The search profile to use.
                     *
                     * - **default**: The default profile, suitable for most purposes.
                     * - **language**: A profile to search for items about natural languages.
                     *
                     * Defaults to `default`.
                     */
                    profile?: "default" | "language";
                }

                /**
                 * Sets the aliases for a Wikibase entity.
                 */
                interface WBSetAliases extends Params {
                    action: "wbsetaliases";
                    /**
                     * The identifier for the entity, including the prefix.
                     * Use either `id` or `site` and `title` together.
                     */
                    id?: string;
                    /**
                     * If set, a new entity will be created.
                     * Set this to the type of the entity you want to create.
                     */
                    new?: "item" | "property";
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `title` to make a complete sitelink.
                     */
                    site?: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `site` to make a complete sitelink.
                     */
                    title?: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * List of aliases to add (can be combined with `remove`)
                     */
                    add?: string | string[];
                    /**
                     * List of aliases to remove (can be combined with `add`)
                     */
                    remove?: string | string[];
                    /**
                     * A list of aliases that will replace the current list (cannot be combined with neither `add` nor `remove`)
                     */
                    set?: string | string[];
                    /**
                     * The language for which to set the aliases
                     */
                    language: string;
                }

                /**
                 * Creates or updates an entire Statement or Claim.
                 */
                interface WBSetClaim extends Params {
                    action: "wbsetclaim";
                    /**
                     * Statement or Claim serialization
                     */
                    claim: string;
                    /**
                     * The index within the entity's list of statements to move the statement to. Optional. Be aware that when setting an index that specifies a position not next to a statement whose main snak does not feature the same property, the whole group of statements whose main snaks feature the same property is moved. When not provided, an existing statement will stay in place while a new statement will be appended to the last one whose main snak features the same property.
                     */
                    index?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * If this is true, and the entity already has a claim with the same main snak as the claim being sent in the request, then the request is ignored
                     */
                    ignoreduplicatemainsnak?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Sets the value of a Wikibase claim.
                 */
                interface WBSetClaimValue extends Params {
                    action: "wbsetclaimvalue";
                    /**
                     * A GUID identifying the claim
                     */
                    claim: string;
                    /**
                     * The value to set the DataValue of the main snak of the claim to
                     */
                    value?: string;
                    /**
                     * The type of the snak
                     */
                    snaktype: "novalue" | "somevalue" | "value";
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Sets a description for a single Wikibase entity.
                 */
                interface WBSetDescription extends Params {
                    action: "wbsetdescription";
                    /**
                     * The identifier for the entity, including the prefix.
                     * Use either `id` or `site` and `title` together.
                     */
                    id?: string;
                    /**
                     * If set, a new entity will be created.
                     * Set this to the type of the entity you want to create.
                     */
                    new?: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `title` to make a complete sitelink.
                     */
                    site?: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `site` to make a complete sitelink.
                     */
                    title?: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * Language of the description
                     */
                    language: string;
                    /**
                     * The value to set for the description
                     */
                    value?: string;
                }

                /**
                 * Sets a label for a single Wikibase entity.
                 */
                interface WBSetLabel extends Params {
                    action: "wbsetlabel";
                    /**
                     * The identifier for the entity, including the prefix.
                     * Use either `id` or `site` and `title` together.
                     */
                    id?: string;
                    /**
                     * If set, a new entity will be created.
                     * Set this to the type of the entity you want to create.
                     */
                    new?: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `title` to make a complete sitelink.
                     */
                    site?: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `site` to make a complete sitelink.
                     */
                    title?: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * Language of the label
                     */
                    language: string;
                    /**
                     * The value of the label
                     */
                    value?: string;
                }

                /**
                 * Creates a qualifier or sets the value of an existing one.
                 */
                interface WBSetQualifier extends Params {
                    action: "wbsetqualifier";
                    /**
                     * A GUID identifying the claim for which a qualifier is being set
                     */
                    claim: string;
                    /**
                     * ID of the snaks property.
                     * Should only be provided when creating a new qualifier or changing the property of an existing one
                     */
                    property?: string;
                    /**
                     * The new value of the qualifier.
                     * Should only be provided for PropertyValueSnak qualifiers
                     */
                    value?: string;
                    /**
                     * The type of the snak.
                     * Should only be provided when creating a new qualifier or changing the type of an existing one
                     */
                    snaktype?: "novalue" | "somevalue" | "value";
                    /**
                     * The hash of the snak to modify.
                     * Should only be provided for existing qualifiers
                     */
                    snakhash?: string;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "Bots".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                }

                /**
                 * Creates a reference or sets the value of an existing one.
                 */
                interface WBSetReference extends Params {
                    "action": "wbsetreference";
                    /**
                     * A GUID identifying the statement for which a reference is being set
                     */
                    "statement": string;
                    /**
                     * The snaks to set the reference to. JSON object with property IDs pointing to arrays containing the snaks for that property
                     */
                    "snaks": string;
                    /**
                     * The order of the snaks. JSON array of property ID strings
                     */
                    "snaks-order"?: string;
                    /**
                     * A hash of the reference that should be updated. Optional. When not provided, a new reference is created
                     */
                    "reference"?: string;
                    /**
                     * The index within the statement's list of references where to move the reference to. Optional. When not provided, an existing reference will stay in place while a new reference will be appended.
                     */
                    "index"?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    "summary"?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    "tags"?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    "token": string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    "baserevid"?: number;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    "bot"?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    "returnto"?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    "returntoquery"?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    "returntoanchor"?: string;
                }

                /**
                 * Associates a page on a wiki with a Wikibase item or removes an already made such association.
                 */
                interface WBSetSiteLink extends Params {
                    action: "wbsetsitelink";
                    /**
                     * The identifier for the entity, including the prefix.
                     * Use either `id` or `site` and `title` together.
                     */
                    id?: string;
                    /**
                     * If set, a new entity will be created.
                     * Set this to the type of the entity you want to create.
                     */
                    new?: string;
                    /**
                     * An identifier for the site on which the page resides.
                     * Use together with `title` to make a complete sitelink.
                     */
                    site?: string;
                    /**
                     * Title of the page to associate.
                     * Use together with `site` to make a complete sitelink.
                     */
                    title?: string;
                    /**
                     * The numeric identifier for the revision to base the modification on.
                     * This is used for detecting conflicts during save.
                     */
                    baserevid?: number;
                    /**
                     * Summary for the edit.
                     * Will be prepended by an automatically generated comment. The length limit of the autocomment together with the summary is 260 characters. Be aware that everything above that limit will be cut off.
                     */
                    summary?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikidata.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Mark this edit as bot. This URL flag will only be respected if the user belongs to the group "bot".
                     */
                    bot?: boolean;
                    /**
                     * Page title. If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to the given page, instead of the page that was edited.
                     */
                    returnto?: string;
                    /**
                     * URL query parameters (with leading `?`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given query parameters.
                     *
                     * Defaults to an empty string.
                     */
                    returntoquery?: string;
                    /**
                     * URL fragment (with leading `#`). If saving the edit created a temporary account, the API may respond with an URL that the client should visit to complete logging in. If this parameter is provided, the URL will redirect to a page with the given fragment.
                     *
                     * Defaults to an empty string.
                     */
                    returntoanchor?: string;
                    /**
                     * The identifier of the site on which the page to link resides
                     */
                    linksite: string;
                    /**
                     * The title of the page to link. If this parameter is an empty string or both `linktitle` and `badges` are not set, the link will be removed.
                     */
                    linktitle?: string;
                    /**
                     * The IDs of items to be set as badges. They will replace the current ones. If this parameter is not set, the badges will not be changed
                     */
                    badges?: string | string[];
                }

                /**
                 * API module for getting suggestions of additional properties to add to a Wikibase entity. The API module is primarily intended for use by the suggester widget when users are editing Wikibase entities.
                 */
                interface WBSGetSuggestions extends Params {
                    action: "wbsgetsuggestions";
                    /**
                     * Suggest properties for the given entity, based on existing list of properties that the entity has.
                     */
                    entity?: string;
                    /**
                     * Suggest additional properties for the given list of properties.
                     */
                    properties?: string | string[];
                    /**
                     * Suggest additional properties for the given list of types (these values are equal to ones that would be gathered through the classifyingPropertyIds if an entity is provided in the API call). Used in combination with the properties parameter.
                     */
                    types?: string | string[];
                    /**
                     * Maximum number of results.
                     *
                     * Defaults to 7.
                     */
                    limit?: Limit;
                    /**
                     * Offset where to continue a search.
                     */
                    continue?: number;
                    /**
                     * Language for result.
                     *
                     * Defaults to `en`.
                     */
                    language?: string;
                    /**
                     * Either item, reference or qualifier.
                     *
                     * Defaults to `item`.
                     */
                    context?: "item" | "qualifier" | "reference";
                    /**
                     * Which suggestions to include: Per default only properties that might be added (non-deprecated, not yet present) will be suggested.
                     *
                     * Defaults to an empty string.
                     */
                    include?: "" | "all";
                    /**
                     * Search for this text.
                     *
                     * Defaults to an empty string.
                     */
                    search?: string;
                    /**
                     * Event ID used to match events recorded client and server side.
                     *
                     * Defaults to an empty string.
                     */
                    event?: string;
                }

                /**
                 * Returns a webapp manifest.
                 */
                interface WebappManifest extends Params {
                    action: "webapp-manifest";
                }

                /**
                 * API Module to communicate between server and client during registration/authentication process.
                 */
                interface WebAuthn extends Params {
                    action: "webauthn";
                    /**
                     * Name of the requested function to be executed.
                     *
                     * - **getAuthInfo**: Authentication information.
                     * - **getRegisterInfo**: Registration information.
                     */
                    func: "getAuthInfo" | "getRegisterInfo";
                }

                /**
                 * Run a function call
                 */
                interface WikiFunctionsRun extends Params {
                    action: "wikifunctions_run";
                    /**
                     * ZObject for the function call to run
                     */
                    function_call: string;
                }

                /**
                 * Create or edit a ZObject.
                 *
                 * @private
                 */
                interface WikiLambdaEdit extends Params {
                    action: "wikilambda_edit";
                    /**
                     * Edit summary message
                     *
                     * Defaults to an empty string.
                     */
                    summary?: string;
                    /**
                     * ZID of the ZObject to edit. If null, the ZObject will be newly created
                     */
                    zid?: string;
                    /**
                     * JSON representation of the ZObject to save
                     */
                    zobject: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.wikifunctions.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                }

                /**
                 * Fetch the JSON model of ZObjects.
                 */
                interface WikiLambdaFetch extends Params {
                    action: "wikilambda_fetch";
                    /**
                     * The ZObject ZIDs to fetch.
                     */
                    zids: string | string[];
                    /**
                     * The revisions of the relevant ZIDs to fetch. If unset, this will fetch the latest revisions.
                     */
                    revisions?: string | string[];
                    /**
                     * The language in which to return results.
                     */
                    language?: string;
                }

                /**
                 * Invoke a function by calling the function-orchestrator
                 *
                 * @private
                 */
                interface WikiLambdaFunctionCall extends Params {
                    action: "wikilambda_function_call";
                    /**
                     * ZObject for function call
                     */
                    wikilambda_function_call_zobject: string;
                }

                /**
                 * Endpoint to query test results for a ZFunction. Accepts a ZFunction, a list of ZImplementations, and a list of ZTesters. Accepts either a list of ZIDs or the full ZObject for the function, implementations, or testers. Also accepts a key to utilize a back end cache or not.
                 *
                 * @private
                 */
                interface WikiLambdaPerformTest extends Params {
                    action: "wikilambda_perform_test";
                    /**
                     * The ZFunction ID (or object) to test
                     */
                    wikilambda_perform_test_zfunction: string;
                    /**
                     * The list of ZImplementation IDs (or objects) to test
                     */
                    wikilambda_perform_test_zimplementations?: string | string[];
                    /**
                     * The list of ZTester IDs (or objects) to test
                     */
                    wikilambda_perform_test_ztesters?: string | string[];
                }

                /**
                 * Retrieve the programming languages supported by the evaluator
                 *
                 * @private
                 */
                interface WikiLambdaSupportedProgrammingLanguages extends Params {
                    action: "wikilambda_supported_programming_languages";
                }

                /**
                 * Give WikiLove to another user.
                 *
                 * WikiLove is a positive message posted to a user's talk page through a convenient interface with preset or locally defined templates. This action adds the specified wikitext to a certain talk page. For statistical purposes, the type and other data are logged.
                 */
                interface WikiLove extends Params {
                    action: "wikilove";
                    /**
                     * Full pagename of the user page or user talk page of the user to send WikiLove to.
                     */
                    title: string;
                    /**
                     * Raw wikitext to add in the new section.
                     */
                    text: string;
                    /**
                     * Actual message the user has entered, for logging purposes.
                     */
                    message?: string;
                    /**
                     * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                     *
                     * Sensitive parameter.
                     */
                    token: string;
                    /**
                     * Subject header of the new section.
                     */
                    subject: string;
                    /**
                     * Type of WikiLove (for statistics); this corresponds with a type selected in the menu, and optionally a subtype after that (e.g. as in "The Original Barnstar" or "A kitten for you!").
                     */
                    type?: string;
                    /**
                     * Content of the optional email message to send to the user. A warning will be returned if the user cannot be emailed. WikiLove will be sent to the user's talk page either way.
                     */
                    email?: string;
                    /**
                     * Change tags to apply to the revision.
                     */
                    tags?: string | string[];
                }

                /**
                 * Log information about blocked edit attempts
                 *
                 * @private
                 */
                interface WikimediaEventsBlockedEdit extends Params {
                    action: "wikimediaeventsblockededit";
                    /**
                     * A page on which an edit attempt was made
                     */
                    page: string;
                    /**
                     * The interface which was used to edit
                     */
                    interface:
                        | "discussiontools"
                        | "mobilefrontend"
                        | "other"
                        | "visualeditor"
                        | "wikieditor";
                    /**
                     * The platform which was used to edit
                     */
                    platform: "desktop" | "mobile";
                }

                namespace Collection.Submodule {
                    /**
                     * API module for adding a page to the collection
                     */
                    interface AddArticle extends Collection {
                        submodule: "addarticle";
                        /**
                         * Namespace of page to add
                         */
                        namespace: number;
                        /**
                         * Title of page to add
                         */
                        title: string;
                        /**
                         * Oldid of page to add
                         *
                         * Defaults to 0.
                         */
                        oldid?: number;
                    }

                    /**
                     * API module for adding pages from a given category to a user's collection.
                     */
                    interface AddCategory extends Collection {
                        submodule: "addcategory";
                        /**
                         * Category to add
                         *
                         * Defaults to an empty string.
                         */
                        title?: string;
                    }

                    /**
                     * API module for adding a chapter to the collection
                     */
                    interface AddChapter extends Collection {
                        submodule: "addchapter";
                        /**
                         * Name of chapter to add
                         *
                         * Defaults to an empty string.
                         */
                        chaptername?: string;
                    }

                    /**
                     * API module for clearing the collection and the suggestions
                     */
                    interface ClearCollection extends Collection {
                        submodule: "clearcollection";
                    }

                    /**
                     * API submodule for grabbing the box content of the user's book creator box special page.
                     */
                    interface GetBookCreatorBoxContent extends Collection {
                        submodule: "getbookcreatorboxcontent";
                        /**
                         * Hint shown in the creator box
                         *
                         * Defaults to an empty string.
                         */
                        hint?: string;
                        /**
                         * Oldid of a collection
                         */
                        oldid?: number;
                        /**
                         * Title of a page
                         */
                        pagename?: string;
                    }

                    /**
                     * API module for listing the current pages in a collection
                     */
                    interface GetCollection extends Collection {
                        submodule: "getcollection";
                    }

                    /**
                     * API module to get data and HTML to construct a popup
                     */
                    interface GetPopupData extends Collection {
                        submodule: "getpopupdata";
                        /**
                         * Title of a page
                         */
                        title: string;
                    }

                    /**
                     * API module for posting pages to a user's collection
                     */
                    interface PostCollection extends Collection {
                        submodule: "postcollection";
                        /**
                         * Name of a collection
                         *
                         * Defaults to an empty string.
                         */
                        collection?: string;
                    }

                    /**
                     * API module for removing a page from the collection
                     */
                    interface RemoveArticle extends Collection {
                        submodule: "removearticle";
                        /**
                         * Namespace of page to remove
                         */
                        namespace: number;
                        /**
                         * Title of page to remove
                         */
                        title: string;
                        /**
                         * Oldid of page to remove
                         *
                         * Defaults to 0.
                         */
                        oldid?: number;
                    }

                    /**
                     * API module for removing an item from the collection index-wise via the Special:Book page.
                     */
                    interface RemoveItem extends Collection {
                        submodule: "removeitem";
                        /**
                         * Index of item to remove
                         *
                         * Defaults to 0.
                         */
                        index?: number;
                    }

                    /**
                     * API module for renaming a chapter in the user's collection
                     */
                    interface RenameChapter extends Collection {
                        submodule: "renamechapter";
                        /**
                         * Index of chapter to rename
                         */
                        index: number;
                        /**
                         * Name of chapter to rename
                         */
                        chaptername: string;
                    }

                    /**
                     * API module for reordering items in a collection
                     */
                    interface SetSorting extends Collection {
                        submodule: "setsorting";
                        /**
                         * Items should be listed using their old index and ordered by their new position
                         */
                        items: number | number[];
                    }

                    /**
                     * API module for setting the collection's title, subtitle, and settings
                     */
                    interface SetTitles extends Collection {
                        submodule: "settitles";
                        /**
                         * Title of the collection
                         */
                        title: string;
                        /**
                         * Subtitle of the collection
                         *
                         * Defaults to an empty string.
                         */
                        subtitle?: string;
                        /**
                         * Settings for the collection
                         *
                         * Defaults to an empty string.
                         */
                        settings?: string;
                    }

                    /**
                     * API module to sort pages in a collection alphabetically. Pages within chapters are grouped and sorted together.
                     */
                    interface SortItems extends Collection {
                        submodule: "sortitems";
                    }

                    /**
                     * API module to interact with suggestions
                     */
                    interface SuggestArticleAction extends Collection {
                        submodule: "suggestarticleaction";
                        /**
                         * One of 'add', 'remove', or 'ban'. 'add' adds a page to the collection and suggestions and unbans it. 'remove' removes an added page and bans it. 'ban' bans a page from suggestions.
                         */
                        suggestaction: "add" | "ban" | "remove";
                        /**
                         * Title of a page
                         */
                        title: string;
                    }

                    /**
                     * API module to undo actions done from suggestarticleaction
                     */
                    interface SuggestUndoArticleAction extends Collection {
                        submodule: "suggestundoarticleaction";
                        /**
                         * One of 'add', 'remove', or 'ban'.
                         */
                        lastaction: "add" | "ban" | "remove";
                        /**
                         * Title of a page
                         */
                        title: string;
                    }
                }

                namespace EchoPushSubscriptions.Command {
                    /**
                     * Register push subscriptions for the current user.
                     *
                     * @private
                     */
                    interface Create extends EchoPushSubscriptions {
                        command: "create";
                        /**
                         * The push service provider for which to register a token.
                         */
                        provider: "apns" | "fcm";
                        /**
                         * The token to register.
                         */
                        providertoken: string;
                        /**
                         * The APNS topic (app bundle ID) to send the notification to.
                         */
                        topic?: string;
                    }

                    /**
                     * Unregister push subscriptions for the current user or another specified user.
                     *
                     * @private
                     */
                    interface Delete extends EchoPushSubscriptions {
                        command: "delete";
                        /**
                         * The token associated with the push subscription to unregister.
                         */
                        providertoken: string | string[];
                    }
                }

                namespace Flow.Submodule {
                    /**
                     * Deprecated in favor of {@link https://www.mediawiki.org/wiki/Special:ApiHelp/flow%2Block-topic action=flow&submodule=lock-topic}.
                     *
                     * @deprecated
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#lock-topic
                     */
                    interface CloseOpenTopic extends Flow {
                        submodule: "close-open-topic";
                        /**
                         * State to put topic in, either "lock" or "unlock".
                         */
                        cotmoderationState: "close" | "lock" | "reopen" | "unlock";
                        /**
                         * Reason for locking or unlocking the topic.
                         */
                        cotreason: string;
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        cottoken: string;
                    }

                    /**
                     * Edits a board description.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#edit-header
                     */
                    interface EditHeader extends Flow {
                        submodule: "edit-header";
                        /**
                         * Revision ID of the current description revision, to check for edit conflicts.
                         */
                        ehprev_revision?: string;
                        /**
                         * Content for description.
                         */
                        ehcontent: string;
                        /**
                         * Format of the description (wikitext|html)
                         *
                         * Defaults to `wikitext`.
                         */
                        ehformat?: "html" | "wikitext";
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        ehtoken: string;
                    }

                    /**
                     * Edits a post's content.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#edit-post
                     */
                    interface EditPost extends Flow {
                        submodule: "edit-post";
                        /**
                         * Post ID.
                         */
                        eppostId: string;
                        /**
                         * Revision ID of the current post revision, to check for edit conflicts.
                         */
                        epprev_revision: string;
                        /**
                         * Content for post.
                         */
                        epcontent: string;
                        /**
                         * Format of the post content (wikitext|html)
                         *
                         * Defaults to `wikitext`.
                         */
                        epformat?: "html" | "wikitext";
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        eptoken: string;
                    }

                    /**
                     * Edits a topic's title.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#edit-title
                     */
                    interface EditTitle extends Flow {
                        submodule: "edit-title";
                        /**
                         * Revision ID of the current title revision, to check for edit conflicts.
                         */
                        etprev_revision: string;
                        /**
                         * Content for title, in the same format allowed for edit summaries (topic-title-wikitext).
                         */
                        etcontent: string;
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        ettoken: string;
                    }

                    /**
                     * Edits a topic summary's content.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#edit-topic-summary
                     */
                    interface EditTopicSummary extends Flow {
                        submodule: "edit-topic-summary";
                        /**
                         * Revision ID of the current topic summary revision, if any, to check for edit conflicts.
                         */
                        etsprev_revision?: string;
                        /**
                         * Content for the summary.
                         */
                        etssummary: string;
                        /**
                         * Format of the summary (wikitext|html)
                         *
                         * Defaults to `wikitext`.
                         */
                        etsformat?: "html" | "wikitext";
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        etstoken: string;
                    }

                    /**
                     * Lock or unlock a Structured Discussions topic.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#lock-topic
                     */
                    interface LockTopic extends Flow {
                        submodule: "lock-topic";
                        /**
                         * State to put topic in, either `lock` or `unlock`.
                         */
                        cotmoderationState: "close" | "lock" | "reopen" | "unlock";
                        /**
                         * Reason for locking or unlocking the topic. Note, the on-wiki Structured Discussions client uses "Marked as resolved" here, and puts optional additional information in the summary.
                         */
                        cotreason: string;
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        cottoken: string;
                    }

                    /**
                     * Moderates a Structured Discussions post.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#moderate-post
                     */
                    interface ModeratePost extends Flow {
                        submodule: "moderate-post";
                        /**
                         * What level to moderate at.
                         */
                        mpmoderationState:
                            | ""
                            | "delete"
                            | "hide"
                            | "restore"
                            | "suppress"
                            | "undelete"
                            | "unhide"
                            | "unsuppress";
                        /**
                         * Reason for moderation.
                         */
                        mpreason: string;
                        /**
                         * ID of the post to moderate.
                         */
                        mppostId: string;
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        mptoken: string;
                    }

                    /**
                     * Moderates a Structured Discussions topic.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#moderate-topic
                     */
                    interface ModerateTopic extends Flow {
                        submodule: "moderate-topic";
                        /**
                         * What level to moderate at.
                         */
                        mtmoderationState:
                            | ""
                            | "delete"
                            | "hide"
                            | "restore"
                            | "suppress"
                            | "undelete"
                            | "unhide"
                            | "unsuppress";
                        /**
                         * Reason for moderation.
                         */
                        mtreason: string;
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        mttoken: string;
                    }

                    /**
                     * Creates a new Structured Discussions topic on the given workflow.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#new-topic
                     */
                    interface NewTopic extends Flow {
                        submodule: "new-topic";
                        /**
                         * Text for new topic title.
                         */
                        nttopic: string;
                        /**
                         * Content for the topic's initial reply.
                         */
                        ntcontent: string;
                        /**
                         * Format of the new topic's initial reply (wikitext|html)
                         *
                         * Defaults to `wikitext`.
                         */
                        ntformat?: "html" | "wikitext";
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        nttoken: string;
                    }

                    /**
                     * Replies to a post.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#reply
                     */
                    interface Reply extends Flow {
                        submodule: "reply";
                        /**
                         * Post ID to reply to.
                         */
                        repreplyTo: string;
                        /**
                         * Content for new post.
                         */
                        repcontent: string;
                        /**
                         * Format of the new post (wikitext|html)
                         *
                         * Defaults to `wikitext`.
                         */
                        repformat?: "html" | "wikitext";
                        /**
                         * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                         *
                         * Sensitive parameter.
                         */
                        reptoken: string;
                    }

                    /**
                     * Retrieve information necessary to undo description edits.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#undo-edit-header
                     */
                    interface UndoEditHeader extends Flow {
                        submodule: "undo-edit-header";
                        /**
                         * Revision ID to start undo at.
                         */
                        uehstartId: string;
                        /**
                         * Revision ID to end undo at.
                         */
                        uehendId: string;
                    }

                    /**
                     * Retrieve information necessary to undo post edit.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#undo-edit-post
                     */
                    interface UndoEditPost extends Flow {
                        submodule: "undo-edit-post";
                        /**
                         * Revision ID to start undo at.
                         */
                        uepstartId: string;
                        /**
                         * Revision ID to end undo at.
                         */
                        uependId: string;
                    }

                    /**
                     * Retrieve information necessary to undo topic summary edits.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#undo-edit-topic-summary
                     */
                    interface UndoEditTopicSummary extends Flow {
                        submodule: "undo-edit-topic-summary";
                        /**
                         * Revision ID to start undo at.
                         */
                        uetsstartId: string;
                        /**
                         * Revision ID to end undo at.
                         */
                        uetsendId: string;
                    }

                    /**
                     * View a board description.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-header
                     */
                    interface ViewHeader extends Flow {
                        submodule: "view-header";
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vhformat?: "fixed-html" | "html" | "wikitext";
                        /**
                         * Load this revision, instead of the most recent.
                         */
                        vhrevId?: string;
                    }

                    /**
                     * View a post.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-post
                     */
                    interface ViewPost extends Flow {
                        submodule: "view-post";
                        /**
                         * ID of the post to view.
                         */
                        vppostId: string;
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vpformat?: "fixed-html" | "html" | "wikitext";
                    }

                    /**
                     * View the revision history of a post.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-post-history
                     */
                    interface ViewPostHistory extends Flow {
                        submodule: "view-post-history";
                        /**
                         * ID of the post for which to view revision history.
                         */
                        vphpostId: string;
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vphformat?: "fixed-html" | "html" | "wikitext";
                    }

                    /**
                     * View a topic.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-topic
                     */
                    interface ViewTopic extends Flow {
                        submodule: "view-topic";
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vtformat?: "fixed-html" | "html" | "wikitext";
                    }

                    /**
                     * View the revision history of a topic.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-topic-history
                     */
                    interface ViewTopicHistory extends Flow {
                        submodule: "view-topic-history";
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vthformat?: "fixed-html" | "html" | "wikitext";
                    }

                    /**
                     * View a topic summary.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-topic-summary
                     */
                    interface ViewTopicSummary extends Flow {
                        submodule: "view-topic-summary";
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        vtsformat?: "fixed-html" | "html" | "wikitext";
                        /**
                         * Load this revision, instead of the most recent.
                         */
                        vtsrevId?: string;
                    }

                    /**
                     * View a list of topics.
                     *
                     * @see https://www.mediawiki.org/wiki/Extension:Flow/API#view-topiclist
                     */
                    interface ViewTopicList extends Flow {
                        "submodule": "view-topiclist";
                        /**
                         * Direction to order the topics.
                         *
                         * Defaults to `fwd`.
                         */
                        "vtloffset-dir"?: "fwd" | "rev";
                        /**
                         * Sorting option of the topics, either `updated` (ordered by topic update time), or `newest` (ordered by topic creation time).
                         *
                         * Defaults to `user`.
                         */
                        "vtlsortby"?: "newest" | "updated" | "user";
                        /**
                         * Save sortby option to user preferences, if set.
                         */
                        "vtlsavesortby"?: boolean;
                        /**
                         * Offset value (in UUID format) to start fetching topics at; used only with `newest` ordering
                         */
                        "vtloffset-id"?: string;
                        /**
                         * Offset value (as a topic update timestamp, in `TS_MW` format (`YYYYMMDDHHMMSS`)), to start fetching topics at; used only with `updated` ordering
                         */
                        "vtloffset"?: string;
                        /**
                         * Includes the offset item in the results as well.
                         */
                        "vtlinclude-offset"?: boolean;
                        /**
                         * Number of topics to fetch.
                         *
                         * Defaults to 10.
                         */
                        "vtllimit"?: Limit;
                        /**
                         * Whether to respond with only the information required for the TOC.
                         */
                        "vtltoconly"?: boolean;
                        /**
                         * Format to return the content in.
                         *
                         * Defaults to `fixed-html`.
                         */
                        "vtlformat"?: "fixed-html" | "html" | "wikitext";
                    }
                }

                namespace ImageRotate.Generator {
                    /**
                     * Enumerate all categories.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                     */
                    interface AllCategories extends ImageRotate {
                        generator?: "allcategories";
                        /**
                         * The category to start enumerating from.
                         */
                        gacfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaccontinue?: string;
                        /**
                         * The category to stop enumerating at.
                         */
                        gacto?: string;
                        /**
                         * Search for all category titles that begin with this value.
                         */
                        gacprefix?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gacdir?: "ascending" | "descending";
                        /**
                         * Only return categories with at least this many members.
                         */
                        gacmin?: number;
                        /**
                         * Only return categories with at most this many members.
                         */
                        gacmax?: number;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gaclimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **size**: Adds number of pages in the category.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         *
                         * Defaults to an empty string.
                         */
                        gacprop?: OneOrMore<"hidden" | "size">;
                    }

                    /**
                     * List all deleted revisions by a user or in a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                     */
                    interface AllDeletedRevisions extends ImageRotate {
                        generator?: "alldeletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gadrprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gadrslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gadrcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                         */
                        gadrlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gadrparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gadrsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                         *
                         * @deprecated
                         */
                        gadrdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `adrdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gadrcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadruser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadrnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gadrstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        gadrend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                         * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                         *
                         * Defaults to `older`.
                         */
                        gadrdir?: "newer" | "older";
                        /**
                         * Start listing at this title.
                         */
                        gadrfrom?: string;
                        /**
                         * Stop listing at this title.
                         */
                        gadrto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gadrprefix?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gadrexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gadrtag?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gadrcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        gadrgeneratetitles?: boolean;
                    }

                    /**
                     * List all file usages, including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                     */
                    interface AllFileUsages extends ImageRotate {
                        generator?: "allfileusages";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gafcontinue?: string;
                        /**
                         * The title of the file to start enumerating from.
                         */
                        gaffrom?: string;
                        /**
                         * The title of the file to stop enumerating at.
                         */
                        gafto?: string;
                        /**
                         * Search for all file titles that begin with this value.
                         */
                        gafprefix?: string;
                        /**
                         * Only show distinct file titles. Cannot be used with afprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gafunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                         * - **title**: Adds the title of the file.
                         *
                         * Defaults to `title`.
                         */
                        gafprop?: OneOrMore<"ids" | "title">;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gaflimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gafdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all images sequentially.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                     */
                    interface AllImages extends ImageRotate {
                        generator?: "allimages";
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `name`.
                         */
                        gaisort?: "name" | "timestamp";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gaidir?: "ascending" | "descending" | "newer" | "older";
                        /**
                         * The image title to start enumerating from. Can only be used with aisort=name.
                         */
                        gaifrom?: string;
                        /**
                         * The image title to stop enumerating at. Can only be used with aisort=name.
                         */
                        gaito?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaicontinue?: string;
                        /**
                         * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                         */
                        gaistart?: string;
                        /**
                         * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                         */
                        gaiend?: string;
                        /**
                         * Which file information to get:
                         *
                         * - **timestamp**: Adds timestamp for the uploaded version.
                         * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                         * - **dimensions**: Alias for size.
                         * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                         *
                         * Defaults to `timestamp` and `url`.
                         */
                        gaiprop?: OneOrMore<
                            | "badfile"
                            | "bitdepth"
                            | "canonicaltitle"
                            | "comment"
                            | "commonmetadata"
                            | "dimensions"
                            | "extmetadata"
                            | "mediatype"
                            | "metadata"
                            | "mime"
                            | "parsedcomment"
                            | "sha1"
                            | "size"
                            | "timestamp"
                            | "url"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Search for all image titles that begin with this value. Can only be used with aisort=name.
                         */
                        gaiprefix?: string;
                        /**
                         * Limit to images with at least this many bytes.
                         */
                        gaiminsize?: number;
                        /**
                         * Limit to images with at most this many bytes.
                         */
                        gaimaxsize?: number;
                        /**
                         * SHA1 hash of image. Overrides aisha1base36.
                         */
                        gaisha1?: string;
                        /**
                         * SHA1 hash of image in base 36 (used in MediaWiki).
                         */
                        gaisha1base36?: string;
                        /**
                         * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                         */
                        gaiuser?: string;
                        /**
                         * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                         *
                         * Defaults to `all`.
                         */
                        gaifilterbots?: "all" | "bots" | "nobots";
                        /**
                         * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                         */
                        gaimime?: string | string[];
                        /**
                         * How many images in total to return.
                         *
                         * Defaults to 10.
                         */
                        gailimit?: Limit;
                    }

                    /**
                     * Enumerate all links that point to a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                     */
                    interface AllLinks extends ImageRotate {
                        generator?: "alllinks";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        galcontinue?: string;
                        /**
                         * The title of the link to start enumerating from.
                         */
                        galfrom?: string;
                        /**
                         * The title of the link to stop enumerating at.
                         */
                        galto?: string;
                        /**
                         * Search for all linked titles that begin with this value.
                         */
                        galprefix?: string;
                        /**
                         * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        galunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                         * - **title**: Adds the title of the link.
                         *
                         * Defaults to `title`.
                         */
                        galprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        galnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gallimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        galdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all pages sequentially in a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                     */
                    interface AllPages extends ImageRotate {
                        generator?: "allpages";
                        /**
                         * The page title to start enumerating from.
                         */
                        gapfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gapcontinue?: string;
                        /**
                         * The page title to stop enumerating at.
                         */
                        gapto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gapprefix?: string;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gapnamespace?: number;
                        /**
                         * Which pages to list.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                        /**
                         * Limit to pages with at least this many bytes.
                         */
                        gapminsize?: number;
                        /**
                         * Limit to pages with at most this many bytes.
                         */
                        gapmaxsize?: number;
                        /**
                         * Limit to protected pages only.
                         */
                        gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                        /**
                         * Filter protections based on protection level (must be used with apprtype= parameter).
                         */
                        gapprlevel?: string | string[];
                        /**
                         * Filter protections based on cascadingness (ignored when apprtype isn't set).
                         *
                         * Defaults to `all`.
                         */
                        gapprfiltercascade?: "all" | "cascading" | "noncascading";
                        /**
                         * Which protection expiry to filter the page on:
                         *
                         * - **indefinite**: Get only pages with indefinite protection expiry.
                         * - **definite**: Get only pages with a definite (specific) protection expiry.
                         * - **all**: Get pages with any protections expiry.
                         *
                         * Defaults to `all`.
                         */
                        gapprexpiry?: "all" | "definite" | "indefinite";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gaplimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gapdir?: "ascending" | "descending";
                    }

                    /**
                     * List all redirects to a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                     */
                    interface AllRedirects extends ImageRotate {
                        generator?: "allredirects";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garcontinue?: string;
                        /**
                         * The title of the redirect to start enumerating from.
                         */
                        garfrom?: string;
                        /**
                         * The title of the redirect to stop enumerating at.
                         */
                        garto?: string;
                        /**
                         * Search for all target pages that begin with this value.
                         */
                        garprefix?: string;
                        /**
                         * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        garunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                         * - **title**: Adds the title of the redirect.
                         * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                         * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                         *
                         * Defaults to `title`.
                         */
                        garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        garnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        garlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gardir?: "ascending" | "descending";
                    }

                    /**
                     * List all revisions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                     */
                    interface AllRevisions extends ImageRotate {
                        generator?: "allrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        garvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        garvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `garvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                         */
                        garvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        garvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        garvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                         *
                         * @deprecated
                         */
                        garvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `arvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        garvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         */
                        garvuser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        garvnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        garvstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        garvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                         * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                         *
                         * Defaults to `older`.
                         */
                        garvdir?: "newer" | "older";
                        /**
                         * Don't list revisions by this user.
                         */
                        garvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garvcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        garvgeneratetitles?: boolean;
                    }

                    /**
                     * List all transclusions (pages embedded using {{x}}), including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                     */
                    interface AllTransclusions extends ImageRotate {
                        generator?: "alltransclusions";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gatcontinue?: string;
                        /**
                         * The title of the transclusion to start enumerating from.
                         */
                        gatfrom?: string;
                        /**
                         * The title of the transclusion to stop enumerating at.
                         */
                        gatto?: string;
                        /**
                         * Search for all transcluded titles that begin with this value.
                         */
                        gatprefix?: string;
                        /**
                         * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gatunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                         * - **title**: Adds the title of the transclusion.
                         *
                         * Defaults to `title`.
                         */
                        gatprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 10.
                         */
                        gatnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gatlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gatdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                     */
                    interface Backlinks extends ImageRotate {
                        generator?: "backlinks";
                        /**
                         * Title to search. Cannot be used together with `blpageid`.
                         */
                        gbltitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with `bltitle`.
                         */
                        gblpageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gblcontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        gblnamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gbldir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        gblfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        gbllimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        gblredirect?: boolean;
                    }

                    /**
                     * List all categories the pages belong to.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                     */
                    interface Categories extends ImageRotate {
                        generator?: "categories";
                        /**
                         * Which additional properties to get for each category:
                         *
                         * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                         * - **timestamp**: Adds timestamp of when the category was added.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         */
                        gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                        /**
                         * Which kind of categories to show.
                         */
                        gclshow?: OneOrMore<Toggle<"hidden">>;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gcllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gclcontinue?: string;
                        /**
                         * Only list these categories. Useful for checking whether a certain page is in a certain category.
                         */
                        gclcategories?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gcldir?: "ascending" | "descending";
                    }

                    /**
                     * List all pages in a given category.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                     */
                    interface CategoryMembers extends ImageRotate {
                        generator?: "categorymembers";
                        /**
                         * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                         */
                        gcmtitle?: string;
                        /**
                         * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                         */
                        gcmpageid?: number;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                         * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                         * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                         * - **timestamp**: Adds the timestamp of when the page was included.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gcmprop?: OneOrMore<
                            "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                        >;
                        /**
                         * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gcmnamespace?: number | number[] | "*";
                        /**
                         * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                         *
                         * Defaults to `page`, `subcat`, and `file`.
                         */
                        gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gcmcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcmlimit?: Limit;
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `sortkey`.
                         */
                        gcmsort?: "sortkey" | "timestamp";
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gcmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                        /**
                         * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                         */
                        gcmstart?: string;
                        /**
                         * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                         */
                        gcmend?: string;
                        /**
                         * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmstarthexsortkey?: string;
                        /**
                         * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmendhexsortkey?: string;
                        /**
                         * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                         */
                        gcmstartsortkeyprefix?: string;
                        /**
                         * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                         */
                        gcmendsortkeyprefix?: string;
                        /**
                         * Use cmstarthexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmstartsortkey?: string;
                        /**
                         * Use cmendhexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmendsortkey?: string;
                    }

                    /**
                     * Get deleted revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                     * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                     */
                    interface DeletedRevisions extends ImageRotate {
                        generator?: "deletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gdrvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gdrvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gdrvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                         */
                        gdrvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gdrvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gdrvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                         *
                         * @deprecated
                         */
                        gdrvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `drvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gdrvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                         */
                        gdrvstart?: string;
                        /**
                         * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                         */
                        gdrvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                         * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                         *
                         * Defaults to `older`.
                         */
                        gdrvdir?: "newer" | "older";
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gdrvtag?: string;
                        /**
                         * Only list revisions by this user.
                         */
                        gdrvuser?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gdrvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdrvcontinue?: string;
                    }

                    /**
                     * List all files that are duplicates of the given files based on hash values.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                     */
                    interface DuplicateFiles extends ImageRotate {
                        generator?: "duplicatefiles";
                        /**
                         * How many duplicate files to return.
                         *
                         * Defaults to 10.
                         */
                        gdflimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdfcontinue?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gdfdir?: "ascending" | "descending";
                        /**
                         * Look only for files in the local repository.
                         */
                        gdflocalonly?: boolean;
                    }

                    /**
                     * Find all pages that embed (transclude) the given title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                     */
                    interface Embeddedin extends ImageRotate {
                        generator?: "embeddedin";
                        /**
                         * Title to search. Cannot be used together with eipageid.
                         */
                        geititle?: string;
                        /**
                         * Page ID to search. Cannot be used together with eititle.
                         */
                        geipageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geicontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        geinamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        geidir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        geifilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        geilimit?: Limit;
                    }

                    /**
                     * Enumerate pages that contain a given URL.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                     */
                    interface ExtUrlUsage extends ImageRotate {
                        generator?: "exturlusage";
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the ID of page.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **url**: Adds the URL used in the page.
                         *
                         * Defaults to `ids`, `title`, and `url`.
                         */
                        geuprop?: OneOrMore<"ids" | "title" | "url">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geucontinue?: string;
                        /**
                         * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                         *
                         * Defaults to an empty string.
                         */
                        geuprotocol?:
                            | ""
                            | "bitcoin"
                            | "ftp"
                            | "ftps"
                            | "geo"
                            | "git"
                            | "gopher"
                            | "http"
                            | "https"
                            | "irc"
                            | "ircs"
                            | "magnet"
                            | "mailto"
                            | "matrix"
                            | "mms"
                            | "news"
                            | "nntp"
                            | "redis"
                            | "sftp"
                            | "sip"
                            | "sips"
                            | "sms"
                            | "ssh"
                            | "svn"
                            | "tel"
                            | "telnet"
                            | "urn"
                            | "worldwind"
                            | "xmpp";
                        /**
                         * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                         */
                        geuquery?: string;
                        /**
                         * The page namespaces to enumerate.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        geunamespace?: number | number[] | "*";
                        /**
                         * How many pages to return.
                         *
                         * Defaults to 10.
                         */
                        geulimit?: Limit;
                        /**
                         * Expand protocol-relative URLs with the canonical protocol.
                         *
                         * @deprecated
                         */
                        geuexpandurl?: boolean;
                    }

                    /**
                     * Find all pages that use the given files.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                     */
                    interface FileUsage extends ImageRotate {
                        generator?: "fileusage";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gfunamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gfushow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gfulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gfucontinue?: string;
                    }

                    /**
                     * Returns all files contained on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                     */
                    interface Images extends ImageRotate {
                        generator?: "images";
                        /**
                         * How many files to return.
                         *
                         * Defaults to 10.
                         */
                        gimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gimcontinue?: string;
                        /**
                         * Only list these files. Useful for checking whether a certain page has a certain file.
                         */
                        gimimages?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gimdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that use the given image title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                     */
                    interface ImageUsage extends ImageRotate {
                        generator?: "imageusage";
                        /**
                         * Title to search. Cannot be used together with iupageid.
                         */
                        giutitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with iutitle.
                         */
                        giupageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giucontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        giunamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giudir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        giufilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        giulimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        giuredirect?: boolean;
                    }

                    /**
                     * Find all pages that link to the given interwiki link.
                     *
                     * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                     */
                    // tslint:disable-next-line:interface-name
                    interface IWBacklinks extends ImageRotate {
                        generator?: "iwbacklinks";
                        /**
                         * Prefix for the interwiki.
                         */
                        giwblprefix?: string;
                        /**
                         * Interwiki link to search for. Must be used with `iwblblprefix`.
                         */
                        giwbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giwblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        giwbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **iwprefix**: Adds the prefix of the interwiki.
                         * - **iwtitle**: Adds the title of the interwiki.
                         *
                         * Defaults to an empty string.
                         */
                        giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giwbldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given language link.
                     *
                     * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                     *
                     * Note that this may not consider language links added by extensions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                     */
                    interface LangBacklinks extends ImageRotate {
                        generator?: "langbacklinks";
                        /**
                         * Language for the language link.
                         */
                        glbllang?: string;
                        /**
                         * Language link to search for. Must be used with lbllang.
                         */
                        glbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        glbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **lllang**: Adds the language code of the language link.
                         * - **lltitle**: Adds the title of the language link.
                         *
                         * Defaults to an empty string.
                         */
                        glblprop?: OneOrMore<"lllang" | "lltitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        glbldir?: "ascending" | "descending";
                    }

                    /**
                     * Returns all links from the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                     */
                    interface Links extends ImageRotate {
                        generator?: "links";
                        /**
                         * Show links in these namespaces only.
                         */
                        gplnamespace?: number | number[] | "*";
                        /**
                         * How many links to return.
                         *
                         * Defaults to 10.
                         */
                        gpllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gplcontinue?: string;
                        /**
                         * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                         */
                        gpltitles?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gpldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                     */
                    interface LinksHere extends ImageRotate {
                        generator?: "linkshere";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        glhnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        glhshow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        glhlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glhcontinue?: string;
                    }

                    /**
                     * List all pages using a given page property.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                     */
                    interface PagesWithProp extends ImageRotate {
                        generator?: "pageswithprop";
                        /**
                         * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                         */
                        gpwppropname: string;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **value**: Adds the value of the page property.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gpwpcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpwplimit?: Limit;
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gpwpdir?: "ascending" | "descending";
                    }

                    /**
                     * Perform a prefix search for page titles.
                     *
                     * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                     */
                    interface PrefixSearch extends ImageRotate {
                        generator?: "prefixsearch";
                        /**
                         * Search string.
                         */
                        gpssearch: string;
                        /**
                         * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                         *
                         * Defaults to 0.
                         */
                        gpsnamespace?: number | number[] | "*";
                        /**
                         * Maximum number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gpslimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpsoffset?: number;
                        /**
                         * Search profile to use.
                         *
                         * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                         * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                         * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                         * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                         * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gpsprofile?:
                            | "classic"
                            | "engine_autoselect"
                            | "fast-fuzzy"
                            | "fuzzy"
                            | "fuzzy-subphrases"
                            | "normal"
                            | "normal-subphrases"
                            | "strict";
                    }

                    /**
                     * List all titles protected from creation.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                     */
                    interface ProtectedTitles extends ImageRotate {
                        generator?: "protectedtitles";
                        /**
                         * Only list titles in these namespaces.
                         */
                        gptnamespace?: number | number[] | "*";
                        /**
                         * Only list titles with these protection levels.
                         */
                        gptlevel?: string | string[];
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gptlimit?: Limit;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                         * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                         *
                         * Defaults to `older`.
                         */
                        gptdir?: "newer" | "older";
                        /**
                         * Start listing at this protection timestamp.
                         */
                        gptstart?: string;
                        /**
                         * Stop listing at this protection timestamp.
                         */
                        gptend?: string;
                        /**
                         * Which properties to get:
                         *
                         * - **timestamp**: Adds the timestamp of when protection was added.
                         * - **user**: Adds the user that added the protection.
                         * - **userid**: Adds the user ID that added the protection.
                         * - **comment**: Adds the comment for the protection.
                         * - **parsedcomment**: Adds the parsed comment for the protection.
                         * - **expiry**: Adds the timestamp of when the protection will be lifted.
                         * - **level**: Adds the protection level.
                         *
                         * Defaults to `timestamp` and `level`.
                         */
                        gptprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "level"
                            | "parsedcomment"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gptcontinue?: string;
                    }

                    /**
                     * Get a list provided by a QueryPage-based special page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                     */
                    interface QueryPage extends ImageRotate {
                        generator?: "querypage";
                        /**
                         * The name of the special page. Note, this is case-sensitive.
                         */
                        gqppage: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gqpoffset?: number;
                        /**
                         * Number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gqplimit?: Limit;
                    }

                    /**
                     * Get a set of random pages.
                     *
                     * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                     */
                    interface Random extends ImageRotate {
                        generator?: "random";
                        /**
                         * Return pages in these namespaces only.
                         */
                        grnnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `nonredirects`.
                         */
                        grnfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Use `rnfilterredir=redirects` instead.
                         *
                         * @deprecated
                         */
                        grnredirect?: boolean;
                        /**
                         * Limit how many random pages will be returned.
                         *
                         * Defaults to 1.
                         */
                        grnlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grncontinue?: string;
                    }

                    /**
                     * Enumerate recent changes.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                     */
                    interface RecentChanges extends ImageRotate {
                        generator?: "recentchanges";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        grcstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        grcend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                         * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                         *
                         * Defaults to `older`.
                         */
                        grcdir?: "newer" | "older";
                        /**
                         * Filter changes to only these namespaces.
                         */
                        grcnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        grcuser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        grcexcludeuser?: string;
                        /**
                         * Only list changes tagged with this tag.
                         */
                        grctag?: string;
                        /**
                         * Include additional pieces of information:
                         *
                         * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **flags**: Adds flags for the edit.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **title**: Adds the page title of the edit.
                         * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                         * - **sizes**: Adds the new and old page length in bytes.
                         * - **redirect**: Tags edit if page is a redirect.
                         * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                         * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                         * - **tags**: Lists tags for the entry.
                         * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         *
                         * Defaults to `title`, `timestamp`, and `ids`.
                         */
                        grcprop?: OneOrMore<
                            | "comment"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrolled"
                            | "redirect"
                            | "sha1"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                         *
                         * @deprecated
                         */
                        grctoken?: string;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                         */
                        grcshow?: OneOrMore<
                            | Toggle<
                                  | "anon"
                                  | "autopatrolled"
                                  | "bot"
                                  | "minor"
                                  | "oresreview"
                                  | "patrolled"
                                  | "redirect"
                              >
                            | "unpatrolled"
                        >;
                        /**
                         * How many total changes to return.
                         *
                         * Defaults to 10.
                         */
                        grclimit?: Limit;
                        /**
                         * Which types of changes to show.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Only list changes which are the latest revision.
                         */
                        grctoponly?: boolean;
                        /**
                         * Filter entries to those related to a page.
                         */
                        grctitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grccontinue?: string;
                        /**
                         * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                         */
                        grcgeneraterevisions?: boolean;
                        /**
                         * Only list changes that touch the named slot.
                         */
                        grcslot?: "main" | "mediainfo";
                    }

                    /**
                     * Returns all redirects to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                     */
                    interface Redirects extends ImageRotate {
                        generator?: "redirects";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each redirect.
                         * - **title**: Title of each redirect.
                         * - **fragment**: Fragment of each redirect, if any.
                         *
                         * Defaults to `pageid` and `title`.
                         */
                        grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        grdnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **fragment**: Only show redirects with a fragment.
                         * - **!fragment**: Only show redirects without a fragment.
                         */
                        grdshow?: OneOrMore<Toggle<"fragment">>;
                        /**
                         * How many redirects to return.
                         *
                         * Defaults to 10.
                         */
                        grdlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grdcontinue?: string;
                    }

                    /**
                     * Get revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get data about a set of pages (last revision), by setting titles or pageids.
                     * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                     * - Get data about a set of revisions by setting their IDs with revids.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                     */
                    interface Revisions extends ImageRotate {
                        generator?: "revisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        grvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flagged"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        grvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `grvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                         */
                        grvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        grvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        grvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                         *
                         * @deprecated
                         */
                        grvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `rvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        grvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvstartid?: number;
                        /**
                         * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvendid?: number;
                        /**
                         * From which revision timestamp to start enumeration.
                         */
                        grvstart?: string;
                        /**
                         * Enumerate up to this timestamp.
                         */
                        grvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                         * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                         *
                         * Defaults to `older`.
                         */
                        grvdir?: "newer" | "older";
                        /**
                         * Only include revisions made by user.
                         */
                        grvuser?: string;
                        /**
                         * Exclude revisions made by user.
                         */
                        grvexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        grvtag?: string;
                        /**
                         * Which tokens to obtain for each revision.
                         *
                         * @deprecated
                         */
                        grvtoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grvcontinue?: string;
                    }

                    /**
                     * Perform a full text search.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                     */
                    interface Search extends ImageRotate {
                        generator?: "search";
                        /**
                         * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                         */
                        gsrsearch: string;
                        /**
                         * Search only within these namespaces.
                         *
                         * Defaults to 0.
                         */
                        gsrnamespace?: number | number[] | "*";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gsrlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gsroffset?: number;
                        /**
                         * Query independent profile to use (affects ranking algorithm).
                         *
                         * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                         * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                         * - **empty**: Ranking based solely on query dependent features (for debug only).
                         * - **wsum_inclinks**: Weighted sum based on incoming links
                         * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                         * - **popular_inclinks_pv**: Ranking based primarily on page views
                         * - **popular_inclinks**: Ranking based primarily on incoming link counts
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gsrqiprofile?: string;
                        /**
                         * Which type of search to perform.
                         */
                        gsrwhat?: "nearmatch" | "text" | "title";
                        /**
                         * Which metadata to return.
                         *
                         * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                         */
                        gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                        /**
                         * Which properties to return:
                         *
                         * - **size**: Adds the size of the page in bytes.
                         * - **wordcount**: Adds the word count of the page.
                         * - **timestamp**: Adds the timestamp of when the page was last edited.
                         * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                         * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                         * - **redirecttitle**: Adds the title of the matching redirect.
                         * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                         * - **sectiontitle**: Adds the title of the matching section.
                         * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                         * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                         * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                         * - **score**: Deprecated. Ignored.
                         * - **hasrelated**: Deprecated. Ignored.
                         * - **extensiondata**: Adds extra data generated by extensions.
                         *
                         * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                         */
                        gsrprop?: OneOrMore<
                            | "categorysnippet"
                            | "extensiondata"
                            | "hasrelated"
                            | "isfilematch"
                            | "redirectsnippet"
                            | "redirecttitle"
                            | "score"
                            | "sectionsnippet"
                            | "sectiontitle"
                            | "size"
                            | "snippet"
                            | "timestamp"
                            | "titlesnippet"
                            | "wordcount"
                        >;
                        /**
                         * Include interwiki results in the search, if available.
                         */
                        gsrinterwiki?: boolean;
                        /**
                         * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                         */
                        gsrenablerewrites?: boolean;
                        /**
                         * Set the sort order of returned results.
                         *
                         * Defaults to `relevance`.
                         */
                        gsrsort?:
                            | "create_timestamp_asc"
                            | "create_timestamp_desc"
                            | "incoming_links_asc"
                            | "incoming_links_desc"
                            | "just_match"
                            | "last_edit_asc"
                            | "last_edit_desc"
                            | "none"
                            | "random"
                            | "relevance"
                            | "user_random";
                    }

                    /**
                     * Returns all pages transcluded on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                     */
                    interface Templates extends ImageRotate {
                        generator?: "templates";
                        /**
                         * Show templates in these namespaces only.
                         */
                        gtlnamespace?: number | number[] | "*";
                        /**
                         * How many templates to return.
                         *
                         * Defaults to 10.
                         */
                        gtllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gtlcontinue?: string;
                        /**
                         * Only list these templates. Useful for checking whether a certain page uses a certain template.
                         */
                        gtltemplates?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gtldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that transclude the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                     */
                    interface Transcludedin extends ImageRotate {
                        generator?: "transcludedin";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gtinamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gtishow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gtilimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gticontinue?: string;
                    }

                    /**
                     * Get recent changes to pages in the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                     */
                    interface Watchlist extends ImageRotate {
                        generator?: "watchlist";
                        /**
                         * Include multiple revisions of the same page within given timeframe.
                         */
                        gwlallrev?: boolean;
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gwlstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        gwlend?: string;
                        /**
                         * Filter changes to only the given namespaces.
                         */
                        gwlnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        gwluser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        gwlexcludeuser?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                         * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                         *
                         * Defaults to `older`.
                         */
                        gwldir?: "newer" | "older";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwllimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **ids**: Adds revision IDs and page IDs.
                         * - **title**: Adds title of the page.
                         * - **flags**: Adds flags for the edit.
                         * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **patrol**: Tags edits that are patrolled.
                         * - **sizes**: Adds the old and new lengths of the page.
                         * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                         * - **loginfo**: Adds log information where appropriate.
                         * - **tags**: Lists tags for the entry.
                         * - **expiry**: Adds the expiry time.
                         *
                         * Defaults to `ids`, `title`, and `flags`.
                         */
                        gwlprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "notificationtimestamp"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrol"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                         */
                        gwlshow?: OneOrMore<
                            Toggle<
                                | "anon"
                                | "autopatrolled"
                                | "bot"
                                | "minor"
                                | "oresreview"
                                | "patrolled"
                                | "unread"
                            >
                        >;
                        /**
                         * Which types of changes to show:
                         *
                         * - **edit**: Regular page edits.
                         * - **new**: Page creations.
                         * - **log**: Log entries.
                         * - **external**: External changes.
                         * - **categorize**: Category membership changes.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Used along with wltoken to access a different user's watchlist.
                         */
                        gwlowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwltoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwlcontinue?: string;
                    }

                    /**
                     * Get all pages on the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                     */
                    interface WatchlistRaw extends ImageRotate {
                        generator?: "watchlistraw";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwrcontinue?: string;
                        /**
                         * Only list pages in the given namespaces.
                         */
                        gwrnamespace?: number | number[] | "*";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwrlimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **changed**: Adds timestamp of when the user was last notified about the edit.
                         */
                        gwrprop?: OneOrMore<"changed">;
                        /**
                         * Only list items that meet these criteria.
                         */
                        gwrshow?: OneOrMore<Toggle<"changed">>;
                        /**
                         * Used along with wrtoken to access a different user's watchlist.
                         */
                        gwrowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwrtoken?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gwrdir?: "ascending" | "descending";
                        /**
                         * Title (with namespace prefix) to begin enumerating from.
                         */
                        gwrfromtitle?: string;
                        /**
                         * Title (with namespace prefix) to stop enumerating at.
                         */
                        gwrtotitle?: string;
                    }
                }

                namespace Purge.Generator {
                    /**
                     * Enumerate all categories.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                     */
                    interface AllCategories extends Purge {
                        generator?: "allcategories";
                        /**
                         * The category to start enumerating from.
                         */
                        gacfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaccontinue?: string;
                        /**
                         * The category to stop enumerating at.
                         */
                        gacto?: string;
                        /**
                         * Search for all category titles that begin with this value.
                         */
                        gacprefix?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gacdir?: "ascending" | "descending";
                        /**
                         * Only return categories with at least this many members.
                         */
                        gacmin?: number;
                        /**
                         * Only return categories with at most this many members.
                         */
                        gacmax?: number;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gaclimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **size**: Adds number of pages in the category.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         *
                         * Defaults to an empty string.
                         */
                        gacprop?: OneOrMore<"hidden" | "size">;
                    }

                    /**
                     * List all deleted revisions by a user or in a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                     */
                    interface AllDeletedRevisions extends Purge {
                        generator?: "alldeletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gadrprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gadrslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gadrcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                         */
                        gadrlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gadrparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gadrsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                         *
                         * @deprecated
                         */
                        gadrdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `adrdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gadrcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadruser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadrnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gadrstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        gadrend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                         * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                         *
                         * Defaults to `older`.
                         */
                        gadrdir?: "newer" | "older";
                        /**
                         * Start listing at this title.
                         */
                        gadrfrom?: string;
                        /**
                         * Stop listing at this title.
                         */
                        gadrto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gadrprefix?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gadrexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gadrtag?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gadrcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        gadrgeneratetitles?: boolean;
                    }

                    /**
                     * List all file usages, including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                     */
                    interface AllFileUsages extends Purge {
                        generator?: "allfileusages";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gafcontinue?: string;
                        /**
                         * The title of the file to start enumerating from.
                         */
                        gaffrom?: string;
                        /**
                         * The title of the file to stop enumerating at.
                         */
                        gafto?: string;
                        /**
                         * Search for all file titles that begin with this value.
                         */
                        gafprefix?: string;
                        /**
                         * Only show distinct file titles. Cannot be used with afprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gafunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                         * - **title**: Adds the title of the file.
                         *
                         * Defaults to `title`.
                         */
                        gafprop?: OneOrMore<"ids" | "title">;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gaflimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gafdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all images sequentially.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                     */
                    interface AllImages extends Purge {
                        generator?: "allimages";
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `name`.
                         */
                        gaisort?: "name" | "timestamp";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gaidir?: "ascending" | "descending" | "newer" | "older";
                        /**
                         * The image title to start enumerating from. Can only be used with aisort=name.
                         */
                        gaifrom?: string;
                        /**
                         * The image title to stop enumerating at. Can only be used with aisort=name.
                         */
                        gaito?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaicontinue?: string;
                        /**
                         * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                         */
                        gaistart?: string;
                        /**
                         * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                         */
                        gaiend?: string;
                        /**
                         * Which file information to get:
                         *
                         * - **timestamp**: Adds timestamp for the uploaded version.
                         * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                         * - **dimensions**: Alias for size.
                         * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                         *
                         * Defaults to `timestamp` and `url`.
                         */
                        gaiprop?: OneOrMore<
                            | "badfile"
                            | "bitdepth"
                            | "canonicaltitle"
                            | "comment"
                            | "commonmetadata"
                            | "dimensions"
                            | "extmetadata"
                            | "mediatype"
                            | "metadata"
                            | "mime"
                            | "parsedcomment"
                            | "sha1"
                            | "size"
                            | "timestamp"
                            | "url"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Search for all image titles that begin with this value. Can only be used with aisort=name.
                         */
                        gaiprefix?: string;
                        /**
                         * Limit to images with at least this many bytes.
                         */
                        gaiminsize?: number;
                        /**
                         * Limit to images with at most this many bytes.
                         */
                        gaimaxsize?: number;
                        /**
                         * SHA1 hash of image. Overrides aisha1base36.
                         */
                        gaisha1?: string;
                        /**
                         * SHA1 hash of image in base 36 (used in MediaWiki).
                         */
                        gaisha1base36?: string;
                        /**
                         * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                         */
                        gaiuser?: string;
                        /**
                         * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                         *
                         * Defaults to `all`.
                         */
                        gaifilterbots?: "all" | "bots" | "nobots";
                        /**
                         * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                         */
                        gaimime?: string | string[];
                        /**
                         * How many images in total to return.
                         *
                         * Defaults to 10.
                         */
                        gailimit?: Limit;
                    }

                    /**
                     * Enumerate all links that point to a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                     */
                    interface AllLinks extends Purge {
                        generator?: "alllinks";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        galcontinue?: string;
                        /**
                         * The title of the link to start enumerating from.
                         */
                        galfrom?: string;
                        /**
                         * The title of the link to stop enumerating at.
                         */
                        galto?: string;
                        /**
                         * Search for all linked titles that begin with this value.
                         */
                        galprefix?: string;
                        /**
                         * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        galunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                         * - **title**: Adds the title of the link.
                         *
                         * Defaults to `title`.
                         */
                        galprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        galnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gallimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        galdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all pages sequentially in a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                     */
                    interface AllPages extends Purge {
                        generator?: "allpages";
                        /**
                         * The page title to start enumerating from.
                         */
                        gapfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gapcontinue?: string;
                        /**
                         * The page title to stop enumerating at.
                         */
                        gapto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gapprefix?: string;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gapnamespace?: number;
                        /**
                         * Which pages to list.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                        /**
                         * Limit to pages with at least this many bytes.
                         */
                        gapminsize?: number;
                        /**
                         * Limit to pages with at most this many bytes.
                         */
                        gapmaxsize?: number;
                        /**
                         * Limit to protected pages only.
                         */
                        gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                        /**
                         * Filter protections based on protection level (must be used with apprtype= parameter).
                         */
                        gapprlevel?: string | string[];
                        /**
                         * Filter protections based on cascadingness (ignored when apprtype isn't set).
                         *
                         * Defaults to `all`.
                         */
                        gapprfiltercascade?: "all" | "cascading" | "noncascading";
                        /**
                         * Which protection expiry to filter the page on:
                         *
                         * - **indefinite**: Get only pages with indefinite protection expiry.
                         * - **definite**: Get only pages with a definite (specific) protection expiry.
                         * - **all**: Get pages with any protections expiry.
                         *
                         * Defaults to `all`.
                         */
                        gapprexpiry?: "all" | "definite" | "indefinite";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gaplimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gapdir?: "ascending" | "descending";
                    }

                    /**
                     * List all redirects to a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                     */
                    interface AllRedirects extends Purge {
                        generator?: "allredirects";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garcontinue?: string;
                        /**
                         * The title of the redirect to start enumerating from.
                         */
                        garfrom?: string;
                        /**
                         * The title of the redirect to stop enumerating at.
                         */
                        garto?: string;
                        /**
                         * Search for all target pages that begin with this value.
                         */
                        garprefix?: string;
                        /**
                         * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        garunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                         * - **title**: Adds the title of the redirect.
                         * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                         * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                         *
                         * Defaults to `title`.
                         */
                        garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        garnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        garlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gardir?: "ascending" | "descending";
                    }

                    /**
                     * List all revisions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                     */
                    interface AllRevisions extends Purge {
                        generator?: "allrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        garvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        garvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `garvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                         */
                        garvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        garvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        garvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                         *
                         * @deprecated
                         */
                        garvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `arvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        garvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         */
                        garvuser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        garvnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        garvstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        garvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                         * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                         *
                         * Defaults to `older`.
                         */
                        garvdir?: "newer" | "older";
                        /**
                         * Don't list revisions by this user.
                         */
                        garvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garvcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        garvgeneratetitles?: boolean;
                    }

                    /**
                     * List all transclusions (pages embedded using {{x}}), including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                     */
                    interface AllTransclusions extends Purge {
                        generator?: "alltransclusions";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gatcontinue?: string;
                        /**
                         * The title of the transclusion to start enumerating from.
                         */
                        gatfrom?: string;
                        /**
                         * The title of the transclusion to stop enumerating at.
                         */
                        gatto?: string;
                        /**
                         * Search for all transcluded titles that begin with this value.
                         */
                        gatprefix?: string;
                        /**
                         * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gatunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                         * - **title**: Adds the title of the transclusion.
                         *
                         * Defaults to `title`.
                         */
                        gatprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 10.
                         */
                        gatnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gatlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gatdir?: "ascending" | "descending";
                    }

                    /**
                     * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                     */
                    interface AutomaticTranslationDenseLanguages extends Purge {
                        "generator"?: "automatictranslationdenselanguages";
                        /**
                         * The Wikidata ID.
                         */
                        "gqid": string;
                        /**
                         * A boolean value indicating whether the section titles should be included in the response.
                         */
                        "gsection-titles"?: boolean;
                    }

                    /**
                     * Find all pages that link to the given page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                     */
                    interface Backlinks extends Purge {
                        generator?: "backlinks";
                        /**
                         * Title to search. Cannot be used together with `blpageid`.
                         */
                        gbltitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with `bltitle`.
                         */
                        gblpageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gblcontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        gblnamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gbldir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        gblfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        gbllimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        gblredirect?: boolean;
                    }

                    /**
                     * List all categories the pages belong to.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                     */
                    interface Categories extends Purge {
                        generator?: "categories";
                        /**
                         * Which additional properties to get for each category:
                         *
                         * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                         * - **timestamp**: Adds timestamp of when the category was added.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         */
                        gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                        /**
                         * Which kind of categories to show.
                         */
                        gclshow?: OneOrMore<Toggle<"hidden">>;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gcllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gclcontinue?: string;
                        /**
                         * Only list these categories. Useful for checking whether a certain page is in a certain category.
                         */
                        gclcategories?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gcldir?: "ascending" | "descending";
                    }

                    /**
                     * List all pages in a given category.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                     */
                    interface CategoryMembers extends Purge {
                        generator?: "categorymembers";
                        /**
                         * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                         */
                        gcmtitle?: string;
                        /**
                         * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                         */
                        gcmpageid?: number;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                         * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                         * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                         * - **timestamp**: Adds the timestamp of when the page was included.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gcmprop?: OneOrMore<
                            "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                        >;
                        /**
                         * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gcmnamespace?: number | number[] | "*";
                        /**
                         * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                         *
                         * Defaults to `page`, `subcat`, and `file`.
                         */
                        gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gcmcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcmlimit?: Limit;
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `sortkey`.
                         */
                        gcmsort?: "sortkey" | "timestamp";
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gcmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                        /**
                         * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                         */
                        gcmstart?: string;
                        /**
                         * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                         */
                        gcmend?: string;
                        /**
                         * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmstarthexsortkey?: string;
                        /**
                         * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmendhexsortkey?: string;
                        /**
                         * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                         */
                        gcmstartsortkeyprefix?: string;
                        /**
                         * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                         */
                        gcmendsortkeyprefix?: string;
                        /**
                         * Use cmstarthexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmstartsortkey?: string;
                        /**
                         * Use cmendhexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmendsortkey?: string;
                    }

                    /**
                     * Enumerate all pages that have custom review configurations.
                     */
                    interface Configuredpages extends Purge {
                        generator?: "configuredpages";
                        /**
                         * Start listing at this page ID.
                         */
                        gcpstart?: number;
                        /**
                         * Stop listing at this page ID.
                         */
                        gcpend?: number;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gcpdir?: "newer" | "older";
                        /**
                         * The namespaces to enumerate.
                         */
                        gcpnamespace?: number | number[] | "*";
                        /**
                         * The default page view version.
                         */
                        gcpdefault?: "latest" | "stable";
                        /**
                         * Review/autoreview restriction level.
                         */
                        gcpautoreview?: "none" | "sysop";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcplimit?: Limit;
                    }

                    /**
                     * Query Content Translation database for translations.
                     */
                    interface ContentTranslation extends Purge {
                        generator?: "contenttranslation";
                        /**
                         * Translation ID.
                         */
                        gtranslationid?: string;
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * The title of the source page.
                         */
                        gsourcetitle?: string;
                        /**
                         * The title of the source section (optional).
                         */
                        gsourcesectiontitle?: string;
                        /**
                         * The maximum number of translations to fetch.
                         *
                         * Defaults to 100.
                         */
                        glimit?: Limit;
                        /**
                         * Offset into result set (optional).
                         */
                        goffset?: string;
                        /**
                         * State of the translation.
                         */
                        gtype?: "draft" | "published";
                        /**
                         * The usecase for which the translations are being fetched (optional).
                         */
                        gusecase?:
                            | "desktop-editor-draft"
                            | "translation-corpora-units"
                            | "unified-dashboard";
                    }

                    /**
                     * Get suggestion lists for Content Translation.
                     */
                    interface ContentTranslationSuggestions extends Purge {
                        generator?: "contenttranslationsuggestions";
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * Return suggestions only from a particular list
                         */
                        glistid?: string;
                        /**
                         * The maximum number of translation suggestions to fetch.
                         *
                         * Defaults to 10.
                         */
                        glimit?: Limit;
                        /**
                         * Offset for paginated results.
                         */
                        goffset?: string;
                        /**
                         * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                         */
                        gseed?: number;
                    }

                    /**
                     * Get deleted revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                     * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                     */
                    interface DeletedRevisions extends Purge {
                        generator?: "deletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gdrvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gdrvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gdrvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                         */
                        gdrvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gdrvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gdrvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                         *
                         * @deprecated
                         */
                        gdrvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `drvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gdrvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                         */
                        gdrvstart?: string;
                        /**
                         * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                         */
                        gdrvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                         * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                         *
                         * Defaults to `older`.
                         */
                        gdrvdir?: "newer" | "older";
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gdrvtag?: string;
                        /**
                         * Only list revisions by this user.
                         */
                        gdrvuser?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gdrvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdrvcontinue?: string;
                    }

                    /**
                     * List all files that are duplicates of the given files based on hash values.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                     */
                    interface DuplicateFiles extends Purge {
                        generator?: "duplicatefiles";
                        /**
                         * How many duplicate files to return.
                         *
                         * Defaults to 10.
                         */
                        gdflimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdfcontinue?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gdfdir?: "ascending" | "descending";
                        /**
                         * Look only for files in the local repository.
                         */
                        gdflocalonly?: boolean;
                    }

                    /**
                     * Find all pages that embed (transclude) the given title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                     */
                    interface Embeddedin extends Purge {
                        generator?: "embeddedin";
                        /**
                         * Title to search. Cannot be used together with eipageid.
                         */
                        geititle?: string;
                        /**
                         * Page ID to search. Cannot be used together with eititle.
                         */
                        geipageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geicontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        geinamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        geidir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        geifilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        geilimit?: Limit;
                    }

                    /**
                     * Enumerate pages that contain a given URL.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                     */
                    interface ExtUrlUsage extends Purge {
                        generator?: "exturlusage";
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the ID of page.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **url**: Adds the URL used in the page.
                         *
                         * Defaults to `ids`, `title`, and `url`.
                         */
                        geuprop?: OneOrMore<"ids" | "title" | "url">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geucontinue?: string;
                        /**
                         * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                         *
                         * Defaults to an empty string.
                         */
                        geuprotocol?:
                            | ""
                            | "bitcoin"
                            | "ftp"
                            | "ftps"
                            | "geo"
                            | "git"
                            | "gopher"
                            | "http"
                            | "https"
                            | "irc"
                            | "ircs"
                            | "magnet"
                            | "mailto"
                            | "matrix"
                            | "mms"
                            | "news"
                            | "nntp"
                            | "redis"
                            | "sftp"
                            | "sip"
                            | "sips"
                            | "sms"
                            | "ssh"
                            | "svn"
                            | "tel"
                            | "telnet"
                            | "urn"
                            | "worldwind"
                            | "xmpp";
                        /**
                         * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                         */
                        geuquery?: string;
                        /**
                         * The page namespaces to enumerate.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        geunamespace?: number | number[] | "*";
                        /**
                         * How many pages to return.
                         *
                         * Defaults to 10.
                         */
                        geulimit?: Limit;
                        /**
                         * Expand protocol-relative URLs with the canonical protocol.
                         *
                         * @deprecated
                         */
                        geuexpandurl?: boolean;
                    }

                    /**
                     * Find all pages that use the given files.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                     */
                    interface FileUsage extends Purge {
                        generator?: "fileusage";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gfunamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gfushow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gfulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gfucontinue?: string;
                    }

                    /**
                     * Returns pages having coordinates that are located in a certain area.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                     */
                    interface GeoSearch extends Purge {
                        generator?: "geosearch";
                        /**
                         * Coordinate around which to search.
                         *
                         * Format: Latitude and longitude separated by pipe (`|`).
                         */
                        ggscoord?: string;
                        /**
                         * Title of page around which to search.
                         */
                        ggspage?: string;
                        /**
                         * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                         */
                        ggsbbox?: string;
                        /**
                         * Search radius in meters.
                         *
                         * Defaults to 500.
                         */
                        ggsradius?: number;
                        /**
                         * Restrict search to objects no larger than this, in meters.
                         */
                        ggsmaxdim?: number;
                        /**
                         * Set the sort order of returned results.
                         *
                         * - **distance**: Rank pages by their distance to the center.
                         * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                         *
                         * Defaults to `distance`.
                         */
                        ggssort?: "distance" | "relevance";
                        /**
                         * Maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        ggslimit?: Limit;
                        /**
                         * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `earth`.
                         */
                        ggsglobe?: "earth";
                        /**
                         * Namespaces to search.
                         *
                         * Defaults to 0.
                         */
                        ggsnamespace?: number | number[] | "*";
                        /**
                         * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                         *
                         * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                         * - **name**: Name of the object.
                         * - **dim**: Approximate size of the object in meters.
                         * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                         * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                         * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `globe`.
                         */
                        ggsprop?: OneOrMore<
                            "country" | "dim" | "globe" | "name" | "region" | "type"
                        >;
                        /**
                         * Which kind of coordinates to return.
                         *
                         * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                         * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                         * - **all**: Return both primary and secondary coordinates.
                         *
                         * Defaults to `primary`.
                         */
                        ggsprimary?: "all" | "primary" | "secondary";
                        /**
                         * Whether debug information should be returned.
                         */
                        ggsdebug?: boolean;
                    }

                    /**
                     * Get task recommendations suitable for newcomers.
                     *
                     * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                     */
                    interface GrowthTasks extends Purge {
                        generator?: "growthtasks";
                        /**
                         * Task types to limit results to. Leave empty to receive all suggestions.
                         *
                         * - **copyedit**: Copyedit
                         * - **expand**: Expand short articles
                         * - **links**: Add links between articles
                         * - **references**: Find references
                         * - **update**: Update articles
                         * - **link-recommendation**: Add links between articles
                         */
                        ggttasktypes?: OneOrMore<
                            | "copyedit"
                            | "expand"
                            | "image-recommendation"
                            | "link-recommendation"
                            | "links"
                            | "references"
                            | "section-image-recommendation"
                            | "update"
                        >;
                        /**
                         * Article topics to prefer in task suggestions.
                         *
                         * - **architecture**: Architecture
                         * - **art**: Art
                         * - **comics-and-anime**: Comics and anime
                         * - **entertainment**: Entertainment
                         * - **fashion**: Fashion
                         * - **literature**: Literature
                         * - **music**: Music
                         * - **performing-arts**: Performing arts
                         * - **sports**: Sports
                         * - **tv-and-film**: TV and film
                         * - **video-games**: Video games
                         * - **biography**: Biography (all)
                         * - **women**: Biography (women)
                         * - **business-and-economics**: Business and economics
                         * - **education**: Education
                         * - **food-and-drink**: Food and drink
                         * - **history**: History
                         * - **military-and-warfare**: Military and warfare
                         * - **philosophy-and-religion**: Philosophy and religion
                         * - **politics-and-government**: Politics and government
                         * - **society**: Society
                         * - **transportation**: Transportation
                         * - **biology**: Biology
                         * - **chemistry**: Chemistry
                         * - **computers-and-internet**: Computers and internet
                         * - **earth-and-environment**: Earth and environment
                         * - **engineering**: Engineering
                         * - **general-science**: General science
                         * - **mathematics**: Mathematics
                         * - **medicine-and-health**: Medicine and health
                         * - **physics**: Physics
                         * - **technology**: Technology
                         * - **africa**: Africa
                         * - **asia**: Asia
                         * - **central-america**: Central America
                         * - **europe**: Europe
                         * - **north-america**: North America
                         * - **oceania**: Oceania
                         * - **south-america**: South America
                         */
                        ggttopics?: OneOrMore<
                            | "africa"
                            | "architecture"
                            | "art"
                            | "asia"
                            | "biography"
                            | "biology"
                            | "business-and-economics"
                            | "central-america"
                            | "chemistry"
                            | "comics-and-anime"
                            | "computers-and-internet"
                            | "earth-and-environment"
                            | "education"
                            | "engineering"
                            | "entertainment"
                            | "europe"
                            | "fashion"
                            | "food-and-drink"
                            | "general-science"
                            | "history"
                            | "literature"
                            | "mathematics"
                            | "medicine-and-health"
                            | "military-and-warfare"
                            | "music"
                            | "north-america"
                            | "oceania"
                            | "performing-arts"
                            | "philosophy-and-religion"
                            | "physics"
                            | "politics-and-government"
                            | "society"
                            | "south-america"
                            | "sports"
                            | "technology"
                            | "transportation"
                            | "tv-and-film"
                            | "video-games"
                            | "women"
                        >;
                        /**
                         * Matching mode for topics.
                         */
                        ggttopicsmode?: "AND" | "OR";
                        /**
                         * Maximum number of task suggestions to return.
                         */
                        ggtlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        ggtoffset?: number;
                        /**
                         * Add debug data to the output.
                         */
                        ggtdebug?: boolean;
                        /**
                         * Page IDs to exclude from the query.
                         */
                        ggtexcludepageids?: number | number[];
                    }

                    /**
                     * Returns all files contained on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                     */
                    interface Images extends Purge {
                        generator?: "images";
                        /**
                         * How many files to return.
                         *
                         * Defaults to 10.
                         */
                        gimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gimcontinue?: string;
                        /**
                         * Only list these files. Useful for checking whether a certain page has a certain file.
                         */
                        gimimages?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gimdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that use the given image title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                     */
                    interface ImageUsage extends Purge {
                        generator?: "imageusage";
                        /**
                         * Title to search. Cannot be used together with iupageid.
                         */
                        giutitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with iutitle.
                         */
                        giupageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giucontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        giunamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giudir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        giufilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        giulimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        giuredirect?: boolean;
                    }

                    /**
                     * Find all pages that link to the given interwiki link.
                     *
                     * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                     */
                    // tslint:disable-next-line:interface-name
                    interface IWBacklinks extends Purge {
                        generator?: "iwbacklinks";
                        /**
                         * Prefix for the interwiki.
                         */
                        giwblprefix?: string;
                        /**
                         * Interwiki link to search for. Must be used with `iwblblprefix`.
                         */
                        giwbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giwblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        giwbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **iwprefix**: Adds the prefix of the interwiki.
                         * - **iwtitle**: Adds the title of the interwiki.
                         *
                         * Defaults to an empty string.
                         */
                        giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giwbldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given language link.
                     *
                     * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                     *
                     * Note that this may not consider language links added by extensions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                     */
                    interface LangBacklinks extends Purge {
                        generator?: "langbacklinks";
                        /**
                         * Language for the language link.
                         */
                        glbllang?: string;
                        /**
                         * Language link to search for. Must be used with lbllang.
                         */
                        glbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        glbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **lllang**: Adds the language code of the language link.
                         * - **lltitle**: Adds the title of the language link.
                         *
                         * Defaults to an empty string.
                         */
                        glblprop?: OneOrMore<"lllang" | "lltitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        glbldir?: "ascending" | "descending";
                    }

                    /**
                     * Returns all links from the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                     */
                    interface Links extends Purge {
                        generator?: "links";
                        /**
                         * Show links in these namespaces only.
                         */
                        gplnamespace?: number | number[] | "*";
                        /**
                         * How many links to return.
                         *
                         * Defaults to 10.
                         */
                        gpllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gplcontinue?: string;
                        /**
                         * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                         */
                        gpltitles?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gpldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                     */
                    interface LinksHere extends Purge {
                        generator?: "linkshere";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        glhnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        glhshow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        glhlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glhcontinue?: string;
                    }

                    /**
                     * Query MessageCollection about translations.
                     */
                    interface MessageCollection extends Purge {
                        generator?: "messagecollection";
                        /**
                         * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                         */
                        gmcgroup: string;
                        /**
                         * Language code.
                         *
                         * Defaults to `en`.
                         */
                        gmclanguage?: string;
                        /**
                         * How many messages to show (after filtering).
                         *
                         * Defaults to 500.
                         */
                        gmclimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to an empty string.
                         */
                        gmcoffset?: string;
                        /**
                         * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                         *
                         * - **fuzzy**: Messages with fuzzy tag.
                         * - **optional**: Messages which should be translated only if changes are necessary.
                         * - **ignored**: Messages which are never translated.
                         * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                         * - **translated**: Messages which have a translation which is not fuzzy.
                         * - **changed**: Messages which have been translated or changed since last export.
                         * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                         * - **last-translator:N**: Messages where the user number `N` is the last translator.
                         *
                         * Defaults to `!optional` and `!ignored`.
                         */
                        gmcfilter?: string | string[];
                        /**
                         * Which properties to get:
                         *
                         * - **definition**: Message definition.
                         * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                         * - **tags**: Message tags, like optional, ignored and fuzzy.
                         * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                         * - **revision**: Deprecated. Use mcprop=properties.
                         *
                         * Defaults to `definition` and `translation`.
                         */
                        gmcprop?: OneOrMore<
                            "definition" | "properties" | "revision" | "tags" | "translation"
                        >;
                    }

                    /**
                     * Lists the most viewed pages (based on last day's pageview count).
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                     */
                    interface MostViewed extends Purge {
                        generator?: "mostviewed";
                        /**
                         * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                         *
                         * - **pageviews**: Plain pageviews.
                         *
                         * Defaults to `pageviews`.
                         */
                        gpvimmetric?: "pageviews";
                        /**
                         * The number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpvimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpvimoffset?: number;
                    }

                    /**
                     * Enumerates pages that have changes pending review.
                     */
                    interface Oldreviewedpages extends Purge {
                        generator?: "oldreviewedpages";
                        /**
                         * Start listing at this timestamp.
                         */
                        gorstart?: string;
                        /**
                         * Stop listing at this timestamp.
                         */
                        gorend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gordir?: "newer" | "older";
                        /**
                         * Maximum character count change size.
                         */
                        gormaxsize?: number;
                        /**
                         * How to filter for pages on your watchlist.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterwatched?: "all" | "watched";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gornamespace?: number | number[] | "*";
                        /**
                         * Show pages only in the given category.
                         */
                        gorcategory?: string;
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gorlimit?: Limit;
                    }

                    /**
                     * List all pages using a given page property.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                     */
                    interface PagesWithProp extends Purge {
                        generator?: "pageswithprop";
                        /**
                         * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                         */
                        gpwppropname: string;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **value**: Adds the value of the page property.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gpwpcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpwplimit?: Limit;
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gpwpdir?: "ascending" | "descending";
                    }

                    /**
                     * Perform a prefix search for page titles.
                     *
                     * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                     */
                    interface PrefixSearch extends Purge {
                        generator?: "prefixsearch";
                        /**
                         * Search string.
                         */
                        gpssearch: string;
                        /**
                         * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                         *
                         * Defaults to 0.
                         */
                        gpsnamespace?: number | number[] | "*";
                        /**
                         * Maximum number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gpslimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpsoffset?: number;
                        /**
                         * Search profile to use.
                         *
                         * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                         * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                         * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                         * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                         * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gpsprofile?:
                            | "classic"
                            | "engine_autoselect"
                            | "fast-fuzzy"
                            | "fuzzy"
                            | "fuzzy-subphrases"
                            | "normal"
                            | "normal-subphrases"
                            | "strict";
                    }

                    /**
                     * List all pages associated with one or more projects.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                     */
                    interface ProjectPages extends Purge {
                        generator?: "projectpages";
                        /**
                         * Also return assessments for the pages returned.
                         */
                        gwppassessments?: boolean;
                        /**
                         * The projects to list pages for. If this parameter is omitted, all projects will be included.
                         */
                        gwppprojects: string | string[];
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gwpplimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwppcontinue?: string;
                    }

                    /**
                     * List the pages in a given index
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                     */
                    interface ProofreadPagesInIndex extends Purge {
                        generator?: "proofreadpagesinindex";
                        /**
                         * Which properties to get for each page
                         *
                         * - **ids**: Return the page ID of each page linked to the index page
                         * - **title**: Return the page title of each page linked to the index page
                         * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                         * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gprppiiprop?: OneOrMore<
                            "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                        >;
                        /**
                         * The title of the Index page to get pages for
                         */
                        gprppiititle?: string;
                        /**
                         * The page ID of the Index page to get pages for
                         */
                        gprppiipageid?: number;
                    }

                    /**
                     * List all titles protected from creation.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                     */
                    interface ProtectedTitles extends Purge {
                        generator?: "protectedtitles";
                        /**
                         * Only list titles in these namespaces.
                         */
                        gptnamespace?: number | number[] | "*";
                        /**
                         * Only list titles with these protection levels.
                         */
                        gptlevel?: string | string[];
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gptlimit?: Limit;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                         * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                         *
                         * Defaults to `older`.
                         */
                        gptdir?: "newer" | "older";
                        /**
                         * Start listing at this protection timestamp.
                         */
                        gptstart?: string;
                        /**
                         * Stop listing at this protection timestamp.
                         */
                        gptend?: string;
                        /**
                         * Which properties to get:
                         *
                         * - **timestamp**: Adds the timestamp of when protection was added.
                         * - **user**: Adds the user that added the protection.
                         * - **userid**: Adds the user ID that added the protection.
                         * - **comment**: Adds the comment for the protection.
                         * - **parsedcomment**: Adds the parsed comment for the protection.
                         * - **expiry**: Adds the timestamp of when the protection will be lifted.
                         * - **level**: Adds the protection level.
                         *
                         * Defaults to `timestamp` and `level`.
                         */
                        gptprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "level"
                            | "parsedcomment"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gptcontinue?: string;
                    }

                    /**
                     * Get a list provided by a QueryPage-based special page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                     */
                    interface QueryPage extends Purge {
                        generator?: "querypage";
                        /**
                         * The name of the special page. Note, this is case-sensitive.
                         */
                        gqppage: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gqpoffset?: number;
                        /**
                         * Number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gqplimit?: Limit;
                    }

                    /**
                     * Get a set of random pages.
                     *
                     * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                     */
                    interface Random extends Purge {
                        generator?: "random";
                        /**
                         * Return pages in these namespaces only.
                         */
                        grnnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `nonredirects`.
                         */
                        grnfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Use `rnfilterredir=redirects` instead.
                         *
                         * @deprecated
                         */
                        grnredirect?: boolean;
                        /**
                         * Limit how many random pages will be returned.
                         *
                         * Defaults to 1.
                         */
                        grnlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grncontinue?: string;
                    }

                    /**
                     * List the pages of a certain list.
                     *
                     * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface ReadingListEntries extends Purge {
                        generator?: "readinglistentries";
                        /**
                         * The list IDs for which to return pages.
                         */
                        grlelists?: number | number[];
                        /**
                         * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                         */
                        grlechangedsince?: string;
                        /**
                         * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                         *
                         * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                         * - **updated**: Last update timestamp.
                         */
                        grlesort?: "name" | "updated";
                        /**
                         * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                         *
                         * Defaults to `ascending`.
                         */
                        grledir?: "ascending" | "descending";
                        /**
                         * Number of result items to return.
                         *
                         * Defaults to 10.
                         */
                        grlelimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grlecontinue?: string;
                    }

                    /**
                     * Enumerate recent changes.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                     */
                    interface RecentChanges extends Purge {
                        generator?: "recentchanges";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        grcstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        grcend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                         * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                         *
                         * Defaults to `older`.
                         */
                        grcdir?: "newer" | "older";
                        /**
                         * Filter changes to only these namespaces.
                         */
                        grcnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        grcuser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        grcexcludeuser?: string;
                        /**
                         * Only list changes tagged with this tag.
                         */
                        grctag?: string;
                        /**
                         * Include additional pieces of information:
                         *
                         * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **flags**: Adds flags for the edit.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **title**: Adds the page title of the edit.
                         * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                         * - **sizes**: Adds the new and old page length in bytes.
                         * - **redirect**: Tags edit if page is a redirect.
                         * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                         * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                         * - **tags**: Lists tags for the entry.
                         * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         *
                         * Defaults to `title`, `timestamp`, and `ids`.
                         */
                        grcprop?: OneOrMore<
                            | "comment"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrolled"
                            | "redirect"
                            | "sha1"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                         *
                         * @deprecated
                         */
                        grctoken?: string;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                         */
                        grcshow?: OneOrMore<
                            | Toggle<
                                  | "anon"
                                  | "autopatrolled"
                                  | "bot"
                                  | "minor"
                                  | "oresreview"
                                  | "patrolled"
                                  | "redirect"
                              >
                            | "unpatrolled"
                        >;
                        /**
                         * How many total changes to return.
                         *
                         * Defaults to 10.
                         */
                        grclimit?: Limit;
                        /**
                         * Which types of changes to show.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Only list changes which are the latest revision.
                         */
                        grctoponly?: boolean;
                        /**
                         * Filter entries to those related to a page.
                         */
                        grctitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grccontinue?: string;
                        /**
                         * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                         */
                        grcgeneraterevisions?: boolean;
                        /**
                         * Only list changes that touch the named slot.
                         */
                        grcslot?: "main" | "mediainfo";
                    }

                    /**
                     * Returns all redirects to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                     */
                    interface Redirects extends Purge {
                        generator?: "redirects";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each redirect.
                         * - **title**: Title of each redirect.
                         * - **fragment**: Fragment of each redirect, if any.
                         *
                         * Defaults to `pageid` and `title`.
                         */
                        grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        grdnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **fragment**: Only show redirects with a fragment.
                         * - **!fragment**: Only show redirects without a fragment.
                         */
                        grdshow?: OneOrMore<Toggle<"fragment">>;
                        /**
                         * How many redirects to return.
                         *
                         * Defaults to 10.
                         */
                        grdlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grdcontinue?: string;
                    }

                    /**
                     * Get revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get data about a set of pages (last revision), by setting titles or pageids.
                     * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                     * - Get data about a set of revisions by setting their IDs with revids.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                     */
                    interface Revisions extends Purge {
                        generator?: "revisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        grvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flagged"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        grvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `grvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                         */
                        grvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        grvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        grvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                         *
                         * @deprecated
                         */
                        grvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `rvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        grvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvstartid?: number;
                        /**
                         * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvendid?: number;
                        /**
                         * From which revision timestamp to start enumeration.
                         */
                        grvstart?: string;
                        /**
                         * Enumerate up to this timestamp.
                         */
                        grvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                         * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                         *
                         * Defaults to `older`.
                         */
                        grvdir?: "newer" | "older";
                        /**
                         * Only include revisions made by user.
                         */
                        grvuser?: string;
                        /**
                         * Exclude revisions made by user.
                         */
                        grvexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        grvtag?: string;
                        /**
                         * Which tokens to obtain for each revision.
                         *
                         * @deprecated
                         */
                        grvtoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grvcontinue?: string;
                    }

                    /**
                     * Perform a full text search.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                     */
                    interface Search extends Purge {
                        generator?: "search";
                        /**
                         * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                         */
                        gsrsearch: string;
                        /**
                         * Search only within these namespaces.
                         *
                         * Defaults to 0.
                         */
                        gsrnamespace?: number | number[] | "*";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gsrlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gsroffset?: number;
                        /**
                         * Query independent profile to use (affects ranking algorithm).
                         *
                         * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                         * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                         * - **empty**: Ranking based solely on query dependent features (for debug only).
                         * - **wsum_inclinks**: Weighted sum based on incoming links
                         * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                         * - **popular_inclinks_pv**: Ranking based primarily on page views
                         * - **popular_inclinks**: Ranking based primarily on incoming link counts
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gsrqiprofile?: string;
                        /**
                         * Which type of search to perform.
                         */
                        gsrwhat?: "nearmatch" | "text" | "title";
                        /**
                         * Which metadata to return.
                         *
                         * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                         */
                        gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                        /**
                         * Which properties to return:
                         *
                         * - **size**: Adds the size of the page in bytes.
                         * - **wordcount**: Adds the word count of the page.
                         * - **timestamp**: Adds the timestamp of when the page was last edited.
                         * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                         * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                         * - **redirecttitle**: Adds the title of the matching redirect.
                         * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                         * - **sectiontitle**: Adds the title of the matching section.
                         * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                         * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                         * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                         * - **score**: Deprecated. Ignored.
                         * - **hasrelated**: Deprecated. Ignored.
                         * - **extensiondata**: Adds extra data generated by extensions.
                         *
                         * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                         */
                        gsrprop?: OneOrMore<
                            | "categorysnippet"
                            | "extensiondata"
                            | "hasrelated"
                            | "isfilematch"
                            | "redirectsnippet"
                            | "redirecttitle"
                            | "score"
                            | "sectionsnippet"
                            | "sectiontitle"
                            | "size"
                            | "snippet"
                            | "timestamp"
                            | "titlesnippet"
                            | "wordcount"
                        >;
                        /**
                         * Include interwiki results in the search, if available.
                         */
                        gsrinterwiki?: boolean;
                        /**
                         * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                         */
                        gsrenablerewrites?: boolean;
                        /**
                         * Set the sort order of returned results.
                         *
                         * Defaults to `relevance`.
                         */
                        gsrsort?:
                            | "create_timestamp_asc"
                            | "create_timestamp_desc"
                            | "incoming_links_asc"
                            | "incoming_links_desc"
                            | "just_match"
                            | "last_edit_asc"
                            | "last_edit_desc"
                            | "none"
                            | "random"
                            | "relevance"
                            | "user_random";
                    }

                    /**
                     * Returns all pages transcluded on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                     */
                    interface Templates extends Purge {
                        generator?: "templates";
                        /**
                         * Show templates in these namespaces only.
                         */
                        gtlnamespace?: number | number[] | "*";
                        /**
                         * How many templates to return.
                         *
                         * Defaults to 10.
                         */
                        gtllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gtlcontinue?: string;
                        /**
                         * Only list these templates. Useful for checking whether a certain page uses a certain template.
                         */
                        gtltemplates?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gtldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that transclude the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                     */
                    interface Transcludedin extends Purge {
                        generator?: "transcludedin";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gtinamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gtishow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gtilimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gticontinue?: string;
                    }

                    /**
                     * Enumerates pages that have not been reviewed to a given quality level.
                     */
                    interface Unreviewedpages extends Purge {
                        generator?: "unreviewedpages";
                        /**
                         * Start listing at this page title.
                         */
                        gurstart?: string;
                        /**
                         * Stop listing at this page title.
                         */
                        gurend?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gurdir?: "ascending" | "descending";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gurnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gurfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How to filter by quality (0=checked, 1=quality).
                         *
                         * Defaults to 0.
                         */
                        gurfilterlevel?: number;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gurlimit?: Limit;
                    }

                    /**
                     * Get recent changes to pages in the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                     */
                    interface Watchlist extends Purge {
                        generator?: "watchlist";
                        /**
                         * Include multiple revisions of the same page within given timeframe.
                         */
                        gwlallrev?: boolean;
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gwlstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        gwlend?: string;
                        /**
                         * Filter changes to only the given namespaces.
                         */
                        gwlnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        gwluser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        gwlexcludeuser?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                         * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                         *
                         * Defaults to `older`.
                         */
                        gwldir?: "newer" | "older";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwllimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **ids**: Adds revision IDs and page IDs.
                         * - **title**: Adds title of the page.
                         * - **flags**: Adds flags for the edit.
                         * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **patrol**: Tags edits that are patrolled.
                         * - **sizes**: Adds the old and new lengths of the page.
                         * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                         * - **loginfo**: Adds log information where appropriate.
                         * - **tags**: Lists tags for the entry.
                         * - **expiry**: Adds the expiry time.
                         *
                         * Defaults to `ids`, `title`, and `flags`.
                         */
                        gwlprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "notificationtimestamp"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrol"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                         */
                        gwlshow?: OneOrMore<
                            Toggle<
                                | "anon"
                                | "autopatrolled"
                                | "bot"
                                | "minor"
                                | "oresreview"
                                | "patrolled"
                                | "unread"
                            >
                        >;
                        /**
                         * Which types of changes to show:
                         *
                         * - **edit**: Regular page edits.
                         * - **new**: Page creations.
                         * - **log**: Log entries.
                         * - **external**: External changes.
                         * - **categorize**: Category membership changes.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Used along with wltoken to access a different user's watchlist.
                         */
                        gwlowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwltoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwlcontinue?: string;
                    }

                    /**
                     * Get all pages on the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                     */
                    interface WatchlistRaw extends Purge {
                        generator?: "watchlistraw";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwrcontinue?: string;
                        /**
                         * Only list pages in the given namespaces.
                         */
                        gwrnamespace?: number | number[] | "*";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwrlimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **changed**: Adds timestamp of when the user was last notified about the edit.
                         */
                        gwrprop?: OneOrMore<"changed">;
                        /**
                         * Only list items that meet these criteria.
                         */
                        gwrshow?: OneOrMore<Toggle<"changed">>;
                        /**
                         * Used along with wrtoken to access a different user's watchlist.
                         */
                        gwrowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwrtoken?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gwrdir?: "ascending" | "descending";
                        /**
                         * Title (with namespace prefix) to begin enumerating from.
                         */
                        gwrfromtitle?: string;
                        /**
                         * Title (with namespace prefix) to stop enumerating at.
                         */
                        gwrtotitle?: string;
                    }

                    /**
                     * Returns all pages that use the given entity IDs.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                     */
                    interface WBListEntityUsage extends Purge {
                        generator?: "wblistentityusage";
                        /**
                         * Properties to add to the result.
                         *
                         * - **url**: If enabled the url of the entity will be added to the result.
                         */
                        gwbleuprop?: OneOrMore<"url">;
                        /**
                         * Only return entity IDs that used this aspect.
                         *
                         * - **S**: The entity's sitelinks are used
                         * - **L**: The entity's label is used
                         * - **D**: The entity's description is used
                         * - **T**: The title of the local page corresponding to the entity is used
                         * - **C**: Statements from the entity are used
                         * - **X**: All aspects of an entity are or may be used
                         * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                         */
                        gwbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                        /**
                         * Entities that have been used.
                         */
                        gwbleuentities: string | string[];
                        /**
                         * How many entity usages to return.
                         *
                         * Defaults to 10.
                         */
                        gwbleulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwbleucontinue?: string;
                    }

                    /**
                     * Searches for entities using labels and aliases.
                     *
                     * This can be used as a generator for other queries.
                     * Returns the matched term that should be displayed.
                     *
                     * @private
                     */
                    interface WBSearch extends Purge {
                        generator?: "wbsearch";
                        /**
                         * Search for this text.
                         */
                        gwbssearch: string;
                        /**
                         * Search in this language.
                         */
                        gwbslanguage?: string;
                        /**
                         * Whether to disable language fallback
                         */
                        gwbsstrictlanguage?: boolean;
                        /**
                         * Search for this type of entity.
                         *
                         * Defaults to `item`.
                         */
                        gwbstype?: string;
                        /**
                         * Maximal number of results
                         *
                         * Defaults to 7.
                         */
                        gwbslimit?: Limit;
                        /**
                         * The search profile to use.
                         *
                         * - **default**: The default profile, suitable for most purposes.
                         * - **language**: A profile to search for items about natural languages.
                         *
                         * Defaults to `default`.
                         */
                        gwbsprofile?: "default" | "language";
                    }

                    /**
                     * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                     */
                    interface WikiLambdaFnSearch extends Purge {
                        generator?: "wikilambdafn_search";
                        /**
                         * The ZFunction ID to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_zfunction_id?: string;
                        /**
                         * The type of ZObject referenced by the ZFunction to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_type?: string;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdafn_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdafn_continue?: string;
                    }

                    /**
                     * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                     */
                    interface WikiLambdaLoadZObjects extends Purge {
                        generator?: "wikilambdaload_zobjects";
                        /**
                         * The ZObject ZIDs to fetch.
                         */
                        gwikilambdaload_zids: string | string[];
                        /**
                         * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                         */
                        gwikilambdaload_revisions?: string | string[];
                        /**
                         * The MediaWiki language code in which to return all the ZObject labels.
                         */
                        gwikilambdaload_language?: string;
                        /**
                         * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                         */
                        gwikilambdaload_get_dependencies?: boolean;
                    }

                    /**
                     * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                     */
                    interface WikiLambdaSearchLabels extends Purge {
                        generator?: "wikilambdasearch_labels";
                        /**
                         * The search term
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdasearch_search?: string;
                        /**
                         * The MediaWiki language code in which to search
                         */
                        gwikilambdasearch_language: string;
                        /**
                         * Whether to search only in the given language and not its fallback languages
                         */
                        gwikilambdasearch_nofallback?: boolean;
                        /**
                         * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                         */
                        gwikilambdasearch_exact?: boolean;
                        /**
                         * Restrict matches to a specific type of ZObject.
                         */
                        gwikilambdasearch_type?: string;
                        /**
                         * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                         */
                        gwikilambdasearch_return_type?: string;
                        /**
                         * Restrict return type to be strictly the given one, excluding generic ZObject.
                         */
                        gwikilambdasearch_strict_return_type?: boolean;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdasearch_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdasearch_continue?: string;
                    }
                }

                namespace Query {
                    namespace Prop {
                        /**
                         * List all categories the pages belong to.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                         */
                        interface Categories extends Query {
                            /**
                             * Which additional properties to get for each category:
                             *
                             * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                             * - **timestamp**: Adds timestamp of when the category was added.
                             * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                             */
                            clprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                            /**
                             * Which kind of categories to show.
                             */
                            clshow?: OneOrMore<Toggle<"hidden">>;
                            /**
                             * How many categories to return.
                             *
                             * Defaults to 10.
                             */
                            cllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            clcontinue?: string;
                            /**
                             * Only list these categories. Useful for checking whether a certain page is in a certain category.
                             */
                            clcategories?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            cldir?: "ascending" | "descending";
                        }

                        /**
                         * Returns information about the given categories.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categoryinfo
                         */
                        interface CategoryInfo extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            cicontinue?: string;
                        }

                        /**
                         * Dump of a CirrusSearch article document from the database servers
                         */
                        interface CirrusBuildDoc extends Query {
                            /**
                             * Type of data to extract
                             */
                            cbbuilders?: OneOrMore<"content" | "links">;
                            /**
                             * Profile to use when limiting the size of the document
                             */
                            cblimiterprofile?: string;
                        }

                        /**
                         * Dump of the document used by the completion suggester
                         */
                        interface CirrusCompSuggestBuildDoc extends Query {
                            /**
                             * Provide a score method name to be used by the completion suggester
                             *
                             * Defaults to `popqual`.
                             */
                            csbmethod?: string;
                        }

                        /**
                         * Dump of a CirrusSearch article document from the search servers
                         */
                        interface CirrusDoc extends Query {
                            /**
                             * Define which fields should be returned by the search.
                             *
                             * Defaults to `all`.
                             */
                            cdincludes?: string | string[];
                        }

                        /**
                         * Get the list of logged-in contributors and the count of logged-out contributors to a page.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Contributors
                         */
                        interface Contributors extends Query {
                            /**
                             * Only include users in the given groups. Does not include implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            pcgroup?: string | string[];
                            /**
                             * Exclude users in the given groups. Does not include implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            pcexcludegroup?: string | string[];
                            /**
                             * Only include users having the given rights. Does not include rights granted by implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            pcrights?: string | string[];
                            /**
                             * Exclude users having the given rights. Does not include rights granted by implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            pcexcluderights?: string | string[];
                            /**
                             * How many contributors to return.
                             *
                             * Defaults to 10.
                             */
                            pclimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            pccontinue?: string;
                        }

                        /**
                         * Returns coordinates of the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#prop.3Dcoordinates
                         */
                        interface Coordinates extends Query {
                            /**
                             * How many coordinates to return.
                             *
                             * Defaults to 10.
                             */
                            colimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            cocontinue?: string;
                            /**
                             * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                             *
                             * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                             * - **name**: Name of the object.
                             * - **dim**: Approximate size of the object in meters.
                             * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                             * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                             * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                             *
                             * Defaults to `globe`.
                             */
                            coprop?: OneOrMore<
                                "country" | "dim" | "globe" | "name" | "region" | "type"
                            >;
                            /**
                             * Which kind of coordinates to return.
                             *
                             * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                             * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                             * - **all**: Return both primary and secondary coordinates.
                             *
                             * Defaults to `primary`.
                             */
                            coprimary?: "all" | "primary" | "secondary";
                            /**
                             * Return distance in meters from the geographical coordinates of every valid result from the given coordinates.
                             *
                             * Format: Latitude and longitude separated by pipe (`|`).
                             */
                            codistancefrompoint?: string;
                            /**
                             * Return distance in meters from the geographical coordinates of every valid result from the coordinates of this page.
                             */
                            codistancefrompage?: string;
                        }

                        /**
                         * Provides the default content for a given page in the "Page:" namespace.
                         *
                         * The default content is raw wikitext (potentially including raw HTML tags from untrusted book text layers). It must not be used in HTML unescaped/unparsed!
                         *
                         * @private
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface DefaultContentForPage extends Query {}

                        /**
                         * Get deleted revision information.
                         *
                         * May be used in several ways:
                         *
                         * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                         * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                         */
                        interface DeletedRevisions extends Query {
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            drvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            drvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `drvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                             */
                            drvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                             *
                             * @deprecated
                             */
                            drvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                             *
                             * @deprecated
                             */
                            drvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            drvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            drvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            drvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            drvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                             *
                             * @deprecated
                             */
                            drvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `drvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            drvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                             */
                            drvstart?: string;
                            /**
                             * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                             */
                            drvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                             * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                             *
                             * Defaults to `older`.
                             */
                            drvdir?: "newer" | "older";
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            drvtag?: string;
                            /**
                             * Only list revisions by this user.
                             */
                            drvuser?: string;
                            /**
                             * Don't list revisions by this user.
                             */
                            drvexcludeuser?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            drvcontinue?: string;
                        }

                        /**
                         * Get a short description a.k.a. subtitle explaining what the target page is about.
                         *
                         * The description is plain text, on a single line, but otherwise arbitrary (potentially including raw HTML tags, which also should be interpreted as plain text). It must not be used in HTML unescaped!
                         *
                         * @private
                         */
                        interface Description extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            desccontinue?: number;
                            /**
                             * Which description source to prefer if present:
                             *
                             * - **local**: Local descriptions via `{{SHORTDESC:...}}` parser function in the wikitext of the page.
                             * - **central**: Central descriptions from the associated Wikidata item.
                             *
                             * Defaults to `local`.
                             */
                            descprefersource?: "central" | "local";
                        }

                        /**
                         * List all files that are duplicates of the given files based on hash values.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                         */
                        interface DuplicateFiles extends Query {
                            /**
                             * How many duplicate files to return.
                             *
                             * Defaults to 10.
                             */
                            dflimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            dfcontinue?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            dfdir?: "ascending" | "descending";
                            /**
                             * Look only for files in the local repository.
                             */
                            dflocalonly?: boolean;
                        }

                        /**
                         * Get the terms (labels, descriptions and aliases) of the entity on this page.
                         */
                        interface EntityTerms extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wbetcontinue?: number;
                            /**
                             * The language code to get terms in. If not specified, the user language is used.
                             *
                             * Defaults to `uselang`.
                             */
                            wbetlanguage?: string;
                            /**
                             * The types of terms to get, e.g. 'description', each returned as an array of strings keyed by their type, e.g. {"description": ["foo"]}. If not specified, all types are returned.
                             *
                             * Defaults to `alias`, `label`, and `description`.
                             */
                            wbetterms?: OneOrMore<"alias" | "description" | "label">;
                        }

                        /**
                         * Returns all external URLs (not interwikis) from the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Extlinks
                         */
                        interface ExtLinks extends Query {
                            /**
                             * How many links to return.
                             *
                             * Defaults to 10.
                             */
                            ellimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            elcontinue?: string;
                            /**
                             * Protocol of the URL. If empty and `elquery` is set, the protocol is `http` and `https`. Leave both this and `elquery` empty to list all external links.
                             *
                             * Defaults to an empty string.
                             */
                            elprotocol?:
                                | ""
                                | "bitcoin"
                                | "ftp"
                                | "ftps"
                                | "geo"
                                | "git"
                                | "gopher"
                                | "http"
                                | "https"
                                | "irc"
                                | "ircs"
                                | "magnet"
                                | "mailto"
                                | "matrix"
                                | "mms"
                                | "news"
                                | "nntp"
                                | "redis"
                                | "sftp"
                                | "sip"
                                | "sips"
                                | "sms"
                                | "ssh"
                                | "svn"
                                | "tel"
                                | "telnet"
                                | "urn"
                                | "worldwind"
                                | "xmpp";
                            /**
                             * Search string without protocol. Useful for checking whether a certain page contains a certain external url.
                             */
                            elquery?: string;
                            /**
                             * Expand protocol-relative URLs with the canonical protocol.
                             *
                             * @deprecated
                             */
                            elexpandurl?: boolean;
                        }

                        /**
                         * Returns plain-text or limited HTML extracts of the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:TextExtracts#API
                         */
                        interface Extracts extends Query {
                            /**
                             * How many characters to return. Actual text returned might be slightly longer.
                             */
                            exchars?: number;
                            /**
                             * How many sentences to return.
                             */
                            exsentences?: number;
                            /**
                             * How many extracts to return. (Multiple extracts can only be returned if exintro is set to true.)
                             *
                             * Defaults to 20.
                             */
                            exlimit?: Limit;
                            /**
                             * Return only content before the first section.
                             */
                            exintro?: boolean;
                            /**
                             * Return extracts as plain text instead of limited HTML.
                             */
                            explaintext?: boolean;
                            /**
                             * How to format sections in plaintext mode:
                             *
                             * - **plain**: No formatting.
                             * - **wiki**: Wikitext-style formatting (== like this ==).
                             * - **raw**: This module's internal representation (section titles prefixed with <ASCII 1><ASCII 2><section level><ASCII 2><ASCII 1>).
                             *
                             * Defaults to `wiki`.
                             */
                            exsectionformat?: "plain" | "raw" | "wiki";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            excontinue?: number;
                        }

                        /**
                         * Find all pages that use the given files.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                         */
                        interface FileUsage extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            fuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            funamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            fushow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            fulimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            fucontinue?: string;
                        }

                        /**
                         * Get information about the flagging status of the given pages.
                         *
                         * If a page is flagged, the following parameters are returned:
                         *
                         * - **stable_revid**: The revision ID of the latest stable revision.
                         * - **level**: - **level_text**: The highest flagging level of the page.
                         * - **pending_since**: If there are any current unreviewed revisions for that page, holds the timestamp of the first of them.
                         * If the page has protection configuration, the following parameters are returned:
                         *
                         * - **protection_level**: The right a user must have to not require review on the page.
                         * - **protection_expiry**: When the protection expires.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface Flagged extends Query {}

                        /**
                         * Get basic Structured Discussions information about a page.
                         *
                         * @deprecated
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:Flow/API#action.3Dquery.26prop.3Dflowinfo
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface FlowInfo extends Query {}

                        /**
                         * Returns global image usage for a certain image.
                         */
                        interface GlobalUsage extends Query {
                            /**
                             * Which properties to return:
                             *
                             * - **url**: Adds url.
                             * - **pageid**: Adds page ID.
                             * - **namespace**: Adds namespace ID.
                             *
                             * Defaults to `url`.
                             */
                            guprop?: OneOrMore<"namespace" | "pageid" | "url">;
                            /**
                             * How many links to return.
                             *
                             * Defaults to 10.
                             */
                            gulimit?: Limit;
                            /**
                             * Limit results to these namespaces.
                             *
                             * Defaults to `*`.
                             */
                            gunamespace?: number | number[] | "*";
                            /**
                             * Limit results to these sites.
                             */
                            gusite?: string | string[];
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gucontinue?: string;
                            /**
                             * Filter local usage of the file.
                             */
                            gufilterlocal?: boolean;
                        }

                        /**
                         * Fetch associated {@link https://www.mediawiki.org/wiki/wikitech:Add_Image image suggestion data}, if available
                         */
                        interface GrowthImageSuggestionData extends Query {
                            /**
                             * Task type ID (to specify whether to fetch data for top-level or section-level image recommendations)
                             *
                             * Defaults to `image-recommendation`.
                             */
                            gisdtasktype?: "image-recommendation" | "section-image-recommendation";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gisdcontinue?: string;
                        }

                        /**
                         * Pre-renders and provides URLs to images for a given page in the "Page:" namespace.
                         */
                        interface ImageForPage extends Query {
                            /**
                             * Which types of images or properties of images to return for a given page in the "Page:" namespace.
                             *
                             * - **filename**: Return the filename associated with the page being queried
                             * - **size**: Return the size of the image associated with the page being queried
                             * - **fullsize**: Return the URL of the full-sized image associated with the page being queried
                             * - **responsiveimages**: Return a list containing the URLs of images at 1x, 1.5x and 2x of the fullsized image associated with the page being queried
                             *
                             * Defaults to `filename`, `size`, `fullsize`, and `responsiveimages`.
                             */
                            prppifpprop?: OneOrMore<
                                "filename" | "fullsize" | "responsiveimages" | "size"
                            >;
                        }

                        /**
                         * Returns file information and upload history.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageinfo
                         */
                        interface ImageInfo extends Query {
                            /**
                             * Which file information to get:
                             *
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **thumbmime**: Adds MIME type of the image thumbnail (requires url and param iiurlwidth). If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **archivename**: Adds the filename of the archive version for non-latest versions. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **uploadwarning**: Used by the Special:Upload page to get information about an existing file. Not intended for use outside MediaWiki core.
                             * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             *
                             * Defaults to `timestamp` and `user`.
                             */
                            iiprop?: OneOrMore<
                                | "archivename"
                                | "badfile"
                                | "bitdepth"
                                | "canonicaltitle"
                                | "comment"
                                | "commonmetadata"
                                | "dimensions"
                                | "extmetadata"
                                | "mediatype"
                                | "metadata"
                                | "mime"
                                | "parsedcomment"
                                | "sha1"
                                | "size"
                                | "thumbmime"
                                | "timestamp"
                                | "uploadwarning"
                                | "url"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * How many file revisions to return per file.
                             *
                             * Defaults to 1.
                             */
                            iilimit?: Limit;
                            /**
                             * Timestamp to start listing from.
                             */
                            iistart?: string;
                            /**
                             * Timestamp to stop listing at.
                             */
                            iiend?: string;
                            /**
                             * If iiprop=url is set, a URL to an image scaled to this width will be returned.
                             * For performance reasons if this option is used, no more than 50 scaled images will be returned.
                             *
                             * Defaults to -1.
                             */
                            iiurlwidth?: number;
                            /**
                             * Similar to iiurlwidth.
                             *
                             * Defaults to -1.
                             */
                            iiurlheight?: number;
                            /**
                             * Version of metadata to use. If `latest` is specified, use latest version. Defaults to `1` for backwards compatibility.
                             *
                             * Defaults to `1`.
                             */
                            iimetadataversion?: string;
                            /**
                             * What language to fetch extmetadata in. This affects both which translation to fetch, if multiple are available, as well as how things like numbers and various values are formatted.
                             *
                             * Defaults to `en`.
                             */
                            iiextmetadatalanguage?: string;
                            /**
                             * If translations for extmetadata property are available, fetch all of them.
                             */
                            iiextmetadatamultilang?: boolean;
                            /**
                             * If specified and non-empty, only these keys will be returned for iiprop=extmetadata.
                             */
                            iiextmetadatafilter?: string | string[];
                            /**
                             * A handler specific parameter string. For example, PDFs might use `page15-100px`. `iiurlwidth` must be used and be consistent with `iiurlparam`.
                             *
                             * Defaults to an empty string.
                             */
                            iiurlparam?: string;
                            /**
                             * If `badfilecontexttitleprop=badfile` is set, this is the page title used when evaluating the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             */
                            iibadfilecontexttitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            iicontinue?: string;
                            /**
                             * Look only for files in the local repository.
                             */
                            iilocalonly?: boolean;
                        }

                        /**
                         * Returns all files contained on the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                         */
                        interface Images extends Query {
                            /**
                             * How many files to return.
                             *
                             * Defaults to 10.
                             */
                            imlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            imcontinue?: string;
                            /**
                             * Only list these files. Useful for checking whether a certain page has a certain file.
                             */
                            imimages?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            imdir?: "ascending" | "descending";
                        }

                        /**
                         * Get basic page information.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Info
                         */
                        interface Info extends Query {
                            /**
                             * Which additional properties to get:
                             *
                             * - **protection**: List the protection level of each page.
                             * - **talkid**: The page ID of the talk page for each non-talk page.
                             * - **watched**: List the watched status of each page.
                             * - **watchers**: The number of watchers, if allowed.
                             * - **visitingwatchers**: The number of watchers of each page who have visited recent edits to that page, if allowed.
                             * - **notificationtimestamp**: The watchlist notification timestamp of each page.
                             * - **subjectid**: The page ID of the parent page for each talk page.
                             * - **associatedpage**: The prefixed title of the {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Associated_pages associated subject or talk page}.
                             * - **url**: Gives a full URL, an edit URL, and the canonical URL for each page.
                             * - **readable**: Deprecated. Whether the user can read this page. Use `intestactions=read` instead.
                             * - **preload**: Deprecated. Gives the text returned by EditFormPreloadText. Use `preloadcontent` instead, which supports other kinds of preloaded text too.
                             * - **preloadcontent**: Gives the content to be shown in the editor when the page does not exist or while adding a new section.
                             * - **editintro**: Gives the intro messages that should be shown to the user while editing this page or revision, as HTML.
                             * - **displaytitle**: Gives the manner in which the page title is actually displayed.
                             * - **varianttitles**: Gives the display title in all variants of the site content language.
                             * - **linkclasses**: Gives the additional CSS classes (e.g. link colors) used for links to this page if they were to appear on the page named by `inlinkcontext`.
                             */
                            inprop?: OneOrMore<
                                | "associatedpage"
                                | "displaytitle"
                                | "editintro"
                                | "linkclasses"
                                | "notificationtimestamp"
                                | "preload"
                                | "preloadcontent"
                                | "protection"
                                | "readable"
                                | "subjectid"
                                | "talkid"
                                | "url"
                                | "varianttitles"
                                | "visitingwatchers"
                                | "watched"
                                | "watchers"
                            >;
                            /**
                             * The context title to use when determining extra CSS classes (e.g. link colors) when `inprop` contains `linkclasses`.
                             */
                            inlinkcontext?: string;
                            /**
                             * Test whether the current user can perform certain actions on the page.
                             */
                            intestactions?: string | string[];
                            /**
                             * Detail level for `intestactions`. Use the {@link https://www.mediawiki.org/wiki/Special:ApiHelp/main main module}'s `errorformat` and `errorlang` parameters to control the format of the messages returned.
                             *
                             * - **boolean**: Return a boolean value for each action.
                             * - **full**: Return messages describing why the action is disallowed, or an empty array if it is allowed.
                             * - **quick**: Like `full` but skipping expensive checks.
                             *
                             * Defaults to `boolean`.
                             */
                            intestactionsdetail?: "boolean" | "full" | "quick";
                            /**
                             * Test whether performing `intestactions` would automatically create a temporary account.
                             */
                            intestactionsautocreate?: boolean;
                            /**
                             * Title of a custom page to use as preloaded content.
                             */
                            inpreloadcustom?: string;
                            /**
                             * Parameters for the custom page being used as preloaded content.
                             */
                            inpreloadparams?: string | string[];
                            /**
                             * Return preloaded content for a new section on the page, rather than a new page.
                             */
                            inpreloadnewsection?: boolean;
                            /**
                             * Some intro messages come with optional wrapper frames. Use `moreframes` to include them or `lessframes` to omit them.
                             *
                             * Defaults to `moreframes`.
                             */
                            ineditintrostyle?: "lessframes" | "moreframes";
                            /**
                             * List of intro messages to remove from the response. Use this if a specific message is not relevant to your tool, or if the information is conveyed in a different way.
                             */
                            ineditintroskip?: string | string[];
                            /**
                             * Title of a custom page to use as an additional intro message.
                             */
                            ineditintrocustom?: string;
                            /**
                             * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens action=query&meta=tokens} instead.
                             *
                             * @deprecated
                             */
                            intoken?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            incontinue?: string;
                        }

                        /**
                         * Determine if a page is marked as reviewed.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface IsReviewed extends Query {}

                        /**
                         * Returns all interwiki links from the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwlinks
                         */
                        // tslint:disable-next-line:interface-name
                        interface IWLinks extends Query {
                            /**
                             * Which additional properties to get for each interwiki link:
                             *
                             * - **url**: Adds the full URL.
                             */
                            iwprop?: OneOrMore<"url">;
                            /**
                             * Only return interwiki links with this prefix.
                             */
                            iwprefix?: string;
                            /**
                             * Interwiki link to search for. Must be used with `iwprefix`.
                             */
                            iwtitle?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            iwdir?: "ascending" | "descending";
                            /**
                             * How many interwiki links to return.
                             *
                             * Defaults to 10.
                             */
                            iwlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            iwcontinue?: string;
                            /**
                             * Whether to get the full URL (cannot be used with iwprop).
                             *
                             * @deprecated
                             */
                            iwurl?: boolean;
                        }

                        /**
                         * Returns all interlanguage links from the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langlinks
                         */
                        interface LangLinks extends Query {
                            /**
                             * Which additional properties to get for each interlanguage link:
                             *
                             * - **url**: Adds the full URL.
                             * - **langname**: Adds the localised language name (best effort). Use `llinlanguagecode` to control the language.
                             * - **autonym**: Adds the native language name.
                             */
                            llprop?: OneOrMore<"autonym" | "langname" | "url">;
                            /**
                             * Only return language links with this language code.
                             */
                            lllang?: string;
                            /**
                             * Link to search for. Must be used with `lllang`.
                             */
                            lltitle?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            lldir?: "ascending" | "descending";
                            /**
                             * Language code for localised language names.
                             *
                             * Defaults to `en`.
                             */
                            llinlanguagecode?: string;
                            /**
                             * How many langlinks to return.
                             *
                             * Defaults to 10.
                             */
                            lllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            llcontinue?: string;
                            /**
                             * Whether to get the full URL (cannot be used with `llprop`).
                             *
                             * @deprecated
                             */
                            llurl?: boolean;
                        }

                        /**
                         * Get the number of other language versions.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface LangLinksCount extends Query {}

                        /**
                         * Returns all links from the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                         */
                        interface Links extends Query {
                            /**
                             * Show links in these namespaces only.
                             */
                            plnamespace?: number | number[] | "*";
                            /**
                             * How many links to return.
                             *
                             * Defaults to 10.
                             */
                            pllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            plcontinue?: string;
                            /**
                             * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                             */
                            pltitles?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            pldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that link to the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                         */
                        interface LinksHere extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            lhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            lhnamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            lhshow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            lhlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            lhcontinue?: string;
                        }

                        /**
                         * Request all Kartographer map data for the given pages
                         *
                         * @private
                         */
                        interface MapData extends Query {
                            /**
                             * Pipe-separated groups to return data for
                             *
                             * Defaults to an empty string.
                             */
                            mpdgroups?: string;
                            /**
                             * Data for how many pages to return
                             *
                             * Defaults to 10.
                             */
                            mpdlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            mpdcontinue?: number;
                        }

                        /**
                         * Get the description and targets of a spamlist
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface MMContent extends Query {}

                        /**
                         * Return associated projects and assessments for the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                         */
                        interface PageAssessments extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            pacontinue?: string;
                            /**
                             * Limit for total number of projects returned (total for all pages).
                             *
                             * Defaults to 10.
                             */
                            palimit?: Limit;
                            /**
                             * Also return assessments by subprojects.
                             */
                            pasubprojects?: boolean;
                        }

                        /**
                         * Returns information about images on the page, such as thumbnail and presence of photos.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageImages#API
                         */
                        interface PageImages extends Query {
                            /**
                             * Which information to return:
                             *
                             * - **thumbnail**: URL and dimensions of thumbnail image associated with page, if any.
                             * - **name**: Image title.
                             * - **original**: URL and original dimensions of image associated with page, if any.
                             *
                             * Defaults to `thumbnail` and `name`.
                             */
                            piprop?: OneOrMore<"name" | "original" | "thumbnail">;
                            /**
                             * Maximum width in pixels of thumbnail images.
                             *
                             * Defaults to 50.
                             */
                            pithumbsize?: number;
                            /**
                             * Properties of how many pages to return.
                             *
                             * Defaults to 50.
                             */
                            pilimit?: Limit;
                            /**
                             * Limit page images to a certain license type:
                             *
                             * - **free**: Only free images.
                             * - **any**: Best image, whether free or non-free.
                             *
                             * Defaults to `free`.
                             */
                            pilicense?: "any" | "free";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            picontinue?: number;
                            /**
                             * Code for the language the image is going to be rendered in if multiple languages are supported
                             */
                            pilangcode?: string;
                        }

                        /**
                         * Get various page properties defined in the page content.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageprops
                         */
                        interface PageProps extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            ppcontinue?: string;
                            /**
                             * Only list these page properties ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use). Useful for checking whether pages use a certain page property.
                             */
                            ppprop?: string | string[];
                        }

                        /**
                         * Get the Wikidata terms (typically labels, descriptions and aliases) associated with a page via a sitelink.
                         */
                        interface PageTerms extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wbptcontinue?: number;
                            /**
                             * The language code to get terms in. If not specified, the user language is used.
                             *
                             * Defaults to `uselang`.
                             */
                            wbptlanguage?: string;
                            /**
                             * The types of terms to get, e.g. 'description', each returned as an array of strings keyed by their type, e.g. {"description": ["foo"]}. If not specified, all types are returned.
                             *
                             * Defaults to `alias`, `label`, and `description`.
                             */
                            wbptterms?: OneOrMore<"alias" | "description" | "label">;
                        }

                        /**
                         * Shows per-page pageview data (the number of daily pageviews for each of the last `pvipdays` days).
                         *
                         * The result format is page title (with underscores) => date (Ymd) => count.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                         */
                        interface PageViews extends Query {
                            /**
                             * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                             *
                             * - **pageviews**: Plain pageviews.
                             *
                             * Defaults to `pageviews`.
                             */
                            pvipmetric?: "pageviews";
                            /**
                             * The number of days to show.
                             *
                             * Defaults to 60.
                             */
                            pvipdays?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            pvipcontinue?: string;
                        }

                        /**
                         * Returns information about the current proofread status of the given pages.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface Proofread extends Query {}

                        /**
                         * Returns all redirects to the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                         */
                        interface Redirects extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each redirect.
                             * - **title**: Title of each redirect.
                             * - **fragment**: Fragment of each redirect, if any.
                             *
                             * Defaults to `pageid` and `title`.
                             */
                            rdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            rdnamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **fragment**: Only show redirects with a fragment.
                             * - **!fragment**: Only show redirects without a fragment.
                             */
                            rdshow?: OneOrMore<Toggle<"fragment">>;
                            /**
                             * How many redirects to return.
                             *
                             * Defaults to 10.
                             */
                            rdlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rdcontinue?: string;
                        }

                        /**
                         * Get revision information.
                         *
                         * May be used in several ways:
                         *
                         * - Get data about a set of pages (last revision), by setting titles or pageids.
                         * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                         * - Get data about a set of revisions by setting their IDs with revids.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                         */
                        interface Revisions extends Query {
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            rvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flagged"
                                | "flags"
                                | "ids"
                                | "oresscores"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            rvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `rvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                             */
                            rvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                             *
                             * @deprecated
                             */
                            rvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                             *
                             * @deprecated
                             */
                            rvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            rvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            rvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            rvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            rvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                             *
                             * @deprecated
                             */
                            rvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `rvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            rvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                             */
                            rvstartid?: number;
                            /**
                             * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                             */
                            rvendid?: number;
                            /**
                             * From which revision timestamp to start enumeration.
                             */
                            rvstart?: string;
                            /**
                             * Enumerate up to this timestamp.
                             */
                            rvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                             * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                             *
                             * Defaults to `older`.
                             */
                            rvdir?: "newer" | "older";
                            /**
                             * Only include revisions made by user.
                             */
                            rvuser?: string;
                            /**
                             * Exclude revisions made by user.
                             */
                            rvexcludeuser?: string;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            rvtag?: string;
                            /**
                             * Which tokens to obtain for each revision.
                             *
                             * @deprecated
                             */
                            rvtoken?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rvcontinue?: string;
                        }

                        /**
                         * Returns file information for stashed files.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Stashimageinfo
                         */
                        interface StashImageInfo extends Query {
                            /**
                             * Key that identifies a previous upload that was stashed temporarily.
                             */
                            siifilekey?: string | string[];
                            /**
                             * Alias for siifilekey, for backward compatibility.
                             *
                             * @deprecated
                             */
                            siisessionkey?: string | string[];
                            /**
                             * Which file information to get:
                             *
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **thumbmime**: Adds MIME type of the image thumbnail (requires url and param siiurlwidth). If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             *
                             * Defaults to `timestamp` and `url`.
                             */
                            siiprop?: OneOrMore<
                                | "badfile"
                                | "bitdepth"
                                | "canonicaltitle"
                                | "commonmetadata"
                                | "dimensions"
                                | "extmetadata"
                                | "metadata"
                                | "mime"
                                | "sha1"
                                | "size"
                                | "thumbmime"
                                | "timestamp"
                                | "url"
                            >;
                            /**
                             * If siiprop=url is set, a URL to an image scaled to this width will be returned.
                             * For performance reasons if this option is used, no more than 50 scaled images will be returned.
                             *
                             * Defaults to -1.
                             */
                            siiurlwidth?: number;
                            /**
                             * Similar to siiurlwidth.
                             *
                             * Defaults to -1.
                             */
                            siiurlheight?: number;
                            /**
                             * A handler specific parameter string. For example, PDFs might use `page15-100px`. `siiurlwidth` must be used and be consistent with `siiurlparam`.
                             *
                             * Defaults to an empty string.
                             */
                            siiurlparam?: string;
                        }

                        /**
                         * Returns all pages transcluded on the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                         */
                        interface Templates extends Query {
                            /**
                             * Show templates in these namespaces only.
                             */
                            tlnamespace?: number | number[] | "*";
                            /**
                             * How many templates to return.
                             *
                             * Defaults to 10.
                             */
                            tllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            tlcontinue?: string;
                            /**
                             * Only list these templates. Useful for checking whether a certain page uses a certain template.
                             */
                            tltemplates?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            tldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that transclude the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                         */
                        interface Transcludedin extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            tiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            tinamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            tishow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            tilimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            ticontinue?: string;
                        }

                        /**
                         * Get transcode status for a given file page.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface TranscodeStatus extends Query {}

                        /**
                         * Extends imageinfo to include video source (derivatives) information
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Videoinfo
                         */
                        interface VideoInfo extends Query {
                            /**
                             * Which file information to get:
                             *
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **thumbmime**: Adds MIME type of the image thumbnail (requires url and param viurlwidth). If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **archivename**: Adds the filename of the archive version for non-latest versions. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **uploadwarning**: Used by the Special:Upload page to get information about an existing file. Not intended for use outside MediaWiki core.
                             * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             * - **derivatives**: Adds an array of the different format and quality versions of an audio or video file that are available.
                             * - **timedtext**: Adds an array of the subtitles, captions and descriptions of an audio or video file that are available.
                             *
                             * Defaults to `timestamp` and `user`.
                             */
                            viprop?: OneOrMore<
                                | "archivename"
                                | "badfile"
                                | "bitdepth"
                                | "canonicaltitle"
                                | "comment"
                                | "commonmetadata"
                                | "derivatives"
                                | "dimensions"
                                | "extmetadata"
                                | "mediatype"
                                | "metadata"
                                | "mime"
                                | "parsedcomment"
                                | "sha1"
                                | "size"
                                | "thumbmime"
                                | "timedtext"
                                | "timestamp"
                                | "uploadwarning"
                                | "url"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * How many file revisions to return per file.
                             *
                             * Defaults to 1.
                             */
                            vilimit?: Limit;
                            /**
                             * Timestamp to start listing from.
                             */
                            vistart?: string;
                            /**
                             * Timestamp to stop listing at.
                             */
                            viend?: string;
                            /**
                             * If viprop=url is set, a URL to an image scaled to this width will be returned.
                             * For performance reasons if this option is used, no more than 50 scaled images will be returned.
                             *
                             * Defaults to -1.
                             */
                            viurlwidth?: number;
                            /**
                             * Similar to viurlwidth.
                             *
                             * Defaults to -1.
                             */
                            viurlheight?: number;
                            /**
                             * Version of metadata to use. If `latest` is specified, use latest version. Defaults to `1` for backwards compatibility.
                             *
                             * Defaults to `1`.
                             */
                            vimetadataversion?: string;
                            /**
                             * What language to fetch extmetadata in. This affects both which translation to fetch, if multiple are available, as well as how things like numbers and various values are formatted.
                             *
                             * Defaults to `en`.
                             */
                            viextmetadatalanguage?: string;
                            /**
                             * If translations for extmetadata property are available, fetch all of them.
                             */
                            viextmetadatamultilang?: boolean;
                            /**
                             * If specified and non-empty, only these keys will be returned for viprop=extmetadata.
                             */
                            viextmetadatafilter?: string | string[];
                            /**
                             * A handler specific parameter string. For example, PDFs might use `page15-100px`. `viurlwidth` must be used and be consistent with `viurlparam`.
                             *
                             * Defaults to an empty string.
                             */
                            viurlparam?: string;
                            /**
                             * If `badfilecontexttitleprop=badfile` is set, this is the page title used when evaluating the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             */
                            vibadfilecontexttitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            vicontinue?: string;
                            /**
                             * Look only for files in the local repository.
                             */
                            vilocalonly?: boolean;
                        }

                        /**
                         * Returns all entity IDs used in the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API#wbentityusage
                         */
                        interface WBEntityUsage extends Query {
                            /**
                             * Properties to add to the result.
                             *
                             * - **url**: If enabled url of entity will be added
                             */
                            wbeuprop?: OneOrMore<"url">;
                            /**
                             * Only return entity IDs that used this aspect.
                             *
                             * - **S**: The entity's sitelinks are used
                             * - **L**: The entity's label is used
                             * - **D**: The entity's description is used
                             * - **T**: The title of the local page corresponding to the entity is used
                             * - **C**: Statements from the entity are used
                             * - **X**: All aspects of an entity are or may be used
                             * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                             */
                            wbeuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                            /**
                             * Only return page that used these entities.
                             */
                            wbeuentities?: string | string[];
                            /**
                             * How many entity usages to return.
                             *
                             * Defaults to 10.
                             */
                            wbeulimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wbeucontinue?: string;
                        }
                    }

                    namespace List {
                        /**
                         * Show details of the abuse filters.
                         */
                        interface AbuseFilters extends Query {
                            /**
                             * The filter ID to start enumerating from.
                             */
                            abfstartid?: number;
                            /**
                             * The filter ID to stop enumerating at.
                             */
                            abfendid?: number;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            abfdir?: "newer" | "older";
                            /**
                             * Show only filters which meet these criteria.
                             */
                            abfshow?: OneOrMore<
                                Toggle<"deleted" | "enabled" | "private" | "protected">
                            >;
                            /**
                             * The maximum number of filters to list.
                             *
                             * Defaults to 10.
                             */
                            abflimit?: Limit;
                            /**
                             * Which properties to get.
                             *
                             * Defaults to `id`, `description`, `actions`, and `status`.
                             */
                            abfprop?: OneOrMore<
                                | "actions"
                                | "comments"
                                | "description"
                                | "hits"
                                | "id"
                                | "lasteditor"
                                | "lastedittime"
                                | "pattern"
                                | "private"
                                | "protected"
                                | "status"
                            >;
                        }

                        /**
                         * Show events that were caught by one of the abuse filters.
                         */
                        interface AbuseLog extends Query {
                            /**
                             * Show an entry with the given log ID.
                             */
                            afllogid?: number;
                            /**
                             * The timestamp to start enumerating from.
                             */
                            aflstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            aflend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `older`.
                             */
                            afldir?: "newer" | "older";
                            /**
                             * Show only entries done by a given user or IP address.
                             */
                            afluser?: string;
                            /**
                             * Show only entries occurring on a given page.
                             */
                            afltitle?: string;
                            /**
                             * Show only entries that were caught by the given filter IDs. Separate with pipes, prefix with "global-" for global filters.
                             */
                            aflfilter?: string | string[];
                            /**
                             * The maximum amount of entries to list.
                             *
                             * Defaults to 10.
                             */
                            afllimit?: Limit;
                            /**
                             * Which properties to get.
                             */
                            aflprop?: OneOrMore<
                                | "action"
                                | "details"
                                | "filter"
                                | "hidden"
                                | "ids"
                                | "result"
                                | "revid"
                                | "timestamp"
                                | "title"
                                | "user"
                                | "wiki"
                            >;
                            /**
                             * Wiki to show hits from.
                             */
                            aflwiki?: string;
                        }

                        /**
                         * Enumerate all UploadWizard campaigns.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:UploadWizard
                         */
                        interface AllCampaigns extends Query {
                            /**
                             * Only list campaigns that are enabled.
                             */
                            uwcenabledonly?: boolean;
                            /**
                             * Number of campaigns to return.
                             *
                             * Defaults to 50.
                             */
                            uwclimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            uwccontinue?: string;
                        }

                        /**
                         * Enumerate all categories.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                         */
                        interface AllCategories extends Query {
                            /**
                             * The category to start enumerating from.
                             */
                            acfrom?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            accontinue?: string;
                            /**
                             * The category to stop enumerating at.
                             */
                            acto?: string;
                            /**
                             * Search for all category titles that begin with this value.
                             */
                            acprefix?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            acdir?: "ascending" | "descending";
                            /**
                             * Only return categories with at least this many members.
                             */
                            acmin?: number;
                            /**
                             * Only return categories with at most this many members.
                             */
                            acmax?: number;
                            /**
                             * How many categories to return.
                             *
                             * Defaults to 10.
                             */
                            aclimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **size**: Adds number of pages in the category.
                             * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                             *
                             * Defaults to an empty string.
                             */
                            acprop?: OneOrMore<"hidden" | "size">;
                        }

                        /**
                         * List all deleted revisions by a user or in a namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                         */
                        interface AllDeletedRevisions extends Query {
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            adrprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            adrslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `adrcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                             */
                            adrlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                             *
                             * @deprecated
                             */
                            adrexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                             *
                             * @deprecated
                             */
                            adrgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            adrparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            adrsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            adrdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            adrdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                             *
                             * @deprecated
                             */
                            adrdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `adrdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            adrcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Only list revisions by this user.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            adruser?: string;
                            /**
                             * Only list pages in this namespace.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            adrnamespace?: number | number[] | "*";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            adrstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            adrend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                             * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                             *
                             * Defaults to `older`.
                             */
                            adrdir?: "newer" | "older";
                            /**
                             * Start listing at this title.
                             */
                            adrfrom?: string;
                            /**
                             * Stop listing at this title.
                             */
                            adrto?: string;
                            /**
                             * Search for all page titles that begin with this value.
                             */
                            adrprefix?: string;
                            /**
                             * Don't list revisions by this user.
                             */
                            adrexcludeuser?: string;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            adrtag?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            adrcontinue?: string;
                            /**
                             * When being used as a generator, generate titles rather than revision IDs.
                             */
                            adrgeneratetitles?: boolean;
                        }

                        /**
                         * List all file usages, including non-existing.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                         */
                        interface AllFileUsages extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            afcontinue?: string;
                            /**
                             * The title of the file to start enumerating from.
                             */
                            affrom?: string;
                            /**
                             * The title of the file to stop enumerating at.
                             */
                            afto?: string;
                            /**
                             * Search for all file titles that begin with this value.
                             */
                            afprefix?: string;
                            /**
                             * Only show distinct file titles. Cannot be used with afprop=ids.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            afunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                             * - **title**: Adds the title of the file.
                             *
                             * Defaults to `title`.
                             */
                            afprop?: OneOrMore<"ids" | "title">;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            aflimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            afdir?: "ascending" | "descending";
                        }

                        /**
                         * Enumerate all images sequentially.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                         */
                        interface AllImages extends Query {
                            /**
                             * Property to sort by.
                             *
                             * Defaults to `name`.
                             */
                            aisort?: "name" | "timestamp";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            aidir?: "ascending" | "descending" | "newer" | "older";
                            /**
                             * The image title to start enumerating from. Can only be used with aisort=name.
                             */
                            aifrom?: string;
                            /**
                             * The image title to stop enumerating at. Can only be used with aisort=name.
                             */
                            aito?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            aicontinue?: string;
                            /**
                             * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                             */
                            aistart?: string;
                            /**
                             * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                             */
                            aiend?: string;
                            /**
                             * Which file information to get:
                             *
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             *
                             * Defaults to `timestamp` and `url`.
                             */
                            aiprop?: OneOrMore<
                                | "badfile"
                                | "bitdepth"
                                | "canonicaltitle"
                                | "comment"
                                | "commonmetadata"
                                | "dimensions"
                                | "extmetadata"
                                | "mediatype"
                                | "metadata"
                                | "mime"
                                | "parsedcomment"
                                | "sha1"
                                | "size"
                                | "timestamp"
                                | "url"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Search for all image titles that begin with this value. Can only be used with aisort=name.
                             */
                            aiprefix?: string;
                            /**
                             * Limit to images with at least this many bytes.
                             */
                            aiminsize?: number;
                            /**
                             * Limit to images with at most this many bytes.
                             */
                            aimaxsize?: number;
                            /**
                             * SHA1 hash of image. Overrides aisha1base36.
                             */
                            aisha1?: string;
                            /**
                             * SHA1 hash of image in base 36 (used in MediaWiki).
                             */
                            aisha1base36?: string;
                            /**
                             * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                             */
                            aiuser?: string;
                            /**
                             * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                             *
                             * Defaults to `all`.
                             */
                            aifilterbots?: "all" | "bots" | "nobots";
                            /**
                             * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                             */
                            aimime?: string | string[];
                            /**
                             * How many images in total to return.
                             *
                             * Defaults to 10.
                             */
                            ailimit?: Limit;
                        }

                        /**
                         * Enumerate all links that point to a given namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                         */
                        interface AllLinks extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            alcontinue?: string;
                            /**
                             * The title of the link to start enumerating from.
                             */
                            alfrom?: string;
                            /**
                             * The title of the link to stop enumerating at.
                             */
                            alto?: string;
                            /**
                             * Search for all linked titles that begin with this value.
                             */
                            alprefix?: string;
                            /**
                             * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            alunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                             * - **title**: Adds the title of the link.
                             *
                             * Defaults to `title`.
                             */
                            alprop?: OneOrMore<"ids" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            alnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            allimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            aldir?: "ascending" | "descending";
                        }

                        /**
                         * Enumerate all pages sequentially in a given namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                         */
                        interface AllPages extends Query {
                            /**
                             * The page title to start enumerating from.
                             */
                            apfrom?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            apcontinue?: string;
                            /**
                             * The page title to stop enumerating at.
                             */
                            apto?: string;
                            /**
                             * Search for all page titles that begin with this value.
                             */
                            apprefix?: string;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            apnamespace?: number;
                            /**
                             * Which pages to list.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                             *
                             * Defaults to `all`.
                             */
                            apfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                             *
                             * Defaults to `all`.
                             */
                            apfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                            /**
                             * Limit to pages with at least this many bytes.
                             */
                            apminsize?: number;
                            /**
                             * Limit to pages with at most this many bytes.
                             */
                            apmaxsize?: number;
                            /**
                             * Limit to protected pages only.
                             */
                            apprtype?: OneOrMore<"edit" | "move" | "upload">;
                            /**
                             * Filter protections based on protection level (must be used with apprtype= parameter).
                             */
                            apprlevel?: string | string[];
                            /**
                             * Filter protections based on cascadingness (ignored when apprtype isn't set).
                             *
                             * Defaults to `all`.
                             */
                            apprfiltercascade?: "all" | "cascading" | "noncascading";
                            /**
                             * Which protection expiry to filter the page on:
                             *
                             * - **indefinite**: Get only pages with indefinite protection expiry.
                             * - **definite**: Get only pages with a definite (specific) protection expiry.
                             * - **all**: Get pages with any protections expiry.
                             *
                             * Defaults to `all`.
                             */
                            apprexpiry?: "all" | "definite" | "indefinite";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            aplimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            apdir?: "ascending" | "descending";
                        }

                        /**
                         * List all redirects to a namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                         */
                        interface AllRedirects extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            arcontinue?: string;
                            /**
                             * The title of the redirect to start enumerating from.
                             */
                            arfrom?: string;
                            /**
                             * The title of the redirect to stop enumerating at.
                             */
                            arto?: string;
                            /**
                             * Search for all target pages that begin with this value.
                             */
                            arprefix?: string;
                            /**
                             * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            arunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                             * - **title**: Adds the title of the redirect.
                             * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                             * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                             *
                             * Defaults to `title`.
                             */
                            arprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            arnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            arlimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            ardir?: "ascending" | "descending";
                        }

                        /**
                         * List all revisions.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                         */
                        interface AllRevisions extends Query {
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            arvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "oresscores"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            arvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `arvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                             */
                            arvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                             *
                             * @deprecated
                             */
                            arvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                             *
                             * @deprecated
                             */
                            arvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            arvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            arvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            arvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            arvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                             *
                             * @deprecated
                             */
                            arvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `arvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            arvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Only list revisions by this user.
                             */
                            arvuser?: string;
                            /**
                             * Only list pages in this namespace.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            arvnamespace?: number | number[] | "*";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            arvstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            arvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                             * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                             *
                             * Defaults to `older`.
                             */
                            arvdir?: "newer" | "older";
                            /**
                             * Don't list revisions by this user.
                             */
                            arvexcludeuser?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            arvcontinue?: string;
                            /**
                             * When being used as a generator, generate titles rather than revision IDs.
                             */
                            arvgeneratetitles?: boolean;
                        }

                        /**
                         * List all transclusions (pages embedded using {{x}}), including non-existing.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                         */
                        interface AllTransclusions extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            atcontinue?: string;
                            /**
                             * The title of the transclusion to start enumerating from.
                             */
                            atfrom?: string;
                            /**
                             * The title of the transclusion to stop enumerating at.
                             */
                            atto?: string;
                            /**
                             * Search for all transcluded titles that begin with this value.
                             */
                            atprefix?: string;
                            /**
                             * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            atunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                             * - **title**: Adds the title of the transclusion.
                             *
                             * Defaults to `title`.
                             */
                            atprop?: OneOrMore<"ids" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 10.
                             */
                            atnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            atlimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            atdir?: "ascending" | "descending";
                        }

                        /**
                         * Enumerate all registered users.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allusers
                         */
                        interface AllUsers extends Query {
                            /**
                             * The username to start enumerating from.
                             */
                            aufrom?: string;
                            /**
                             * The username to stop enumerating at.
                             */
                            auto?: string;
                            /**
                             * Search for all users that begin with this value.
                             */
                            auprefix?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            audir?: "ascending" | "descending";
                            /**
                             * Only include users in the given groups. Does not include implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            augroup?: string | string[];
                            /**
                             * Exclude users in the given groups.
                             */
                            auexcludegroup?: string | string[];
                            /**
                             * Only include users with the given rights. Does not include rights granted by implicit or auto-promoted groups like *, user, or autoconfirmed.
                             */
                            aurights?: string | string[];
                            /**
                             * Which pieces of information to include:
                             *
                             * - **blockinfo**: Adds the information about a current block on the user.
                             * - **groups**: Lists groups that the user is in. This uses more server resources and may return fewer results than the limit.
                             * - **implicitgroups**: Lists all the groups the user is automatically in.
                             * - **rights**: Lists rights that the user has.
                             * - **editcount**: Adds the edit count of the user.
                             * - **registration**: Adds the timestamp of when the user registered if available (may be blank).
                             * - **centralids**: Adds the central IDs and attachment status for the user.
                             */
                            auprop?: OneOrMore<
                                | "blockinfo"
                                | "centralids"
                                | "editcount"
                                | "groups"
                                | "implicitgroups"
                                | "registration"
                                | "rights"
                            >;
                            /**
                             * How many total usernames to return.
                             *
                             * Defaults to 10.
                             */
                            aulimit?: Limit;
                            /**
                             * Only list users who have made edits.
                             */
                            auwitheditsonly?: boolean;
                            /**
                             * Only list users active in the last 30 days.
                             */
                            auactiveusers?: boolean;
                            /**
                             * With `auprop=centralids`, also indicate whether the user is attached with the wiki identified by this ID.
                             */
                            auattachedwiki?: string;
                            /**
                             * Exclude users of named accounts.
                             */
                            auexcludenamed?: boolean;
                            /**
                             * Exclude users of temporary accounts.
                             */
                            auexcludetemp?: boolean;
                        }

                        /**
                         * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                         */
                        interface AutomaticTranslationDenseLanguages extends Query {
                            /**
                             * The Wikidata ID.
                             */
                            "qid": string;
                            /**
                             * A boolean value indicating whether the section titles should be included in the response.
                             */
                            "section-titles"?: boolean;
                        }

                        /**
                         * Find all pages that link to the given page.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                         */
                        interface Backlinks extends Query {
                            /**
                             * Title to search. Cannot be used together with `blpageid`.
                             */
                            bltitle?: string;
                            /**
                             * Page ID to search. Cannot be used together with `bltitle`.
                             */
                            blpageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            blcontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            blnamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            bldir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                             *
                             * Defaults to `all`.
                             */
                            blfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                             *
                             * Defaults to 10.
                             */
                            bllimit?: Limit;
                            /**
                             * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                             */
                            blredirect?: boolean;
                        }

                        /**
                         * List all BetaFeatures
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:BetaFeatures
                         */
                        interface BetaFeatures extends Query {
                            /**
                             * Whether to fetch how many users have enabled a certain preference.
                             */
                            bfcounts?: string;
                        }

                        /**
                         * List all blocked users and IP addresses.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Blocks
                         */
                        interface Blocks extends Query {
                            /**
                             * The timestamp to start enumerating from.
                             */
                            bkstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            bkend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: bkstart has to be before bkend.
                             * - **older**: List newest first (default). Note: bkstart has to be later than bkend.
                             *
                             * Defaults to `older`.
                             */
                            bkdir?: "newer" | "older";
                            /**
                             * List of block IDs to list (optional).
                             */
                            bkids?: number | number[];
                            /**
                             * List of users to search for (optional).
                             */
                            bkusers?: string | string[];
                            /**
                             * Get all blocks applying to this IP address or CIDR range, including range blocks.
                             * Cannot be used together with `bkusers`. CIDR ranges broader than IPv4/16 or IPv6/19 are not accepted.
                             */
                            bkip?: string;
                            /**
                             * The maximum number of blocks to list.
                             *
                             * Defaults to 10.
                             */
                            bklimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **id**: Adds the ID of the block.
                             * - **user**: Adds the username of the blocked user.
                             * - **userid**: Adds the user ID of the blocked user.
                             * - **by**: Adds the username of the blocking user.
                             * - **byid**: Adds the user ID of the blocking user.
                             * - **timestamp**: Adds the timestamp of when the block was given.
                             * - **expiry**: Adds the timestamp of when the block expires.
                             * - **reason**: Adds the reason given for the block.
                             * - **range**: Adds the range of IP addresses affected by the block.
                             * - **flags**: Tags the ban with (autoblock, anononly, etc.).
                             * - **restrictions**: Adds the partial block restrictions if the block is not sitewide.
                             *
                             * Defaults to `id`, `user`, `by`, `timestamp`, `expiry`, `reason`, and `flags`.
                             */
                            bkprop?: OneOrMore<
                                | "by"
                                | "byid"
                                | "expiry"
                                | "flags"
                                | "id"
                                | "range"
                                | "reason"
                                | "restrictions"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Show only items that meet these criteria.
                             * For example, to see only indefinite blocks on IP addresses, set `bkshow=ip|!temp`.
                             */
                            bkshow?: OneOrMore<Toggle<"account" | "ip" | "range" | "temp">>;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            bkcontinue?: string;
                        }

                        /**
                         * List all pages in a given category.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                         */
                        interface CategoryMembers extends Query {
                            /**
                             * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                             */
                            cmtitle?: string;
                            /**
                             * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                             */
                            cmpageid?: number;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                             * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                             * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                             * - **timestamp**: Adds the timestamp of when the page was included.
                             *
                             * Defaults to `ids` and `title`.
                             */
                            cmprop?: OneOrMore<
                                "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                            >;
                            /**
                             * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            cmnamespace?: number | number[] | "*";
                            /**
                             * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                             *
                             * Defaults to `page`, `subcat`, and `file`.
                             */
                            cmtype?: OneOrMore<"file" | "page" | "subcat">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            cmcontinue?: string;
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            cmlimit?: Limit;
                            /**
                             * Property to sort by.
                             *
                             * Defaults to `sortkey`.
                             */
                            cmsort?: "sortkey" | "timestamp";
                            /**
                             * In which direction to sort.
                             *
                             * Defaults to `ascending`.
                             */
                            cmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                            /**
                             * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                             */
                            cmstart?: string;
                            /**
                             * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                             */
                            cmend?: string;
                            /**
                             * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                             */
                            cmstarthexsortkey?: string;
                            /**
                             * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                             */
                            cmendhexsortkey?: string;
                            /**
                             * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                             */
                            cmstartsortkeyprefix?: string;
                            /**
                             * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                             */
                            cmendsortkeyprefix?: string;
                            /**
                             * Use cmstarthexsortkey instead.
                             *
                             * @deprecated
                             */
                            cmstartsortkey?: string;
                            /**
                             * Use cmendhexsortkey instead.
                             *
                             * @deprecated
                             */
                            cmendsortkey?: string;
                        }

                        /**
                         * Get a list of currently active campaigns with start and end dates and associated banners.
                         */
                        interface CentralNoticeActiveCampaigns extends Query {
                            /**
                             * Include enabled future campaigns (as well as currently active campaigns).
                             */
                            cnacincludefuture?: boolean;
                        }

                        /**
                         * Get a log of campaign configuration changes.
                         */
                        interface CentralNoticeLogs extends Query {
                            /**
                             * Campaign name (optional). Separate multiple values with a "|" (vertical bar).
                             */
                            campaign?: string;
                            /**
                             * Username (optional).
                             */
                            user?: string;
                            /**
                             * Maximum rows to return (optional).
                             *
                             * Defaults to 50.
                             */
                            limit?: Limit;
                            /**
                             * Offset into result set (optional).
                             *
                             * Defaults to 0.
                             */
                            offset?: number;
                            /**
                             * Start time of range (optional).
                             */
                            start?: string;
                            /**
                             * End time of range (optional).
                             */
                            end?: string;
                        }

                        /**
                         * Check which IP addresses are used by a given username or which usernames are used by a given IP address.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:CheckUser#API
                         */
                        interface CheckUser extends Query {
                            /**
                             * Type of CheckUser request:
                             *
                             * - **userips**: Get IP address of target user.
                             * - **edits**: Deprecated. Get actions performed by target IP address or range.
                             * - **actions**: Get actions performed by target IP address or range.
                             * - **ipusers**: Get users from target IP address or range.
                             */
                            curequest: "actions" | "edits" | "ipusers" | "userips";
                            /**
                             * Username, IP address, or CIDR range to check.
                             */
                            cutarget: string;
                            /**
                             * Reason to check.
                             *
                             * Defaults to an empty string.
                             */
                            cureason: string;
                            /**
                             * Limit of rows.
                             *
                             * Defaults to 500.
                             */
                            culimit?: Limit;
                            /**
                             * Time limit of user data (like "-2 weeks" or "2 weeks ago").
                             *
                             * Defaults to `-2 weeks`.
                             */
                            cutimecond?: string;
                            /**
                             * Use XFF data instead of IP address.
                             */
                            cuxff?: string;
                            /**
                             * A "csrf" token retrieved from {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Btokens action=query&meta=tokens}
                             *
                             * Sensitive parameter.
                             */
                            cutoken: string;
                        }

                        /**
                         * Get entries from the CheckUser log.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:CheckUser#API
                         */
                        interface CheckUserLog extends Query {
                            /**
                             * Username of the CheckUser.
                             */
                            culuser?: string;
                            /**
                             * Checked user, IP address, or CIDR range.
                             */
                            cultarget?: string;
                            /**
                             * Reason given for the check.
                             */
                            culreason?: string;
                            /**
                             * Limit of rows.
                             *
                             * Defaults to 10.
                             */
                            cullimit?: Limit;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: culfrom has to be before culto.
                             * - **older**: List newest first (default). Note: culfrom has to be later than culto.
                             *
                             * Defaults to `older`.
                             */
                            culdir?: "newer" | "older";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            culfrom?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            culto?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            culcontinue?: string;
                        }

                        /**
                         * Enumerate all pages that have custom review configurations.
                         */
                        interface Configuredpages extends Query {
                            /**
                             * Start listing at this page ID.
                             */
                            cpstart?: number;
                            /**
                             * Stop listing at this page ID.
                             */
                            cpend?: number;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            cpdir?: "newer" | "older";
                            /**
                             * The namespaces to enumerate.
                             */
                            cpnamespace?: number | number[] | "*";
                            /**
                             * The default page view version.
                             */
                            cpdefault?: "latest" | "stable";
                            /**
                             * Review/autoreview restriction level.
                             */
                            cpautoreview?: "none" | "sysop";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            cplimit?: Limit;
                        }

                        /**
                         * Query Content Translation database for translations.
                         */
                        interface ContentTranslation extends Query {
                            /**
                             * Translation ID.
                             */
                            translationid?: string;
                            /**
                             * The source language code.
                             */
                            from?: string;
                            /**
                             * The target language code.
                             */
                            to?: string;
                            /**
                             * The title of the source page.
                             */
                            sourcetitle?: string;
                            /**
                             * The title of the source section (optional).
                             */
                            sourcesectiontitle?: string;
                            /**
                             * The maximum number of translations to fetch.
                             *
                             * Defaults to 100.
                             */
                            limit?: Limit;
                            /**
                             * Offset into result set (optional).
                             */
                            offset?: string;
                            /**
                             * State of the translation.
                             */
                            type?: "draft" | "published";
                            /**
                             * The usecase for which the translations are being fetched (optional).
                             */
                            usecase?:
                                | "desktop-editor-draft"
                                | "translation-corpora-units"
                                | "unified-dashboard";
                        }

                        /**
                         * Get the section-aligned parallel text for a given translation. See also `list=cxpublishedtranslations`. Dumps are provided in different formats for high volume access.
                         */
                        interface ContentTranslationCorpora extends Query {
                            /**
                             * ID of the translation.
                             */
                            translationid: number;
                            /**
                             * Whether to strip all HTML tags to return plaintext.
                             */
                            striphtml?: boolean;
                            /**
                             * By default you will get all three of following if available: source text, machine translation and the postedited translation by the user. This parameter allows you not return some of these types.
                             *
                             * Defaults to `source`, `mt`, and `user`.
                             */
                            types?: OneOrMore<"mt" | "source" | "user">;
                        }

                        /**
                         * Query Content Translation database for numbers of translations by period of time.
                         */
                        interface ContentTranslationLangTrend extends Query {
                            /**
                             * The source language code.
                             */
                            source?: string;
                            /**
                             * The target language code.
                             */
                            target?: string;
                            /**
                             * The interval for calculating the trend. Can be `week` or `month`.
                             *
                             * Defaults to `week`.
                             */
                            interval?: "month" | "week";
                        }

                        /**
                         * Get Content Translation statistics.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface ContentTranslationStats extends Query {}

                        /**
                         * Get suggestion lists for Content Translation.
                         */
                        interface ContentTranslationSuggestions extends Query {
                            /**
                             * The source language code.
                             */
                            from?: string;
                            /**
                             * The target language code.
                             */
                            to?: string;
                            /**
                             * Return suggestions only from a particular list
                             */
                            listid?: string;
                            /**
                             * The maximum number of translation suggestions to fetch.
                             *
                             * Defaults to 10.
                             */
                            limit?: Limit;
                            /**
                             * Offset for paginated results.
                             */
                            offset?: string;
                            /**
                             * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                             */
                            seed?: number;
                        }

                        /**
                         * Fetch all published translations information.
                         */
                        interface CXPublishedTranslations extends Query {
                            /**
                             * The source language code.
                             */
                            from?: string;
                            /**
                             * The target language code.
                             */
                            to?: string;
                            /**
                             * The maximum number of translations to fetch.
                             *
                             * Defaults to 500.
                             */
                            limit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to an empty string.
                             */
                            offset?: string;
                        }

                        /**
                         * Fetch the translation statistics for the given user.
                         */
                        interface CXTranslatorStats extends Query {
                            /**
                             * The translator's username. This parameter is optional. If not passed, the currently logged-in user will be used.
                             */
                            translator?: string;
                        }

                        /**
                         * List deleted revisions.
                         *
                         * Operates in three modes:
                         *
                         * - List deleted revisions for the given titles, sorted by timestamp.
                         * - List deleted contributions for the given user, sorted by timestamp (no titles specified).
                         * - List all deleted revisions in the given namespace, sorted by title and timestamp (no titles specified, druser not set).
                         * Certain parameters only apply to some modes and are ignored in others.
                         *
                         * @deprecated
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevs
                         */
                        interface Deletedrevs extends Query {
                            /**
                             * The timestamp to start enumerating from.
                             */
                            drstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            drend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: drstart has to be before drend.
                             * - **older**: List newest first (default). Note: drstart has to be later than drend.
                             *
                             * Defaults to `older`.
                             */
                            drdir?: "newer" | "older";
                            /**
                             * Start listing at this title.
                             */
                            drfrom?: string;
                            /**
                             * Stop listing at this title.
                             */
                            drto?: string;
                            /**
                             * Search for all page titles that begin with this value.
                             */
                            drprefix?: string;
                            /**
                             * List only one revision for each page.
                             */
                            drunique?: boolean;
                            /**
                             * Only list pages in this namespace.
                             *
                             * Defaults to 0.
                             */
                            drnamespace?: number;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            drtag?: string;
                            /**
                             * Only list revisions by this user.
                             */
                            druser?: string;
                            /**
                             * Don't list revisions by this user.
                             */
                            drexcludeuser?: string;
                            /**
                             * Which properties to get:
                             *
                             * - **revid**: Adds the revision ID of the deleted revision.
                             * - **parentid**: Adds the revision ID of the previous revision to the page.
                             * - **user**: Adds the user who made the revision.
                             * - **userid**: Adds the ID of the user who made the revision.
                             * - **comment**: Adds the comment of the revision.
                             * - **parsedcomment**: Adds the parsed comment of the revision.
                             * - **minor**: Tags if the revision is minor.
                             * - **len**: Adds the length (bytes) of the revision.
                             * - **sha1**: Adds the SHA-1 (base 16) of the revision.
                             * - **content**: Adds the content of the revision. For performance reasons, if this option is used, `drlimit` is enforced to 50.
                             * - **token**: Deprecated. Gives the edit token.
                             * - **tags**: Tags for the revision.
                             *
                             * Defaults to `user` and `comment`.
                             */
                            drprop?: string | string[];
                            /**
                             * The maximum amount of revisions to list. If `drprop=content` is used, the limit is 50.
                             *
                             * Defaults to 10.
                             */
                            drlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            drcontinue?: string;
                        }

                        /**
                         * Find all pages that embed (transclude) the given title.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                         */
                        interface Embeddedin extends Query {
                            /**
                             * Title to search. Cannot be used together with eipageid.
                             */
                            eititle?: string;
                            /**
                             * Page ID to search. Cannot be used together with eititle.
                             */
                            eipageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            eicontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            einamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            eidir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            eifilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            eilimit?: Limit;
                        }

                        /**
                         * Returns the list of branches for a repository supported by ExtensionDistributor
                         *
                         * @private
                         */
                        interface ExtDistBranches extends Query {
                            /**
                             * Extensions to get branches for
                             */
                            edbexts?: string | string[];
                            /**
                             * Skins to get branches for
                             */
                            edbskins?: OneOrMore<
                                | "2018"
                                | "Aether"
                                | "Amethyst"
                                | "Anisa"
                                | "BlueSky"
                                | "BlueSpiceCalumma"
                                | "BlueSpiceDiscovery"
                                | "Bouquet"
                                | "Cavendish"
                                | "CologneBlue"
                                | "Cosmos"
                                | "DeskMessMirrored"
                                | "Dusk"
                                | "DuskToDawn"
                                | "Empty"
                                | "Example"
                                | "Foreground"
                                | "Freo"
                                | "Gamepress"
                                | "GreyStuff"
                                | "GuMaxDD"
                                | "HasSomeColours"
                                | "Mask"
                                | "Material"
                                | "MediaWikiWordpressThemes"
                                | "Metrolook"
                                | "MinervaNeue"
                                | "Mirage"
                                | "Modern"
                                | "MonoBook"
                                | "Nimbus"
                                | "Nostalgia"
                                | "Pivot"
                                | "Poncho"
                                | "Reflection"
                                | "Refreshed"
                                | "Schulenburg"
                                | "Splash"
                                | "Tempo"
                                | "Timeless"
                                | "Truglass"
                                | "TuleapSkin"
                                | "Vector"
                                | "WMAU"
                                | "WPtouch"
                                | "WikimediaApiPortal"
                                | "WoOgLeShades"
                                | "apex"
                                | "erudite"
                                | "mediawiki-strapping"
                                | "p2wiki"
                                | "shared"
                                | "webplatform"
                            >;
                        }

                        /**
                         * Returns the list of repositories supported by ExtensionDistributor
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface ExtDistRepos extends Query {}

                        /**
                         * Enumerate pages that contain a given URL.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                         */
                        interface ExtUrlUsage extends Query {
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the ID of page.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **url**: Adds the URL used in the page.
                             *
                             * Defaults to `ids`, `title`, and `url`.
                             */
                            euprop?: OneOrMore<"ids" | "title" | "url">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            eucontinue?: string;
                            /**
                             * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                             *
                             * Defaults to an empty string.
                             */
                            euprotocol?:
                                | ""
                                | "bitcoin"
                                | "ftp"
                                | "ftps"
                                | "geo"
                                | "git"
                                | "gopher"
                                | "http"
                                | "https"
                                | "irc"
                                | "ircs"
                                | "magnet"
                                | "mailto"
                                | "matrix"
                                | "mms"
                                | "news"
                                | "nntp"
                                | "redis"
                                | "sftp"
                                | "sip"
                                | "sips"
                                | "sms"
                                | "ssh"
                                | "svn"
                                | "tel"
                                | "telnet"
                                | "urn"
                                | "worldwind"
                                | "xmpp";
                            /**
                             * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                             */
                            euquery?: string;
                            /**
                             * The page namespaces to enumerate.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            eunamespace?: number | number[] | "*";
                            /**
                             * How many pages to return.
                             *
                             * Defaults to 10.
                             */
                            eulimit?: Limit;
                            /**
                             * Expand protocol-relative URLs with the canonical protocol.
                             *
                             * @deprecated
                             */
                            euexpandurl?: boolean;
                        }

                        /**
                         * Enumerate all deleted files sequentially.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Filearchive
                         */
                        interface Filearchive extends Query {
                            /**
                             * The image title to start enumerating from.
                             */
                            fafrom?: string;
                            /**
                             * The image title to stop enumerating at.
                             */
                            fato?: string;
                            /**
                             * Search for all image titles that begin with this value.
                             */
                            faprefix?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            fadir?: "ascending" | "descending";
                            /**
                             * SHA1 hash of image. Overrides fasha1base36.
                             */
                            fasha1?: string;
                            /**
                             * SHA1 hash of image in base 36 (used in MediaWiki).
                             */
                            fasha1base36?: string;
                            /**
                             * Which image information to get:
                             *
                             * - **sha1**: Adds SHA-1 hash for the image.
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **user**: Adds user who uploaded the image version.
                             * - **size**: Adds the size of the image in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **description**: Adds description of the image version.
                             * - **parseddescription**: Parse the description of the version.
                             * - **mime**: Adds MIME of the image.
                             * - **mediatype**: Adds the media type of the image.
                             * - **metadata**: Lists Exif metadata for the version of the image.
                             * - **bitdepth**: Adds the bit depth of the version.
                             * - **archivename**: Adds the filename of the archive version for non-latest versions.
                             *
                             * Defaults to `timestamp`.
                             */
                            faprop?: OneOrMore<
                                | "archivename"
                                | "bitdepth"
                                | "description"
                                | "dimensions"
                                | "mediatype"
                                | "metadata"
                                | "mime"
                                | "parseddescription"
                                | "sha1"
                                | "size"
                                | "timestamp"
                                | "user"
                            >;
                            /**
                             * How many images to return in total.
                             *
                             * Defaults to 10.
                             */
                            falimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            facontinue?: string;
                        }

                        /**
                         * Returns a list of gadget categories.
                         */
                        interface GadgetCategories extends Query {
                            /**
                             * What gadget category information to get:
                             *
                             * - **name**: Internal category name.
                             * - **title**: Category title.
                             * - **members**: Number of gadgets in category.
                             *
                             * Defaults to `name`.
                             */
                            gcprop?: OneOrMore<"members" | "name" | "title">;
                            /**
                             * Names of categories to retrieve.
                             */
                            gcnames?: string | string[];
                        }

                        /**
                         * Returns a list of gadgets used on this wiki.
                         */
                        interface Gadgets extends Query {
                            /**
                             * What gadget information to get:
                             *
                             * - **id**: Internal gadget ID.
                             * - **metadata**: The gadget metadata.
                             * - **desc**: Gadget description transformed into HTML (can be slow, use only if really needed).
                             *
                             * Defaults to `id` and `metadata`.
                             */
                            gaprop?: OneOrMore<"desc" | "id" | "metadata">;
                            /**
                             * Gadgets from what categories to retrieve.
                             */
                            gacategories?: string | string[];
                            /**
                             * IDs of gadgets to retrieve.
                             */
                            gaids?: string | string[];
                            /**
                             * List only gadgets allowed to current user.
                             */
                            gaallowedonly?: boolean;
                            /**
                             * List only gadgets enabled by current user.
                             */
                            gaenabledonly?: boolean;
                        }

                        /**
                         * Returns pages having coordinates that are located in a certain area.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                         */
                        interface GeoSearch extends Query {
                            /**
                             * Coordinate around which to search.
                             *
                             * Format: Latitude and longitude separated by pipe (`|`).
                             */
                            gscoord?: string;
                            /**
                             * Title of page around which to search.
                             */
                            gspage?: string;
                            /**
                             * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                             */
                            gsbbox?: string;
                            /**
                             * Search radius in meters.
                             *
                             * Defaults to 500.
                             */
                            gsradius?: number;
                            /**
                             * Restrict search to objects no larger than this, in meters.
                             */
                            gsmaxdim?: number;
                            /**
                             * Set the sort order of returned results.
                             *
                             * - **distance**: Rank pages by their distance to the center.
                             * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                             *
                             * Defaults to `distance`.
                             */
                            gssort?: "distance" | "relevance";
                            /**
                             * Maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            gslimit?: Limit;
                            /**
                             * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                             *
                             * Defaults to `earth`.
                             */
                            gsglobe?: "earth";
                            /**
                             * Namespaces to search.
                             *
                             * Defaults to 0.
                             */
                            gsnamespace?: number | number[] | "*";
                            /**
                             * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                             *
                             * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                             * - **name**: Name of the object.
                             * - **dim**: Approximate size of the object in meters.
                             * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                             * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                             * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                             *
                             * Defaults to `globe`.
                             */
                            gsprop?: OneOrMore<
                                "country" | "dim" | "globe" | "name" | "region" | "type"
                            >;
                            /**
                             * Which kind of coordinates to return.
                             *
                             * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                             * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                             * - **all**: Return both primary and secondary coordinates.
                             *
                             * Defaults to `primary`.
                             */
                            gsprimary?: "all" | "primary" | "secondary";
                            /**
                             * Whether debug information should be returned.
                             */
                            gsdebug?: boolean;
                        }

                        /**
                         * Enumerate all global users.
                         */
                        interface GlobalAllUsers extends Query {
                            /**
                             * The username to start enumerating from.
                             */
                            agufrom?: string;
                            /**
                             * The username to stop enumerating at.
                             */
                            aguto?: string;
                            /**
                             * Search for all users that begin with this value.
                             */
                            aguprefix?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            agudir?: "ascending" | "descending";
                            /**
                             * Limit users to given global groups.
                             */
                            agugroup?: OneOrMore<
                                | "abusefilter-helper"
                                | "abusefilter-maintainer"
                                | "apihighlimits-requestor"
                                | "captcha-exempt"
                                | "founder"
                                | "global-bot"
                                | "global-deleter"
                                | "global-flow-create"
                                | "global-interface-editor"
                                | "global-ipblock-exempt"
                                | "global-rollbacker"
                                | "global-sysop"
                                | "global-temporary-account-viewer"
                                | "new-wikis-importer"
                                | "oathauth-tester"
                                | "ombuds"
                                | "recursive-export"
                                | "staff"
                                | "steward"
                                | "sysadmin"
                                | "u4c-member"
                                | "vrt-permissions"
                                | "wmf-email-block-override"
                                | "wmf-researcher"
                            >;
                            /**
                             * Exclude users in given global groups.
                             */
                            aguexcludegroup?: OneOrMore<
                                | "abusefilter-helper"
                                | "abusefilter-maintainer"
                                | "apihighlimits-requestor"
                                | "captcha-exempt"
                                | "founder"
                                | "global-bot"
                                | "global-deleter"
                                | "global-flow-create"
                                | "global-interface-editor"
                                | "global-ipblock-exempt"
                                | "global-rollbacker"
                                | "global-sysop"
                                | "global-temporary-account-viewer"
                                | "new-wikis-importer"
                                | "oathauth-tester"
                                | "ombuds"
                                | "recursive-export"
                                | "staff"
                                | "steward"
                                | "sysadmin"
                                | "u4c-member"
                                | "vrt-permissions"
                                | "wmf-email-block-override"
                                | "wmf-researcher"
                            >;
                            /**
                             * What pieces of information to include:
                             *
                             * - **lockinfo**: Whether the user account is locked.
                             * - **groups**: Lists global groups that the user is in. This uses more server resources and may return fewer results than the limit.
                             * - **existslocally**: Adds the information if the user exists locally.
                             */
                            aguprop?: OneOrMore<"existslocally" | "groups" | "lockinfo">;
                            /**
                             * How many total usernames to return.
                             *
                             * Defaults to 10.
                             */
                            agulimit?: Limit;
                            /**
                             * Exclude users of named accounts.
                             */
                            aguexcludenamed?: boolean;
                            /**
                             * Exclude users of temporary accounts.
                             */
                            aguexcludetemp?: boolean;
                        }

                        /**
                         * List all globally blocked IP addresses.
                         */
                        interface GlobalBlocks extends Query {
                            /**
                             * The timestamp to start enumerating from.
                             */
                            bgstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            bgend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `older`.
                             */
                            bgdir?: "newer" | "older";
                            /**
                             * Pipe-separated list of block IDs to list.
                             */
                            bgids?: number | number[];
                            /**
                             * Pipe-separated list of IP addresses to search for.
                             *
                             * @deprecated
                             */
                            bgaddresses?: string | string[];
                            /**
                             * Pipe-separated list of usernames, IP addresses, or IP ranges to search for. To search for IP blocks inside a given range, use bgip instead.
                             */
                            bgtargets?: string | string[];
                            /**
                             * Get all blocks applying to this IP address or CIDR range, including range blocks. Cannot be used together with bgaddresses or bgtargets. CIDR ranges broader than /16 are not accepted.
                             */
                            bgip?: string;
                            /**
                             * The maximum amount of blocks to list.
                             *
                             * Defaults to 10.
                             */
                            bglimit?: Limit;
                            /**
                             * Which properties to get.
                             *
                             * - **id**: Adds the ID of the global block.
                             * - **address**: Deprecated. Adds the target of the global block. This is deprecated and has been replaced by the 'target' prop.
                             * - **target**: Adds the target of the global block.
                             * - **by**: Adds the username of the blocking user, along with the wiki where they performed the global block.
                             * - **timestamp**: Adds the timestamp of when the global block was given.
                             * - **expiry**: Adds the timestamp of when the global block expires.
                             * - **reason**: Adds the reason given for the global block.
                             * - **range**: Adds the range of IP addresses affected by the global block (not included if the block does not target IP addresses).
                             *
                             * Defaults to `id`, `target`, `by`, `timestamp`, `expiry`, and `reason`.
                             */
                            bgprop?: OneOrMore<
                                | "address"
                                | "by"
                                | "expiry"
                                | "id"
                                | "range"
                                | "reason"
                                | "target"
                                | "timestamp"
                            >;
                        }

                        /**
                         * Enumerate all global groups.
                         */
                        interface GlobalGroups extends Query {
                            /**
                             * What pieces of information to include.
                             */
                            ggpprop?: OneOrMore<"rights">;
                        }

                        /**
                         * List all the mentors
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface GrowthMentorList extends Query {}

                        /**
                         * Get all mentees assigned to a given mentor
                         */
                        interface GrowthMentorMentee extends Query {
                            /**
                             * Mentor to query mentees for
                             */
                            gemmmentor: string;
                        }

                        /**
                         * Get list of mentees starred by the currently logged in mentor
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface GrowthStarredMentees extends Query {}

                        /**
                         * Get task recommendations suitable for newcomers.
                         *
                         * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                         *
                         * @private
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                         */
                        interface GrowthTasks extends Query {
                            /**
                             * Task types to limit results to. Leave empty to receive all suggestions.
                             *
                             * - **copyedit**: Copyedit
                             * - **expand**: Expand short articles
                             * - **links**: Add links between articles
                             * - **references**: Find references
                             * - **update**: Update articles
                             * - **link-recommendation**: Add links between articles
                             */
                            gttasktypes?: OneOrMore<
                                | "copyedit"
                                | "expand"
                                | "image-recommendation"
                                | "link-recommendation"
                                | "links"
                                | "references"
                                | "section-image-recommendation"
                                | "update"
                            >;
                            /**
                             * Article topics to prefer in task suggestions.
                             *
                             * - **architecture**: Architecture
                             * - **art**: Art
                             * - **comics-and-anime**: Comics and anime
                             * - **entertainment**: Entertainment
                             * - **fashion**: Fashion
                             * - **literature**: Literature
                             * - **music**: Music
                             * - **performing-arts**: Performing arts
                             * - **sports**: Sports
                             * - **tv-and-film**: TV and film
                             * - **video-games**: Video games
                             * - **biography**: Biography (all)
                             * - **women**: Biography (women)
                             * - **business-and-economics**: Business and economics
                             * - **education**: Education
                             * - **food-and-drink**: Food and drink
                             * - **history**: History
                             * - **military-and-warfare**: Military and warfare
                             * - **philosophy-and-religion**: Philosophy and religion
                             * - **politics-and-government**: Politics and government
                             * - **society**: Society
                             * - **transportation**: Transportation
                             * - **biology**: Biology
                             * - **chemistry**: Chemistry
                             * - **computers-and-internet**: Computers and internet
                             * - **earth-and-environment**: Earth and environment
                             * - **engineering**: Engineering
                             * - **general-science**: General science
                             * - **mathematics**: Mathematics
                             * - **medicine-and-health**: Medicine and health
                             * - **physics**: Physics
                             * - **technology**: Technology
                             * - **africa**: Africa
                             * - **asia**: Asia
                             * - **central-america**: Central America
                             * - **europe**: Europe
                             * - **north-america**: North America
                             * - **oceania**: Oceania
                             * - **south-america**: South America
                             */
                            gttopics?: OneOrMore<
                                | "africa"
                                | "architecture"
                                | "art"
                                | "asia"
                                | "biography"
                                | "biology"
                                | "business-and-economics"
                                | "central-america"
                                | "chemistry"
                                | "comics-and-anime"
                                | "computers-and-internet"
                                | "earth-and-environment"
                                | "education"
                                | "engineering"
                                | "entertainment"
                                | "europe"
                                | "fashion"
                                | "food-and-drink"
                                | "general-science"
                                | "history"
                                | "literature"
                                | "mathematics"
                                | "medicine-and-health"
                                | "military-and-warfare"
                                | "music"
                                | "north-america"
                                | "oceania"
                                | "performing-arts"
                                | "philosophy-and-religion"
                                | "physics"
                                | "politics-and-government"
                                | "society"
                                | "south-america"
                                | "sports"
                                | "technology"
                                | "transportation"
                                | "tv-and-film"
                                | "video-games"
                                | "women"
                            >;
                            /**
                             * Matching mode for topics.
                             */
                            gttopicsmode?: "AND" | "OR";
                            /**
                             * Maximum number of task suggestions to return.
                             */
                            gtlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gtoffset?: number;
                            /**
                             * Add debug data to the output.
                             */
                            gtdebug?: boolean;
                            /**
                             * Page IDs to exclude from the query.
                             */
                            gtexcludepageids?: number | number[];
                        }

                        /**
                         * Find all pages that use the given image title.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                         */
                        interface ImageUsage extends Query {
                            /**
                             * Title to search. Cannot be used together with iupageid.
                             */
                            iutitle?: string;
                            /**
                             * Page ID to search. Cannot be used together with iutitle.
                             */
                            iupageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            iucontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            iunamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            iudir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                             *
                             * Defaults to `all`.
                             */
                            iufilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                             *
                             * Defaults to 10.
                             */
                            iulimit?: Limit;
                            /**
                             * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                             */
                            iuredirect?: boolean;
                        }

                        /**
                         * Find all pages that link to the given interwiki link.
                         *
                         * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                         */
                        // tslint:disable-next-line:interface-name
                        interface IWBacklinks extends Query {
                            /**
                             * Prefix for the interwiki.
                             */
                            iwblprefix?: string;
                            /**
                             * Interwiki link to search for. Must be used with `iwblblprefix`.
                             */
                            iwbltitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            iwblcontinue?: string;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            iwbllimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **iwprefix**: Adds the prefix of the interwiki.
                             * - **iwtitle**: Adds the title of the interwiki.
                             *
                             * Defaults to an empty string.
                             */
                            iwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            iwbldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that link to the given language link.
                         *
                         * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                         *
                         * Note that this may not consider language links added by extensions.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                         */
                        interface LangBacklinks extends Query {
                            /**
                             * Language for the language link.
                             */
                            lbllang?: string;
                            /**
                             * Language link to search for. Must be used with lbllang.
                             */
                            lbltitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            lblcontinue?: string;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            lbllimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **lllang**: Adds the language code of the language link.
                             * - **lltitle**: Adds the title of the language link.
                             *
                             * Defaults to an empty string.
                             */
                            lblprop?: OneOrMore<"lllang" | "lltitle">;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            lbldir?: "ascending" | "descending";
                        }

                        /**
                         * Retrieve link recommendations for a specific page
                         *
                         * @private
                         */
                        interface LinkRecommendations extends Query {
                            /**
                             * The page ID for which to retrieve link recommendations.
                             */
                            lrpageid: number;
                        }

                        /**
                         * Get a list of lint errors
                         */
                        interface LintErrors extends Query {
                            /**
                             * Categories of lint errors
                             *
                             * Defaults to `deletable-table-tag`, `duplicate-ids`, `html5-misnesting`, `misc-tidy-replacement-issues`, `multiline-html-table-in-list`, `multiple-unclosed-formatting-tags`, `pwrap-bug-workaround`, `self-closed-tag`, `tidy-font-bug`, `tidy-whitespace-bug`, `unclosed-quotes-in-heading`, `bogus-image-options`, `fostered`, `misnested-tag`, `multi-colon-escape`, `wikilink-in-extlink`, `missing-end-tag`, `missing-end-tag-in-heading`, `night-mode-unaware-background-color`, `obsolete-tag`, and `stripped-tag`.
                             */
                            lntcategories?: OneOrMore<
                                | "bogus-image-options"
                                | "deletable-table-tag"
                                | "duplicate-ids"
                                | "fostered"
                                | "fostered-transparent"
                                | "html5-misnesting"
                                | "large-tables"
                                | "misc-tidy-replacement-issues"
                                | "misnested-tag"
                                | "missing-end-tag"
                                | "missing-end-tag-in-heading"
                                | "multi-colon-escape"
                                | "multiline-html-table-in-list"
                                | "multiple-unclosed-formatting-tags"
                                | "night-mode-unaware-background-color"
                                | "obsolete-tag"
                                | "pwrap-bug-workaround"
                                | "self-closed-tag"
                                | "stripped-tag"
                                | "tidy-font-bug"
                                | "tidy-whitespace-bug"
                                | "unclosed-quotes-in-heading"
                                | "wikilink-in-extlink"
                            >;
                            /**
                             * Number of results to query
                             *
                             * Defaults to 10.
                             */
                            lntlimit?: Limit;
                            /**
                             * Only include lint errors from the specified namespaces
                             */
                            lntnamespace?: number | number[] | "*";
                            /**
                             * Only include lint errors from the specified page IDs
                             */
                            lntpageid?: number | number[];
                            /**
                             * Only include lint errors from the specified page title
                             */
                            lnttitle?: string;
                            /**
                             * Lint ID to start querying from
                             */
                            lntfrom?: number;
                        }

                        /**
                         * Get events from logs.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Logevents
                         */
                        interface LogEvents extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **ids**: Adds the ID of the log event.
                             * - **title**: Adds the title of the page for the log event.
                             * - **type**: Adds the type of log event.
                             * - **user**: Adds the user responsible for the log event. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Adds the user ID who was responsible for the log event. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **timestamp**: Adds the timestamp for the log event.
                             * - **comment**: Adds the comment of the log event. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds the parsed comment of the log event. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **details**: Lists additional details about the log event. If the log event has been revision deleted, an `actionhidden` property will be returned.
                             * - **tags**: Lists tags for the log event.
                             *
                             * Defaults to `ids`, `title`, `type`, `user`, `timestamp`, `comment`, and `details`.
                             */
                            leprop?: OneOrMore<
                                | "comment"
                                | "details"
                                | "ids"
                                | "parsedcomment"
                                | "tags"
                                | "timestamp"
                                | "title"
                                | "type"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Filter log entries to only this type.
                             */
                            letype?: string;
                            /**
                             * Filter log actions to only this action. Overrides `letype`. In the list of possible values, values with the asterisk wildcard such as `action/*` can have different strings after the slash (/).
                             */
                            leaction?: string;
                            /**
                             * The timestamp to start enumerating from.
                             */
                            lestart?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            leend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: lestart has to be before leend.
                             * - **older**: List newest first (default). Note: lestart has to be later than leend.
                             *
                             * Defaults to `older`.
                             */
                            ledir?: "newer" | "older";
                            /**
                             * Filter entries to those made by the given user.
                             */
                            leuser?: string;
                            /**
                             * Filter entries to those related to a page.
                             */
                            letitle?: string;
                            /**
                             * Filter entries to those in the given namespace.
                             */
                            lenamespace?: number;
                            /**
                             * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                             */
                            leprefix?: string;
                            /**
                             * Only list event entries tagged with this tag.
                             */
                            letag?: string;
                            /**
                             * How many total event entries to return.
                             *
                             * Defaults to 10.
                             */
                            lelimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            lecontinue?: string;
                        }

                        /**
                         * Query MessageCollection about translations.
                         */
                        interface MessageCollection extends Query {
                            /**
                             * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                             */
                            mcgroup: string;
                            /**
                             * Language code.
                             *
                             * Defaults to `en`.
                             */
                            mclanguage?: string;
                            /**
                             * How many messages to show (after filtering).
                             *
                             * Defaults to 500.
                             */
                            mclimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to an empty string.
                             */
                            mcoffset?: string;
                            /**
                             * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                             *
                             * - **fuzzy**: Messages with fuzzy tag.
                             * - **optional**: Messages which should be translated only if changes are necessary.
                             * - **ignored**: Messages which are never translated.
                             * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                             * - **translated**: Messages which have a translation which is not fuzzy.
                             * - **changed**: Messages which have been translated or changed since last export.
                             * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                             * - **last-translator:N**: Messages where the user number `N` is the last translator.
                             *
                             * Defaults to `!optional` and `!ignored`.
                             */
                            mcfilter?: string | string[];
                            /**
                             * Which properties to get:
                             *
                             * - **definition**: Message definition.
                             * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                             * - **tags**: Message tags, like optional, ignored and fuzzy.
                             * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                             * - **revision**: Deprecated. Use mcprop=properties.
                             *
                             * Defaults to `definition` and `translation`.
                             */
                            mcprop?: OneOrMore<
                                "definition" | "properties" | "revision" | "tags" | "translation"
                            >;
                        }

                        /**
                         * List message groups the current user is subscribed to.
                         *
                         * @private
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface MessageGroupSubscription extends Query {}

                        /**
                         * Lists the most viewed pages (based on last day's pageview count).
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                         */
                        interface MostViewed extends Query {
                            /**
                             * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                             *
                             * - **pageviews**: Plain pageviews.
                             *
                             * Defaults to `pageviews`.
                             */
                            pvimmetric?: "pageviews";
                            /**
                             * The number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            pvimlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            pvimoffset?: number;
                        }

                        /**
                         * Get a list of files in the current user's upload stash.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:mystashedfiles
                         */
                        interface MyStashedFiles extends Query {
                            /**
                             * Which properties to fetch for the files.
                             *
                             * - **size**: Fetch the file size and image dimensions.
                             * - **type**: Fetch the file's MIME type and media type.
                             *
                             * Defaults to an empty string.
                             */
                            msfprop?: OneOrMore<"size" | "type">;
                            /**
                             * How many files to get.
                             *
                             * Defaults to 10.
                             */
                            msflimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            msfcontinue?: string;
                        }

                        /**
                         * Enumerates pages that have changes pending review.
                         */
                        interface Oldreviewedpages extends Query {
                            /**
                             * Start listing at this timestamp.
                             */
                            orstart?: string;
                            /**
                             * Stop listing at this timestamp.
                             */
                            orend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            ordir?: "newer" | "older";
                            /**
                             * Maximum character count change size.
                             */
                            ormaxsize?: number;
                            /**
                             * How to filter for pages on your watchlist.
                             *
                             * Defaults to `all`.
                             */
                            orfilterwatched?: "all" | "watched";
                            /**
                             * The namespaces to enumerate.
                             *
                             * Defaults to 0.
                             */
                            ornamespace?: number | number[] | "*";
                            /**
                             * Show pages only in the given category.
                             */
                            orcategory?: string;
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            orfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            orlimit?: Limit;
                        }

                        /**
                         * Fetch page collection information for the given title.
                         */
                        interface PageCollectionsMetadata extends Query {
                            /**
                             * A string containing the page title for which the page collection information will be fetched.
                             */
                            titles: string | string[];
                        }

                        /**
                         * List all page property names in use on the wiki.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pagepropnames
                         */
                        interface PagePropNames extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            ppncontinue?: string;
                            /**
                             * The maximum number of names to return.
                             *
                             * Defaults to 10.
                             */
                            ppnlimit?: Limit;
                        }

                        /**
                         * List all pages using a given page property.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                         */
                        interface PagesWithProp extends Query {
                            /**
                             * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                             */
                            pwppropname: string;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **value**: Adds the value of the page property.
                             *
                             * Defaults to `ids` and `title`.
                             */
                            pwpprop?: OneOrMore<"ids" | "title" | "value">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            pwpcontinue?: string;
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            pwplimit?: Limit;
                            /**
                             * In which direction to sort.
                             *
                             * Defaults to `ascending`.
                             */
                            pwpdir?: "ascending" | "descending";
                        }

                        /**
                         * Perform a prefix search for page titles.
                         *
                         * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                         */
                        interface PrefixSearch extends Query {
                            /**
                             * Search string.
                             */
                            pssearch: string;
                            /**
                             * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                             *
                             * Defaults to 0.
                             */
                            psnamespace?: number | number[] | "*";
                            /**
                             * Maximum number of results to return.
                             *
                             * Defaults to 10.
                             */
                            pslimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            psoffset?: number;
                            /**
                             * Search profile to use.
                             *
                             * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                             * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                             * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                             * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                             * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                             * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                             * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                             * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                             *
                             * Defaults to `engine_autoselect`.
                             */
                            psprofile?:
                                | "classic"
                                | "engine_autoselect"
                                | "fast-fuzzy"
                                | "fuzzy"
                                | "fuzzy-subphrases"
                                | "normal"
                                | "normal-subphrases"
                                | "strict";
                        }

                        /**
                         * List all pages associated with one or more projects.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                         */
                        interface ProjectPages extends Query {
                            /**
                             * Also return assessments for the pages returned.
                             */
                            wppassessments?: boolean;
                            /**
                             * The projects to list pages for. If this parameter is omitted, all projects will be included.
                             */
                            wppprojects: string | string[];
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            wpplimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wppcontinue?: string;
                        }

                        /**
                         * List all the projects.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                         */
                        interface Projects extends Query {
                            /**
                             * Also include subprojects.
                             */
                            pjsubprojects?: boolean;
                        }

                        /**
                         * List the pages in a given index
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                         */
                        interface ProofreadPagesInIndex extends Query {
                            /**
                             * Which properties to get for each page
                             *
                             * - **ids**: Return the page ID of each page linked to the index page
                             * - **title**: Return the page title of each page linked to the index page
                             * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                             * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                             *
                             * Defaults to `ids` and `title`.
                             */
                            prppiiprop?: OneOrMore<
                                "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                            >;
                            /**
                             * The title of the Index page to get pages for
                             */
                            prppiititle?: string;
                            /**
                             * The page ID of the Index page to get pages for
                             */
                            prppiipageid?: number;
                        }

                        /**
                         * List all titles protected from creation.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                         */
                        interface ProtectedTitles extends Query {
                            /**
                             * Only list titles in these namespaces.
                             */
                            ptnamespace?: number | number[] | "*";
                            /**
                             * Only list titles with these protection levels.
                             */
                            ptlevel?: string | string[];
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            ptlimit?: Limit;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                             * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                             *
                             * Defaults to `older`.
                             */
                            ptdir?: "newer" | "older";
                            /**
                             * Start listing at this protection timestamp.
                             */
                            ptstart?: string;
                            /**
                             * Stop listing at this protection timestamp.
                             */
                            ptend?: string;
                            /**
                             * Which properties to get:
                             *
                             * - **timestamp**: Adds the timestamp of when protection was added.
                             * - **user**: Adds the user that added the protection.
                             * - **userid**: Adds the user ID that added the protection.
                             * - **comment**: Adds the comment for the protection.
                             * - **parsedcomment**: Adds the parsed comment for the protection.
                             * - **expiry**: Adds the timestamp of when the protection will be lifted.
                             * - **level**: Adds the protection level.
                             *
                             * Defaults to `timestamp` and `level`.
                             */
                            ptprop?: OneOrMore<
                                | "comment"
                                | "expiry"
                                | "level"
                                | "parsedcomment"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            ptcontinue?: string;
                        }

                        /**
                         * Get a list provided by a QueryPage-based special page.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                         */
                        interface QueryPage extends Query {
                            /**
                             * The name of the special page. Note, this is case-sensitive.
                             */
                            qppage: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            qpoffset?: number;
                            /**
                             * Number of results to return.
                             *
                             * Defaults to 10.
                             */
                            qplimit?: Limit;
                        }

                        /**
                         * Get a set of random pages.
                         *
                         * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                         */
                        interface Random extends Query {
                            /**
                             * Return pages in these namespaces only.
                             */
                            rnnamespace?: number | number[] | "*";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `nonredirects`.
                             */
                            rnfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * Use `rnfilterredir=redirects` instead.
                             *
                             * @deprecated
                             */
                            rnredirect?: boolean;
                            /**
                             * Limit how many random pages will be returned.
                             *
                             * Defaults to 1.
                             */
                            rnlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rncontinue?: string;
                        }

                        /**
                         * List the pages of a certain list.
                         *
                         * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                         *
                         * @private
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                         */
                        interface ReadingListEntries extends Query {
                            /**
                             * The list IDs for which to return pages.
                             */
                            rlelists?: number | number[];
                            /**
                             * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                             */
                            rlechangedsince?: string;
                            /**
                             * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                             *
                             * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                             * - **updated**: Last update timestamp.
                             */
                            rlesort?: "name" | "updated";
                            /**
                             * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                             *
                             * Defaults to `ascending`.
                             */
                            rledir?: "ascending" | "descending";
                            /**
                             * Number of result items to return.
                             *
                             * Defaults to 10.
                             */
                            rlelimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rlecontinue?: string;
                        }

                        /**
                         * Enumerate recent changes.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                         */
                        interface RecentChanges extends Query {
                            /**
                             * The timestamp to start enumerating from.
                             */
                            rcstart?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            rcend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                             * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                             *
                             * Defaults to `older`.
                             */
                            rcdir?: "newer" | "older";
                            /**
                             * Filter changes to only these namespaces.
                             */
                            rcnamespace?: number | number[] | "*";
                            /**
                             * Only list changes by this user.
                             */
                            rcuser?: string;
                            /**
                             * Don't list changes by this user.
                             */
                            rcexcludeuser?: string;
                            /**
                             * Only list changes tagged with this tag.
                             */
                            rctag?: string;
                            /**
                             * Include additional pieces of information:
                             *
                             * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **flags**: Adds flags for the edit.
                             * - **timestamp**: Adds timestamp of the edit.
                             * - **title**: Adds the page title of the edit.
                             * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                             * - **sizes**: Adds the new and old page length in bytes.
                             * - **redirect**: Tags edit if page is a redirect.
                             * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                             * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                             * - **tags**: Lists tags for the entry.
                             * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             *
                             * Defaults to `title`, `timestamp`, and `ids`.
                             */
                            rcprop?: OneOrMore<
                                | "comment"
                                | "flags"
                                | "ids"
                                | "loginfo"
                                | "oresscores"
                                | "parsedcomment"
                                | "patrolled"
                                | "redirect"
                                | "sha1"
                                | "sizes"
                                | "tags"
                                | "timestamp"
                                | "title"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                             *
                             * @deprecated
                             */
                            rctoken?: string;
                            /**
                             * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                             */
                            rcshow?: OneOrMore<
                                | Toggle<
                                      | "anon"
                                      | "autopatrolled"
                                      | "bot"
                                      | "minor"
                                      | "oresreview"
                                      | "patrolled"
                                      | "redirect"
                                  >
                                | "unpatrolled"
                            >;
                            /**
                             * How many total changes to return.
                             *
                             * Defaults to 10.
                             */
                            rclimit?: Limit;
                            /**
                             * Which types of changes to show.
                             *
                             * Defaults to `edit`, `new`, `log`, and `categorize`.
                             */
                            rctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                            /**
                             * Only list changes which are the latest revision.
                             */
                            rctoponly?: boolean;
                            /**
                             * Filter entries to those related to a page.
                             */
                            rctitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rccontinue?: string;
                            /**
                             * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                             */
                            rcgeneraterevisions?: boolean;
                            /**
                             * Only list changes that touch the named slot.
                             */
                            rcslot?: "main" | "mediainfo";
                        }

                        /**
                         * Perform a full text search.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                         */
                        interface Search extends Query {
                            /**
                             * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                             */
                            srsearch: string;
                            /**
                             * Search only within these namespaces.
                             *
                             * Defaults to 0.
                             */
                            srnamespace?: number | number[] | "*";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            srlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            sroffset?: number;
                            /**
                             * Query independent profile to use (affects ranking algorithm).
                             *
                             * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                             * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                             * - **empty**: Ranking based solely on query dependent features (for debug only).
                             * - **wsum_inclinks**: Weighted sum based on incoming links
                             * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                             * - **popular_inclinks_pv**: Ranking based primarily on page views
                             * - **popular_inclinks**: Ranking based primarily on incoming link counts
                             * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                             *
                             * Defaults to `engine_autoselect`.
                             */
                            srqiprofile?: string;
                            /**
                             * Which type of search to perform.
                             */
                            srwhat?: "nearmatch" | "text" | "title";
                            /**
                             * Which metadata to return.
                             *
                             * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                             */
                            srinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                            /**
                             * Which properties to return:
                             *
                             * - **size**: Adds the size of the page in bytes.
                             * - **wordcount**: Adds the word count of the page.
                             * - **timestamp**: Adds the timestamp of when the page was last edited.
                             * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                             * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                             * - **redirecttitle**: Adds the title of the matching redirect.
                             * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                             * - **sectiontitle**: Adds the title of the matching section.
                             * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                             * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                             * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                             * - **score**: Deprecated. Ignored.
                             * - **hasrelated**: Deprecated. Ignored.
                             * - **extensiondata**: Adds extra data generated by extensions.
                             *
                             * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                             */
                            srprop?: OneOrMore<
                                | "categorysnippet"
                                | "extensiondata"
                                | "hasrelated"
                                | "isfilematch"
                                | "redirectsnippet"
                                | "redirecttitle"
                                | "score"
                                | "sectionsnippet"
                                | "sectiontitle"
                                | "size"
                                | "snippet"
                                | "timestamp"
                                | "titlesnippet"
                                | "wordcount"
                            >;
                            /**
                             * Include interwiki results in the search, if available.
                             */
                            srinterwiki?: boolean;
                            /**
                             * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                             */
                            srenablerewrites?: boolean;
                            /**
                             * Set the sort order of returned results.
                             *
                             * Defaults to `relevance`.
                             */
                            srsort?:
                                | "create_timestamp_asc"
                                | "create_timestamp_desc"
                                | "incoming_links_asc"
                                | "incoming_links_desc"
                                | "just_match"
                                | "last_edit_asc"
                                | "last_edit_desc"
                                | "none"
                                | "random"
                                | "relevance"
                                | "user_random";
                        }

                        /**
                         * List change tags.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Tags
                         */
                        interface Tags extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            tgcontinue?: string;
                            /**
                             * The maximum number of tags to list.
                             *
                             * Defaults to 10.
                             */
                            tglimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **displayname**: Adds system message for the tag.
                             * - **description**: Adds description of the tag.
                             * - **hitcount**: Adds the number of revisions and log entries that have this tag.
                             * - **defined**: Indicate whether the tag is defined.
                             * - **source**: Gets the sources of the tag, which may include `extension` for extension-defined tags and `manual` for tags that may be applied manually by users.
                             * - **active**: Whether the tag is still being applied.
                             *
                             * Defaults to an empty string.
                             */
                            tgprop?: OneOrMore<
                                | "active"
                                | "defined"
                                | "description"
                                | "displayname"
                                | "hitcount"
                                | "source"
                            >;
                        }

                        /**
                         * Show details of LiquidThreads threads.
                         */
                        interface Threads extends Query {
                            /**
                             * The thread ID to start enumerating from.
                             */
                            thstartid?: number;
                            /**
                             * The thread ID to stop enumerating at.
                             */
                            thendid?: number;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            thdir?: "newer" | "older";
                            /**
                             * Whether or not to show deleted threads.
                             */
                            thshowdeleted?: boolean;
                            /**
                             * The maximum number of threads to list.
                             *
                             * Defaults to 10.
                             */
                            thlimit?: Limit;
                            /**
                             * Which properties to get.
                             *
                             * Defaults to `id`, `subject`, `page`, `parent`, and `author`.
                             */
                            thprop?: OneOrMore<
                                | "ancestor"
                                | "author"
                                | "created"
                                | "id"
                                | "modified"
                                | "page"
                                | "parent"
                                | "reactions"
                                | "replies"
                                | "rootid"
                                | "signature"
                                | "subject"
                                | "summaryid"
                                | "type"
                            >;
                            /**
                             * Limit results to threads on these pages.
                             */
                            thpage?: string | string[];
                            /**
                             * Limit results to threads by particular authors.
                             */
                            thauthor?: string | string[];
                            /**
                             * Limit results to threads with the given roots.
                             */
                            throot?: string | string[];
                            /**
                             * Limit results to threads corresponding to the given summary pages.
                             */
                            thsummary?: string | string[];
                            /**
                             * Get threads with the given IDs.
                             */
                            thid?: string | string[];
                            /**
                             * Whether to include the rendered thread in the results.
                             */
                            thrender?: boolean;
                            /**
                             * When rendering, the level at which to start (for the sake of depth limits, etc.).
                             *
                             * Defaults to 0.
                             */
                            threnderlevel?: number;
                            /**
                             * When rendering, the position of the thread in the group of threads being rendered at that level (affects display somewhat).
                             *
                             * Defaults to 1.
                             */
                            threnderthreadpos?: number;
                            /**
                             * When rendering, the number of threads in that level group.
                             *
                             * Defaults to 1.
                             */
                            threnderthreadcount?: number;
                            /**
                             * When rendering, the maximum number of replies to show before adding a "Show more replies" link.
                             */
                            threndermaxthreadcount?: string;
                            /**
                             * When rendering, the maximum depth of replies to show before showing a "Show X replies" link instead of replies.
                             */
                            threndermaxdepth?: string;
                            /**
                             * When rendering, the point at which to start showing replies (used internally to load extra replies).
                             */
                            threnderstartrepliesat?: string;
                        }

                        /**
                         * Enumerates pages that have not been reviewed to a given quality level.
                         */
                        interface Unreviewedpages extends Query {
                            /**
                             * Start listing at this page title.
                             */
                            urstart?: string;
                            /**
                             * Stop listing at this page title.
                             */
                            urend?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            urdir?: "ascending" | "descending";
                            /**
                             * The namespaces to enumerate.
                             *
                             * Defaults to 0.
                             */
                            urnamespace?: number | number[] | "*";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            urfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How to filter by quality (0=checked, 1=quality).
                             *
                             * Defaults to 0.
                             */
                            urfilterlevel?: number;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            urlimit?: Limit;
                        }

                        /**
                         * Get all edits by a user.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Usercontribs
                         */
                        interface UserContribs extends Query {
                            /**
                             * The maximum number of contributions to return.
                             *
                             * Defaults to 10.
                             */
                            uclimit?: Limit;
                            /**
                             * The start timestamp to return from, i.e. revisions before this timestamp.
                             */
                            ucstart?: string;
                            /**
                             * The end timestamp to return to, i.e. revisions after this timestamp.
                             */
                            ucend?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            uccontinue?: string;
                            /**
                             * The users to retrieve contributions for. Cannot be used with `ucuserids`, `ucuserprefix`, or `uciprange`.
                             */
                            ucuser?: string | string[];
                            /**
                             * The user IDs to retrieve contributions for. Cannot be used with `ucuser`, `ucuserprefix`, or `uciprange`.
                             */
                            ucuserids?: number | number[];
                            /**
                             * Retrieve contributions for all users whose names begin with this value. Cannot be used with `ucuser`, `ucuserids`, or `uciprange`.
                             */
                            ucuserprefix?: string;
                            /**
                             * The CIDR range to retrieve contributions for. Cannot be used with `ucuser`, `ucuserprefix`, or `ucuserids`.
                             */
                            uciprange?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: ucstart has to be before ucend.
                             * - **older**: List newest first (default). Note: ucstart has to be later than ucend.
                             *
                             * Defaults to `older`.
                             */
                            ucdir?: "newer" | "older";
                            /**
                             * Only list contributions in these namespaces.
                             */
                            ucnamespace?: number | number[] | "*";
                            /**
                             * Include additional pieces of information:
                             *
                             * - **ids**: Adds the page ID and revision ID.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **timestamp**: Adds the timestamp of the edit.
                             * - **comment**: Adds the comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds the parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **size**: Adds the new size of the edit.
                             * - **sizediff**: Adds the size delta of the edit against its parent.
                             * - **flags**: Adds flags of the edit.
                             * - **patrolled**: Tags patrolled edits.
                             * - **tags**: Lists tags for the edit.
                             *
                             * Defaults to `ids`, `title`, `timestamp`, `comment`, `size`, and `flags`.
                             */
                            ucprop?: OneOrMore<
                                | "comment"
                                | "flags"
                                | "ids"
                                | "oresscores"
                                | "parsedcomment"
                                | "patrolled"
                                | "size"
                                | "sizediff"
                                | "tags"
                                | "timestamp"
                                | "title"
                            >;
                            /**
                             * Show only items that meet these criteria, e.g. non minor edits only: `ucshow=!minor`.
                             *
                             * If `ucshow=patrolled` or `ucshow=!patrolled` is set, revisions older than {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgRCMaxAge `$wgRCMaxAge`} (2592000 seconds) won't be shown.
                             */
                            ucshow?: OneOrMore<
                                Toggle<
                                    | "autopatrolled"
                                    | "minor"
                                    | "new"
                                    | "oresreview"
                                    | "patrolled"
                                    | "top"
                                >
                            >;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            uctag?: string;
                            /**
                             * Only list changes which are the latest revision.
                             *
                             * @deprecated
                             */
                            uctoponly?: boolean;
                        }

                        /**
                         * Get information about a list of users.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Users
                         */
                        interface Users extends Query {
                            /**
                             * Which pieces of information to include:
                             *
                             * - **blockinfo**: Tags if the user is blocked, by whom, and for what reason.
                             * - **groups**: Lists all the groups each user belongs to.
                             * - **groupmemberships**: Lists groups that each user has been explicitly assigned to, including the expiry date of each group membership.
                             * - **implicitgroups**: Lists all the groups a user is automatically a member of.
                             * - **rights**: Lists all the rights each user has.
                             * - **editcount**: Adds the user's edit count.
                             * - **registration**: Adds the user's registration timestamp.
                             * - **emailable**: Tags if the user can and wants to receive email through {@link https://www.mediawiki.org/wiki/Special:EmailUser Special:Emailuser}.
                             * - **gender**: Tags the gender of the user. Returns "male", "female", or "unknown".
                             * - **centralids**: Adds the central IDs and attachment status for the user.
                             * - **cancreate**: Indicates whether an account for valid but unregistered usernames can be created. To check whether the current user can perform the account creation, use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Buserinfo `action=query&meta=userinfo&uiprop=cancreateaccount`}.
                             */
                            usprop?: OneOrMore<
                                | "blockinfo"
                                | "cancreate"
                                | "centralids"
                                | "editcount"
                                | "emailable"
                                | "gender"
                                | "groupmemberships"
                                | "groups"
                                | "implicitgroups"
                                | "registration"
                                | "rights"
                            >;
                            /**
                             * With `usprop=centralids`, indicate whether the user is attached with the wiki identified by this ID.
                             */
                            usattachedwiki?: string;
                            /**
                             * A list of users to obtain information for.
                             */
                            ususers?: string | string[];
                            /**
                             * A list of user IDs to obtain information for.
                             */
                            ususerids?: number | number[];
                            /**
                             * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                             *
                             * @deprecated
                             */
                            ustoken?: string;
                        }

                        /**
                         * Get recent changes to pages in the current user's watchlist.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                         */
                        interface Watchlist extends Query {
                            /**
                             * Include multiple revisions of the same page within given timeframe.
                             */
                            wlallrev?: boolean;
                            /**
                             * The timestamp to start enumerating from.
                             */
                            wlstart?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            wlend?: string;
                            /**
                             * Filter changes to only the given namespaces.
                             */
                            wlnamespace?: number | number[] | "*";
                            /**
                             * Only list changes by this user.
                             */
                            wluser?: string;
                            /**
                             * Don't list changes by this user.
                             */
                            wlexcludeuser?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                             * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                             *
                             * Defaults to `older`.
                             */
                            wldir?: "newer" | "older";
                            /**
                             * How many total results to return per request.
                             *
                             * Defaults to 10.
                             */
                            wllimit?: Limit;
                            /**
                             * Which additional properties to get:
                             *
                             * - **ids**: Adds revision IDs and page IDs.
                             * - **title**: Adds title of the page.
                             * - **flags**: Adds flags for the edit.
                             * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **timestamp**: Adds timestamp of the edit.
                             * - **patrol**: Tags edits that are patrolled.
                             * - **sizes**: Adds the old and new lengths of the page.
                             * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                             * - **loginfo**: Adds log information where appropriate.
                             * - **tags**: Lists tags for the entry.
                             * - **expiry**: Adds the expiry time.
                             *
                             * Defaults to `ids`, `title`, and `flags`.
                             */
                            wlprop?: OneOrMore<
                                | "comment"
                                | "expiry"
                                | "flags"
                                | "ids"
                                | "loginfo"
                                | "notificationtimestamp"
                                | "oresscores"
                                | "parsedcomment"
                                | "patrol"
                                | "sizes"
                                | "tags"
                                | "timestamp"
                                | "title"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                             */
                            wlshow?: OneOrMore<
                                Toggle<
                                    | "anon"
                                    | "autopatrolled"
                                    | "bot"
                                    | "minor"
                                    | "oresreview"
                                    | "patrolled"
                                    | "unread"
                                >
                            >;
                            /**
                             * Which types of changes to show:
                             *
                             * - **edit**: Regular page edits.
                             * - **new**: Page creations.
                             * - **log**: Log entries.
                             * - **external**: External changes.
                             * - **categorize**: Category membership changes.
                             *
                             * Defaults to `edit`, `new`, `log`, and `categorize`.
                             */
                            wltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                            /**
                             * Used along with wltoken to access a different user's watchlist.
                             */
                            wlowner?: string;
                            /**
                             * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                             *
                             * Sensitive parameter.
                             */
                            wltoken?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wlcontinue?: string;
                        }

                        /**
                         * Get all pages on the current user's watchlist.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                         */
                        interface WatchlistRaw extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wrcontinue?: string;
                            /**
                             * Only list pages in the given namespaces.
                             */
                            wrnamespace?: number | number[] | "*";
                            /**
                             * How many total results to return per request.
                             *
                             * Defaults to 10.
                             */
                            wrlimit?: Limit;
                            /**
                             * Which additional properties to get:
                             *
                             * - **changed**: Adds timestamp of when the user was last notified about the edit.
                             */
                            wrprop?: OneOrMore<"changed">;
                            /**
                             * Only list items that meet these criteria.
                             */
                            wrshow?: OneOrMore<Toggle<"changed">>;
                            /**
                             * Used along with wrtoken to access a different user's watchlist.
                             */
                            wrowner?: string;
                            /**
                             * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                             *
                             * Sensitive parameter.
                             */
                            wrtoken?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            wrdir?: "ascending" | "descending";
                            /**
                             * Title (with namespace prefix) to begin enumerating from.
                             */
                            wrfromtitle?: string;
                            /**
                             * Title (with namespace prefix) to stop enumerating at.
                             */
                            wrtotitle?: string;
                        }

                        /**
                         * Returns all pages that use the given entity IDs.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                         */
                        interface WBListEntityUsage extends Query {
                            /**
                             * Properties to add to the result.
                             *
                             * - **url**: If enabled the url of the entity will be added to the result.
                             */
                            wbleuprop?: OneOrMore<"url">;
                            /**
                             * Only return entity IDs that used this aspect.
                             *
                             * - **S**: The entity's sitelinks are used
                             * - **L**: The entity's label is used
                             * - **D**: The entity's description is used
                             * - **T**: The title of the local page corresponding to the entity is used
                             * - **C**: Statements from the entity are used
                             * - **X**: All aspects of an entity are or may be used
                             * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                             */
                            wbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                            /**
                             * Entities that have been used.
                             */
                            wbleuentities: string | string[];
                            /**
                             * How many entity usages to return.
                             *
                             * Defaults to 10.
                             */
                            wbleulimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wbleucontinue?: string;
                        }

                        /**
                         * Searches for entities using labels and aliases.
                         *
                         * This can be used as a generator for other queries.
                         * Returns the matched term that should be displayed.
                         *
                         * @private
                         */
                        interface WBSearch extends Query {
                            /**
                             * Search for this text.
                             */
                            wbssearch: string;
                            /**
                             * Search in this language.
                             */
                            wbslanguage?: string;
                            /**
                             * Whether to disable language fallback
                             */
                            wbsstrictlanguage?: boolean;
                            /**
                             * Search for this type of entity.
                             *
                             * Defaults to `item`.
                             */
                            wbstype?: string;
                            /**
                             * Maximal number of results
                             *
                             * Defaults to 7.
                             */
                            wbslimit?: Limit;
                            /**
                             * The search profile to use.
                             *
                             * - **default**: The default profile, suitable for most purposes.
                             * - **language**: A profile to search for items about natural languages.
                             *
                             * Defaults to `default`.
                             */
                            wbsprofile?: "default" | "language";
                        }

                        /**
                         * Get subscriptions to given entities.
                         */
                        interface WBSubscribers extends Query {
                            /**
                             * Entities to get subscribers
                             */
                            wblsentities: string | string[];
                            /**
                             * Properties to add to result
                             *
                             * Defaults to an empty string.
                             */
                            wblsprop?: OneOrMore<"url">;
                            /**
                             * Maximal number of results
                             *
                             * Defaults to 10.
                             */
                            wblslimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wblscontinue?: string;
                        }

                        /**
                         * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                         */
                        interface WikiLambdaFnSearch extends Query {
                            /**
                             * The ZFunction ID to search for
                             *
                             * Defaults to an empty string.
                             */
                            wikilambdafn_zfunction_id?: string;
                            /**
                             * The type of ZObject referenced by the ZFunction to search for
                             *
                             * Defaults to an empty string.
                             */
                            wikilambdafn_type?: string;
                            /**
                             * The maximum number of results to return
                             *
                             * Defaults to 10.
                             */
                            wikilambdafn_limit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wikilambdafn_continue?: string;
                        }

                        /**
                         * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                         */
                        interface WikiLambdaLoadZObjects extends Query {
                            /**
                             * The ZObject ZIDs to fetch.
                             */
                            wikilambdaload_zids: string | string[];
                            /**
                             * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                             */
                            wikilambdaload_revisions?: string | string[];
                            /**
                             * The MediaWiki language code in which to return all the ZObject labels.
                             */
                            wikilambdaload_language?: string;
                            /**
                             * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                             */
                            wikilambdaload_get_dependencies?: boolean;
                        }

                        /**
                         * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                         */
                        interface WikiLambdaSearchLabels extends Query {
                            /**
                             * The search term
                             *
                             * Defaults to an empty string.
                             */
                            wikilambdasearch_search?: string;
                            /**
                             * The MediaWiki language code in which to search
                             */
                            wikilambdasearch_language: string;
                            /**
                             * Whether to search only in the given language and not its fallback languages
                             */
                            wikilambdasearch_nofallback?: boolean;
                            /**
                             * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                             */
                            wikilambdasearch_exact?: boolean;
                            /**
                             * Restrict matches to a specific type of ZObject.
                             */
                            wikilambdasearch_type?: string;
                            /**
                             * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                             */
                            wikilambdasearch_return_type?: string;
                            /**
                             * Restrict return type to be strictly the given one, excluding generic ZObject.
                             */
                            wikilambdasearch_strict_return_type?: boolean;
                            /**
                             * The maximum number of results to return
                             *
                             * Defaults to 10.
                             */
                            wikilambdasearch_limit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            wikilambdasearch_continue?: string;
                        }

                        /**
                         * Enumerate all wiki sets.
                         */
                        interface WikiSets extends Query {
                            /**
                             * The name of the wiki set to start from.
                             */
                            wsfrom?: string;
                            /**
                             * What pieces of information to include:
                             *
                             * - **type**: Opt-in based (includes only specified wikis) or opt-out based (includes all wikis except specified).
                             * - **wikisincluded**: The wikis that are included in this wiki set.
                             * - **wikisnotincluded**: The wikis that are not included in this wiki set.
                             */
                            wsprop?: OneOrMore<"type" | "wikisincluded" | "wikisnotincluded">;
                            /**
                             * How many wiki sets to return.
                             *
                             * Defaults to 10.
                             */
                            wslimit?: Limit;
                            /**
                             * Order results by name.
                             */
                            wsorderbyname?: boolean;
                        }
                    }

                    namespace Meta {
                        /**
                         * Return messages from this site.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allmessages
                         */
                        interface AllMessages extends Query {
                            /**
                             * Which messages to output. `*` (default) means all messages.
                             *
                             * Defaults to `*`.
                             */
                            ammessages?: string | string[];
                            /**
                             * Which properties to get.
                             */
                            amprop?: OneOrMore<"default">;
                            /**
                             * Set to enable parser, will preprocess the wikitext of message (substitute magic words, handle templates, etc.).
                             */
                            amenableparser?: boolean;
                            /**
                             * If set, do not include the content of the messages in the output.
                             */
                            amnocontent?: boolean;
                            /**
                             * Also include local messages, i.e. messages that don't exist in the software but do exist as in the MediaWiki namespace.
                             * This lists all MediaWiki-namespace pages, so it will also list those that aren't really messages such as {@link https://www.mediawiki.org/wiki/MediaWiki:Common.js Common.js}.
                             */
                            amincludelocal?: boolean;
                            /**
                             * Arguments to be substituted into message.
                             */
                            amargs?: string | string[];
                            /**
                             * Return only messages with names that contain this string.
                             */
                            amfilter?: string;
                            /**
                             * Return only messages in this customisation state.
                             *
                             * Defaults to `all`.
                             */
                            amcustomised?: "all" | "modified" | "unmodified";
                            /**
                             * Return messages in this language.
                             */
                            amlang?: string;
                            /**
                             * Return messages starting at this message.
                             */
                            amfrom?: string;
                            /**
                             * Return messages ending at this message.
                             */
                            amto?: string;
                            /**
                             * Page name to use as context when parsing message (for amenableparser option).
                             */
                            amtitle?: string;
                            /**
                             * Return messages with this prefix.
                             */
                            amprefix?: string;
                        }

                        /**
                         * Retrieve information about the current authentication status.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Authmanagerinfo
                         */
                        interface AuthManagerInfo extends Query {
                            /**
                             * Test whether the user's current authentication status is sufficient for the specified security-sensitive operation.
                             */
                            amisecuritysensitiveoperation?: string;
                            /**
                             * Fetch information about the authentication requests needed for the specified authentication action.
                             */
                            amirequestsfor?:
                                | "change"
                                | "create"
                                | "create-continue"
                                | "link"
                                | "link-continue"
                                | "login"
                                | "login-continue"
                                | "remove"
                                | "unlink";
                            /**
                             * Merge field information for all authentication requests into one array.
                             */
                            amimergerequestfields?: boolean;
                            /**
                             * Format to use for returning messages.
                             *
                             * Defaults to `wikitext`.
                             */
                            amimessageformat?: "html" | "none" | "raw" | "wikitext";
                        }

                        /**
                         * Get information about what languages the user knows
                         */
                        interface Babel extends Query {
                            /**
                             * User to get information about
                             */
                            babuser: string;
                        }

                        /**
                         * Read the community configuration
                         */
                        interface CommunityConfiguration extends Query {
                            /**
                             * Community configuration provider ID
                             */
                            ccrprovider:
                                | "AutoModerator"
                                | "CommunityUpdates"
                                | "GrowthHomepage"
                                | "GrowthMentorList"
                                | "GrowthSuggestedEdits"
                                | "HelpPanel"
                                | "Mentorship";
                            /**
                             * Assert specific version
                             */
                            ccrassertversion?: string;
                        }

                        /**
                         * Get the number of your published translations that were deleted.
                         *
                         * @private
                         */
                        interface CXDeletedTranslations extends Query {
                            /**
                             * Timestamp to get only newer deletions.
                             */
                            dtafter?: string;
                            /**
                             * Namespace in which the deleted translations were published. Defaults to the main namespace.
                             */
                            dtnamespace?: number;
                        }

                        /**
                         * Get a summary of logged API feature usages for a user agent.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ApiFeatureUsage
                         */
                        interface FeatureUsage extends Query {
                            /**
                             * Start of date range to query.
                             */
                            afustart?: string;
                            /**
                             * End of date range to query.
                             */
                            afuend?: string;
                            /**
                             * User agent to query. If not specified, the agent in the request will be queried.
                             */
                            afuagent?: string;
                            /**
                             * If specified, return details on only these features.
                             */
                            afufeatures?: string | string[];
                        }

                        /**
                         * Return meta information about image repositories configured on the wiki.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Filerepoinfo
                         */
                        interface FileRepoInfo extends Query {
                            /**
                             * Which repository properties to get (properties available may vary on other wikis).
                             *
                             * - **canUpload**: Whether files can be uploaded to this repository, e.g. via CORS and shared authentication.
                             * - **descBaseUrl**: (no description)
                             * - **descriptionCacheExpiry**: (no description)
                             * - **displayname**: The human-readable name of the repository wiki.
                             * - **favicon**: Repository wiki's favicon URL, from {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgFavicon `$wgFavicon`}.
                             * - **fetchDescription**: Whether file description pages are fetched from this repository when viewing local file description pages.
                             * - **initialCapital**: Whether file names implicitly start with a capital letter.
                             * - **local**: Whether that repository is the local one or not.
                             * - **name**: The key of the repository - used in e.g. {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgForeignFileRepos `$wgForeignFileRepos`} and {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bimageinfo imageinfo} return values.
                             * - **rootUrl**: Root URL path for image paths.
                             * - **scriptDirUrl**: Root URL path for the repository wiki's MediaWiki installation.
                             * - **thumbUrl**: Root URL path for thumbnail paths.
                             * - **url**: Public zone URL path.
                             */
                            friprop?: OneOrMore<
                                | "canUpload"
                                | "descBaseUrl"
                                | "descriptionCacheExpiry"
                                | "displayname"
                                | "favicon"
                                | "fetchDescription"
                                | "initialCapital"
                                | "local"
                                | "name"
                                | "rootUrl"
                                | "scriptDirUrl"
                                | "thumbUrl"
                                | "url"
                            >;
                        }

                        /**
                         * Retrieve global preferences for the current user.
                         *
                         * Can retrieve both global preferences and their local overrides.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GlobalPreferences/API
                         */
                        interface GlobalPreferences extends Query {
                            /**
                             * Which prererences to include:
                             *
                             * - **preferences**: Global preferences.
                             * - **localoverrides**: Local overrides for global preferences.
                             *
                             * Defaults to `preferences` and `localoverrides`.
                             */
                            gprprop?: OneOrMore<"localoverrides" | "preferences">;
                        }

                        /**
                         * Show information about global renames that are in progress.
                         */
                        interface GlobalRenameStatus extends Query {
                            /**
                             * User that is being renamed. Can be either their old name or new name.
                             */
                            grsuser?: string;
                        }

                        /**
                         * Show information about a global user.
                         */
                        interface GlobalUserInfo extends Query {
                            /**
                             * User to get information about. If `guiuser` and `guiid` both are omitted, it defaults to the current user.
                             */
                            guiuser?: string;
                            /**
                             * Global user ID to get information about. If `guiuser` and `guiid` both are omitted, it defaults to the current user.
                             */
                            guiid?: number;
                            /**
                             * Which properties to get:
                             *
                             * - **groups**: Get a list of global groups this user belongs to.
                             * - **rights**: Get a list of global rights this user has.
                             * - **merged**: Get a list of merged accounts.
                             * - **unattached**: Get a list of unattached accounts.
                             * - **editcount**: Get the user's global edit count.
                             */
                            guiprop?: OneOrMore<
                                "editcount" | "groups" | "merged" | "rights" | "unattached"
                            >;
                        }

                        /**
                         * Query current user's mentee status; see documentation of action=growthsetmenteestatus for detailed information about individual statuses.
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface GrowthMenteeStatus extends Query {}

                        /**
                         * Query current user's mentor status
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface GrowthMentorStatus extends Query {}

                        /**
                         * Get a suggested task type for a user to try next.
                         *
                         * @private
                         */
                        interface GrowthNextSuggestedTaskType extends Query {
                            /**
                             * The task type that the user is currently working on.
                             */
                            gnsttactivetasktype:
                                | "copyedit"
                                | "expand"
                                | "image-recommendation"
                                | "link-recommendation"
                                | "links"
                                | "references"
                                | "section-image-recommendation"
                                | "update";
                        }

                        /**
                         * Return information about available languages.
                         *
                         * {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue Continuation} may be applied if retrieving the information takes too long for one request.
                         */
                        interface Languageinfo extends Query {
                            /**
                             * Which information to get for each language.
                             *
                             * - **code**: The language code. (This code is MediaWiki-specific, though there are overlaps with other standards.)
                             * - **bcp47**: The BCP-47 language code.
                             * - **dir**: The writing direction of the language (either `ltr` or `rtl`).
                             * - **autonym**: The autonym of the language, that is, the name in that language.
                             * - **name**: The name of the language in the language specified by the `uselang` parameter, with language fallbacks applied if necessary.
                             * - **variantnames**: The short names for language variants used for language conversion links.
                             * - **fallbacks**: The language codes of the fallback languages configured for this language. The implicit final fallback to 'en' is not included (but some languages may fall back to 'en' explicitly).
                             * - **variants**: The language codes of the variants supported by this language.
                             *
                             * Defaults to `code`.
                             */
                            liprop?: OneOrMore<
                                | "autonym"
                                | "bcp47"
                                | "code"
                                | "dir"
                                | "fallbacks"
                                | "name"
                                | "variantnames"
                                | "variants"
                            >;
                            /**
                             * Language codes of the languages that should be returned, or `*` for all languages.
                             *
                             * Defaults to `*`.
                             */
                            licode?: string | string[];
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            licontinue?: string;
                        }

                        /**
                         * Query language stats.
                         */
                        interface LanguageStats extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to `0`.
                             */
                            lsoffset?: string;
                            /**
                             * Language code.
                             */
                            lslanguage: string;
                            /**
                             * Message group ID. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                             */
                            lsgroup?: string;
                        }

                        /**
                         * Get number of lint errors in each category
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface LinterStats extends Query {}

                        /**
                         * Fetch possible renames for a message in a group during imports
                         */
                        interface ManageMessageGroups extends Query {
                            /**
                             * Group Id. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                             */
                            mmggroupId: string;
                            /**
                             * Message key
                             */
                            mmgmessageKey: string;
                            /**
                             * Changeset name - Default / Unattended / MediaWiki etc.
                             *
                             * Defaults to `default`.
                             */
                            mmgchangesetName?: string;
                        }

                        /**
                         * Return information about message groups.
                         *
                         * Note that the uselang parameter affects the output of language dependent parts.
                         */
                        interface MessageGroups extends Query {
                            /**
                             * When using the tree format, limit the depth to this many levels. Value 0 means that no subgroups are shown. If the limit is reached, the output includes a "groupcount" value, which states the number of direct children.
                             *
                             * Defaults to 100.
                             */
                            mgdepth?: number;
                            /**
                             * Only return messages with IDs that match one or more of the inputs given (case-insensitive, separated by pipes, * wildcard).
                             *
                             * Defaults to an empty string.
                             */
                            mgfilter?: string | string[];
                            /**
                             * In the tree format message groups can exist in multiple places in the tree.
                             *
                             * Defaults to `flat`.
                             */
                            mgformat?: "flat" | "tree";
                            /**
                             * Preferred size of rasterised group icon.
                             *
                             * Defaults to 64.
                             */
                            mgiconsize?: number;
                            /**
                             * What translation-related information to get:
                             *
                             * - **id**: Include ID of the group.
                             * - **label**: Include label of the group.
                             * - **description**: Include description of the group.
                             * - **class**: Include class name of the group.
                             * - **namespace**: Include namespace of the group. Not all groups belong to a single namespace.
                             * - **exists**: Include self-calculated existence property of the group.
                             * - **icon**: Include URLs to icon of the group.
                             * - **priority**: Include priority status like discouraged.
                             * - **prioritylangs**: Include preferred languages. If not set, this returns false.
                             * - **priorityforce**: Include priority status - is the priority languages setting forced.
                             * - **workflowstates**: Include the workflow states for the message group.
                             * - **sourcelanguage**: Include the source language for the message group.
                             * - **subscription**: Include whether the user is subscribed to the group.
                             *
                             * Defaults to `id`, `label`, `description`, `class`, and `exists`.
                             */
                            mgprop?: OneOrMore<
                                | "class"
                                | "description"
                                | "exists"
                                | "icon"
                                | "id"
                                | "label"
                                | "namespace"
                                | "priority"
                                | "priorityforce"
                                | "prioritylangs"
                                | "sourcelanguage"
                                | "subscription"
                                | "workflowstates"
                            >;
                            /**
                             * When using the tree format, instead of starting from top level start from the given message group, which must be an aggregate message group. When using flat format only the specified group is returned.
                             *
                             * Defaults to an empty string.
                             */
                            mgroot?: string;
                            /**
                             * Only return message groups that can be translated to the given language.
                             *
                             * Defaults to an empty string.
                             */
                            mglanguageFilter?: string;
                        }

                        /**
                         * Query message group stats.
                         */
                        interface MessageGroupStats extends Query {
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to `0`.
                             */
                            mgsoffset?: string;
                            /**
                             * Message group ID. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                             */
                            mgsgroup: string;
                            /**
                             * Do not display languages which have completed translation
                             */
                            mgssuppresscomplete?: boolean;
                            /**
                             * Do not display languages which do not have any translations
                             */
                            mgssuppressempty?: boolean;
                        }

                        /**
                         * Query all translations for a single message.
                         */
                        interface MessageTranslations extends Query {
                            /**
                             * Page title of a known message, with namespace and language code.
                             */
                            mttitle: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            mtoffset?: number;
                        }

                        /**
                         * Get notifications waiting for the current user.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Echo_(Notifications)/API
                         */
                        interface Notifications extends Query {
                            /**
                             * List of wikis to fetch notifications from (defaults to only current wiki).
                             */
                            notwikis?: string | string[];
                            /**
                             * Filter notifications returned.
                             *
                             * Defaults to `read` and `!read`.
                             */
                            notfilter?: OneOrMore<Toggle<"read">>;
                            /**
                             * Details to request.
                             *
                             * Defaults to `list`.
                             */
                            notprop?: OneOrMore<"count" | "list" | "seenTime">;
                            /**
                             * The notification sections to query (i.e. some combination of 'alert' and 'message').
                             *
                             * Defaults to `alert` and `message`.
                             */
                            notsections?: OneOrMore<"alert" | "message">;
                            /**
                             * Whether to group the result by section. Each section is fetched separately if set.
                             */
                            notgroupbysection?: boolean;
                            /**
                             * If specified, notifications will be returned formatted this way.
                             *
                             * - **model**: Raw notification data
                             * - **special**: Formatted for Special:Notifications page (and only that!) Do not rely on the HTML as it may change at any given time.
                             * - **flyout**: Deprecated. Use `notformat=model` for raw data
                             * - **html**: Deprecated. Use `notformat=model` for raw data
                             */
                            notformat?: "flyout" | "html" | "model" | "special";
                            /**
                             * The maximum number of notifications to return.
                             *
                             * Defaults to 20.
                             */
                            notlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            notcontinue?: string;
                            /**
                             * Whether to show unread notifications first (only used if groupbysection is not set).
                             */
                            notunreadfirst?: boolean;
                            /**
                             * Only return notifications for these pages. To get notifications not associated with any page, use [] as a title.
                             */
                            nottitles?: string | string[];
                            /**
                             * Whether to show bundle compatible unread notifications according to notification types bundling rules.
                             */
                            notbundle?: boolean;
                            /**
                             * Notifier types for which to return notifications.
                             *
                             * Defaults to `web`.
                             */
                            notnotifiertypes?: OneOrMore<"email" | "push" | "web">;
                            /**
                             * When more alert results are available, use this to continue.
                             */
                            notalertcontinue?: string;
                            /**
                             * Whether to show unread message notifications first (only used if groupbysection is set).
                             */
                            notalertunreadfirst?: boolean;
                            /**
                             * When more message results are available, use this to continue.
                             */
                            notmessagecontinue?: string;
                            /**
                             * Whether to show unread alert notifications first (only used if groupbysection is set).
                             */
                            notmessageunreadfirst?: boolean;
                            /**
                             * True to opt in to a summary notification of notifications on foreign wikis.
                             */
                            notcrosswikisummary?: boolean;
                        }

                        /**
                         * Check to see if two-factor authentication (OATH) is enabled for a user.
                         *
                         * @private
                         */
                        interface OATH extends Query {
                            /**
                             * User to get information about. Defaults to the current user.
                             */
                            oathuser?: string;
                            /**
                             * Reason for querying the OATH status.
                             */
                            oathreason?: string;
                        }

                        /**
                         * Return ORES configuration and model data for this wiki.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ORES
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface ORES extends Query {}

                        /**
                         * Return information about configuration of ProofreadPage extension.
                         */
                        interface ProofreadInfo extends Query {
                            /**
                             * Which proofread properties to get:
                             *
                             * - **namespaces**: Information about "Page" and "Index" namespaces.
                             * - **qualitylevels**: List of proofread quality levels.
                             *
                             * Defaults to `namespaces` and `qualitylevels`.
                             */
                            prpiprop?: OneOrMore<"namespaces" | "qualitylevels">;
                        }

                        /**
                         * List or filter the user's reading lists and show metadata about them.
                         *
                         * This module has four modes of operation. With the `rllist` parameter, it returns information about the specified list. With the `rlchangedsince` parameter, it returns all lists of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted lists. Only changes to list metadata are considered, not changes to list items.) With the `rlproject` and `rltitle` parameters, it returns all lists that include that page. Without any of those parameters, it returns all lists.
                         *
                         * @private
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                         */
                        interface ReadingLists extends Query {
                            /**
                             * List ID.
                             */
                            rllist?: number;
                            /**
                             * Project of the page to filter on. Must be used together with `rltitle`. Will only return lists which include this project and title.
                             */
                            rlproject?: string;
                            /**
                             * Title of the page to filter on. Must be used together with `rlproject`. Will only return lists which include this project and title.
                             */
                            rltitle?: string;
                            /**
                             * Show lists that have been changed since this timestamp. Must be after the current timestamp. Clients should use the timestamp returned in the `readinglists-synctimestamp` field from an earlier call if they want to ensure that no changes are missed, and should be prepared to receive changes that have already been returned in an earlier response, and handle them in an idempotent way.
                             */
                            rlchangedsince?: string;
                            /**
                             * Property to sort by. Ignored when `rlproject` and `rltitle` is set (results are returned in DB order). Defaults to `updated` when `rlchangedsince` is set, and to `name` otherwise.
                             *
                             * - **name**: List name. (Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                             * - **updated**: Last update timestamp. (Updates include list metadata changes but not changes to list items.)
                             */
                            rlsort?: "name" | "updated";
                            /**
                             * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`. Ignored when `rlproject` and `rltitle` is set.
                             *
                             * Defaults to `ascending`.
                             */
                            rldir?: "ascending" | "descending";
                            /**
                             * Number of result items to return.
                             *
                             * Defaults to 10.
                             */
                            rllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            rlcontinue?: string;
                        }

                        /**
                         * Return general information about the site.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Siteinfo
                         */
                        interface Siteinfo extends Query {
                            /**
                             * Which information to get:
                             *
                             * - **general**: Overall system information.
                             * - **namespaces**: List of registered namespaces and their canonical names.
                             * - **namespacealiases**: List of registered namespace aliases.
                             * - **specialpagealiases**: List of special page aliases.
                             * - **magicwords**: List of magic words and their aliases.
                             * - **interwikimap**: Returns interwiki map (optionally filtered, optionally localised by using `siinlanguagecode`).
                             * - **dbrepllag**: Returns database server with the highest replication lag.
                             * - **statistics**: Returns site statistics.
                             * - **usergroups**: Returns user groups and the associated permissions.
                             * - **autocreatetempuser**: Returns configuration for the automatic creation of temporary user accounts (also known as IP masking).
                             * - **clientlibraries**: Returns client-side libraries installed on the wiki
                             * - **libraries**: Returns libraries installed on the wiki.
                             * - **extensions**: Returns extensions installed on the wiki.
                             * - **fileextensions**: Returns list of file extensions (file types) allowed to be uploaded.
                             * - **rightsinfo**: Returns wiki rights (license) information if available.
                             * - **restrictions**: Returns information on available restriction (protection) types.
                             * - **languages**: Returns a list of languages MediaWiki supports (optionally localised by using `siinlanguagecode`).
                             * - **languagevariants**: Returns a list of language codes for which {@link https://www.mediawiki.org/wiki/Special:MyLanguage/LanguageConverter LanguageConverter} is enabled, and the variants supported for each.
                             * - **skins**: Returns a list of all enabled skins (optionally localised by using `siinlanguagecode`, otherwise in the content language).
                             * - **extensiontags**: Returns a list of parser extension tags.
                             * - **functionhooks**: Returns a list of parser function hooks.
                             * - **showhooks**: Returns a list of all subscribed hooks (contents of {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgHooks `$wgHooks`}).
                             * - **variables**: Returns a list of variable IDs.
                             * - **protocols**: Returns a list of protocols that are allowed in external links.
                             * - **defaultoptions**: Returns the default values for user preferences.
                             * - **uploaddialog**: Returns the upload dialog configuration.
                             * - **autopromote**: Returns the automatic promotion configuration.
                             * - **autopromoteonce**: Returns the automatic promotion configuration that are only done once.
                             *
                             * Defaults to `general`.
                             */
                            siprop?: OneOrMore<
                                | "autocreatetempuser"
                                | "autopromote"
                                | "autopromoteonce"
                                | "clientlibraries"
                                | "dbrepllag"
                                | "defaultoptions"
                                | "extensions"
                                | "extensiontags"
                                | "fileextensions"
                                | "functionhooks"
                                | "general"
                                | "interwikimap"
                                | "languages"
                                | "languagevariants"
                                | "libraries"
                                | "magicwords"
                                | "namespacealiases"
                                | "namespaces"
                                | "protocols"
                                | "restrictions"
                                | "rightsinfo"
                                | "showhooks"
                                | "skins"
                                | "specialpagealiases"
                                | "statistics"
                                | "uploaddialog"
                                | "usergroups"
                                | "variables"
                            >;
                            /**
                             * Return only local or only nonlocal entries of the interwiki map.
                             */
                            sifilteriw?: Toggle<"local">;
                            /**
                             * List all database servers, not just the one lagging the most.
                             */
                            sishowalldb?: boolean;
                            /**
                             * Lists the number of users in user groups.
                             */
                            sinumberingroup?: boolean;
                            /**
                             * Language code for localised language names (best effort) and skin names.
                             */
                            siinlanguagecode?: string;
                        }

                        /**
                         * Shows sitewide pageview data (daily pageview totals for each of the last `pvisdays` days).
                         *
                         * The result format is date (Ymd) => count.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                         */
                        interface SiteViews extends Query {
                            /**
                             * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                             *
                             * - **pageviews**: Plain pageviews.
                             * - **uniques**: Unique visitors.
                             *
                             * Defaults to `pageviews`.
                             */
                            pvismetric?: "pageviews" | "uniques";
                            /**
                             * The number of days to show.
                             *
                             * Defaults to 60.
                             */
                            pvisdays?: number;
                        }

                        /**
                         * Gets tokens for data-modifying actions.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Tokens
                         */
                        interface Tokens extends Query {
                            /**
                             * Types of token to request.
                             *
                             * Defaults to `csrf`.
                             */
                            type?:
                                | "*"
                                | OneOrMore<
                                      | "createaccount"
                                      | "csrf"
                                      | "deleteglobalaccount"
                                      | "login"
                                      | "patrol"
                                      | "rollback"
                                      | "setglobalaccountstatus"
                                      | "userrights"
                                      | "watch"
                                  >;
                        }

                        /**
                         * Get pages for which there are unread notifications for the current user.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Echo_(Notifications)/API
                         */
                        interface UnreadNotificationPages extends Query {
                            /**
                             * List of wikis to fetch pages with unread notifications from (defaults to only current wiki).
                             */
                            unpwikis?: string | string[];
                            /**
                             * Group talk pages together with their subject page, and group notifications not associated with a page together with the current user's user page.
                             */
                            unpgrouppages?: boolean;
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            unplimit?: Limit;
                        }

                        /**
                         * Get information about the current user.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Userinfo
                         */
                        interface UserInfo extends Query {
                            /**
                             * Which pieces of information to include:
                             *
                             * - **blockinfo**: Tags if the current user is blocked, by whom, and for what reason.
                             * - **hasmsg**: Adds a tag `messages` if the current user has pending messages.
                             * - **groups**: Lists all the groups the current user belongs to.
                             * - **groupmemberships**: Lists groups that the current user has been explicitly assigned to, including the expiry date of each group membership.
                             * - **implicitgroups**: Lists all the groups the current user is automatically a member of.
                             * - **rights**: Lists all the rights the current user has.
                             * - **changeablegroups**: Lists the groups the current user can add to and remove from.
                             * - **options**: Lists all preferences the current user has set.
                             * - **editcount**: Adds the current user's edit count.
                             * - **ratelimits**: Lists all rate limits applying to the current user.
                             * - **theoreticalratelimits**: Lists all rate limits that would apply to the current user if they were not exempt from all ratelimits based on user rights or ip
                             * - **email**: Adds the user's email address and email authentication date.
                             * - **realname**: Adds the user's real name.
                             * - **acceptlang**: Echoes the `Accept-Language` header sent by the client in a structured format.
                             * - **registrationdate**: Adds the user's registration date.
                             * - **unreadcount**: Adds the count of unread pages on the user's watchlist (maximum 999; returns `1000+` if more).
                             * - **centralids**: Adds the central IDs and attachment status for the user.
                             * - **latestcontrib**: Adds the date of user's latest contribution.
                             * - **cancreateaccount**: Indicates whether the user is allowed to create accounts. To check whether some specific account can be created, use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Busers `action=query&list=users&usprop=cancreate`}.
                             */
                            uiprop?: string | string[];
                            /**
                             * With `uiprop=centralids`, indicate whether the user is attached with the wiki identified by this ID.
                             */
                            uiattachedwiki?: string;
                        }

                        /**
                         * Returns information about the content languages Wikibase accepts in different contexts.
                         */
                        interface WBContentLanguages extends Query {
                            /**
                             * The context in which the content languages should be valid.
                             *
                             * - **term**: The terms (label, description, aliases) of an entity.
                             * - **monolingualtext**: A monolingual text value in a statement.
                             * - **term-lexicographical**: The terms of a lexicographical entity (lemmas of a lexeme, representations of a form, or glosses of a sense).
                             *
                             * Defaults to `term`.
                             */
                            wbclcontext?: "monolingualtext" | "term" | "term-lexicographical";
                            /**
                             * The properties that should be returned about each language.
                             *
                             * - **code**: The language code.
                             * - **autonym**: The autonym of the language, that is, the name of the language in that language. May not be known for all languages.
                             * - **name**: The name of the language in the current language (specified via the `uselang` parameter), with language fallbacks applied if necessary. Usually, at least an English name is known for all content languages Wikibase accepts.
                             *
                             * Defaults to `code`.
                             */
                            wbclprop?: OneOrMore<"autonym" | "code" | "name">;
                        }

                        /**
                         * Returns information needed for the {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Wikidata_Bridge Data Bridge} feature.
                         *
                         * This is an internal module. Please do not use it.
                         *
                         * @private
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface WBDataBridgeConfig extends Query {}

                        /**
                         * Get information about the Wikibase client and the associated Wikibase repository.
                         */
                        interface Wikibase extends Query {
                            /**
                             * Which properties to get:
                             *
                             * - **url**: Base URL, script path and article path of the Wikibase repository.
                             * - **siteid**: The siteid of this site.
                             *
                             * Defaults to `url` and `siteid`.
                             */
                            wbprop?: OneOrMore<"siteid" | "url">;
                        }

                        /**
                         * Feature-specific editing statistics for the logged-in user.
                         *
                         * @private
                         */
                        // tslint:disable-next-line:no-empty-interface
                        interface WikimediaEditorTasksCounts extends Query {}
                    }

                    namespace Generator {
                        /**
                         * Enumerate all categories.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                         */
                        interface AllCategories extends Query {
                            generator?: "allcategories";
                            /**
                             * The category to start enumerating from.
                             */
                            gacfrom?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gaccontinue?: string;
                            /**
                             * The category to stop enumerating at.
                             */
                            gacto?: string;
                            /**
                             * Search for all category titles that begin with this value.
                             */
                            gacprefix?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            gacdir?: "ascending" | "descending";
                            /**
                             * Only return categories with at least this many members.
                             */
                            gacmin?: number;
                            /**
                             * Only return categories with at most this many members.
                             */
                            gacmax?: number;
                            /**
                             * How many categories to return.
                             *
                             * Defaults to 10.
                             */
                            gaclimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **size**: Adds number of pages in the category.
                             * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                             *
                             * Defaults to an empty string.
                             */
                            gacprop?: OneOrMore<"hidden" | "size">;
                        }

                        /**
                         * List all deleted revisions by a user or in a namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                         */
                        interface AllDeletedRevisions extends Query {
                            generator?: "alldeletedrevisions";
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            gadrprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            gadrslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `gadrcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                             */
                            gadrlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                             *
                             * @deprecated
                             */
                            gadrexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                             *
                             * @deprecated
                             */
                            gadrgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            gadrparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            gadrsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            gadrdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            gadrdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                             *
                             * @deprecated
                             */
                            gadrdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `adrdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            gadrcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Only list revisions by this user.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            gadruser?: string;
                            /**
                             * Only list pages in this namespace.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            gadrnamespace?: number | number[] | "*";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            gadrstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            gadrend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                             * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                             *
                             * Defaults to `older`.
                             */
                            gadrdir?: "newer" | "older";
                            /**
                             * Start listing at this title.
                             */
                            gadrfrom?: string;
                            /**
                             * Stop listing at this title.
                             */
                            gadrto?: string;
                            /**
                             * Search for all page titles that begin with this value.
                             */
                            gadrprefix?: string;
                            /**
                             * Don't list revisions by this user.
                             */
                            gadrexcludeuser?: string;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            gadrtag?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gadrcontinue?: string;
                            /**
                             * When being used as a generator, generate titles rather than revision IDs.
                             */
                            gadrgeneratetitles?: boolean;
                        }

                        /**
                         * List all file usages, including non-existing.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                         */
                        interface AllFileUsages extends Query {
                            generator?: "allfileusages";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gafcontinue?: string;
                            /**
                             * The title of the file to start enumerating from.
                             */
                            gaffrom?: string;
                            /**
                             * The title of the file to stop enumerating at.
                             */
                            gafto?: string;
                            /**
                             * Search for all file titles that begin with this value.
                             */
                            gafprefix?: string;
                            /**
                             * Only show distinct file titles. Cannot be used with afprop=ids.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            gafunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                             * - **title**: Adds the title of the file.
                             *
                             * Defaults to `title`.
                             */
                            gafprop?: OneOrMore<"ids" | "title">;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            gaflimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gafdir?: "ascending" | "descending";
                        }

                        /**
                         * Enumerate all images sequentially.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                         */
                        interface AllImages extends Query {
                            generator?: "allimages";
                            /**
                             * Property to sort by.
                             *
                             * Defaults to `name`.
                             */
                            gaisort?: "name" | "timestamp";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gaidir?: "ascending" | "descending" | "newer" | "older";
                            /**
                             * The image title to start enumerating from. Can only be used with aisort=name.
                             */
                            gaifrom?: string;
                            /**
                             * The image title to stop enumerating at. Can only be used with aisort=name.
                             */
                            gaito?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gaicontinue?: string;
                            /**
                             * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                             */
                            gaistart?: string;
                            /**
                             * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                             */
                            gaiend?: string;
                            /**
                             * Which file information to get:
                             *
                             * - **timestamp**: Adds timestamp for the uploaded version.
                             * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                             * - **dimensions**: Alias for size.
                             * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                             * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                             *
                             * Defaults to `timestamp` and `url`.
                             */
                            gaiprop?: OneOrMore<
                                | "badfile"
                                | "bitdepth"
                                | "canonicaltitle"
                                | "comment"
                                | "commonmetadata"
                                | "dimensions"
                                | "extmetadata"
                                | "mediatype"
                                | "metadata"
                                | "mime"
                                | "parsedcomment"
                                | "sha1"
                                | "size"
                                | "timestamp"
                                | "url"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Search for all image titles that begin with this value. Can only be used with aisort=name.
                             */
                            gaiprefix?: string;
                            /**
                             * Limit to images with at least this many bytes.
                             */
                            gaiminsize?: number;
                            /**
                             * Limit to images with at most this many bytes.
                             */
                            gaimaxsize?: number;
                            /**
                             * SHA1 hash of image. Overrides aisha1base36.
                             */
                            gaisha1?: string;
                            /**
                             * SHA1 hash of image in base 36 (used in MediaWiki).
                             */
                            gaisha1base36?: string;
                            /**
                             * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                             */
                            gaiuser?: string;
                            /**
                             * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                             *
                             * Defaults to `all`.
                             */
                            gaifilterbots?: "all" | "bots" | "nobots";
                            /**
                             * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                             */
                            gaimime?: string | string[];
                            /**
                             * How many images in total to return.
                             *
                             * Defaults to 10.
                             */
                            gailimit?: Limit;
                        }

                        /**
                         * Enumerate all links that point to a given namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                         */
                        interface AllLinks extends Query {
                            generator?: "alllinks";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            galcontinue?: string;
                            /**
                             * The title of the link to start enumerating from.
                             */
                            galfrom?: string;
                            /**
                             * The title of the link to stop enumerating at.
                             */
                            galto?: string;
                            /**
                             * Search for all linked titles that begin with this value.
                             */
                            galprefix?: string;
                            /**
                             * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            galunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                             * - **title**: Adds the title of the link.
                             *
                             * Defaults to `title`.
                             */
                            galprop?: OneOrMore<"ids" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            galnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            gallimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            galdir?: "ascending" | "descending";
                        }

                        /**
                         * Enumerate all pages sequentially in a given namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                         */
                        interface AllPages extends Query {
                            generator?: "allpages";
                            /**
                             * The page title to start enumerating from.
                             */
                            gapfrom?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gapcontinue?: string;
                            /**
                             * The page title to stop enumerating at.
                             */
                            gapto?: string;
                            /**
                             * Search for all page titles that begin with this value.
                             */
                            gapprefix?: string;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            gapnamespace?: number;
                            /**
                             * Which pages to list.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                             *
                             * Defaults to `all`.
                             */
                            gapfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                             *
                             * Defaults to `all`.
                             */
                            gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                            /**
                             * Limit to pages with at least this many bytes.
                             */
                            gapminsize?: number;
                            /**
                             * Limit to pages with at most this many bytes.
                             */
                            gapmaxsize?: number;
                            /**
                             * Limit to protected pages only.
                             */
                            gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                            /**
                             * Filter protections based on protection level (must be used with apprtype= parameter).
                             */
                            gapprlevel?: string | string[];
                            /**
                             * Filter protections based on cascadingness (ignored when apprtype isn't set).
                             *
                             * Defaults to `all`.
                             */
                            gapprfiltercascade?: "all" | "cascading" | "noncascading";
                            /**
                             * Which protection expiry to filter the page on:
                             *
                             * - **indefinite**: Get only pages with indefinite protection expiry.
                             * - **definite**: Get only pages with a definite (specific) protection expiry.
                             * - **all**: Get pages with any protections expiry.
                             *
                             * Defaults to `all`.
                             */
                            gapprexpiry?: "all" | "definite" | "indefinite";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gaplimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gapdir?: "ascending" | "descending";
                        }

                        /**
                         * List all redirects to a namespace.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                         */
                        interface AllRedirects extends Query {
                            generator?: "allredirects";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            garcontinue?: string;
                            /**
                             * The title of the redirect to start enumerating from.
                             */
                            garfrom?: string;
                            /**
                             * The title of the redirect to stop enumerating at.
                             */
                            garto?: string;
                            /**
                             * Search for all target pages that begin with this value.
                             */
                            garprefix?: string;
                            /**
                             * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            garunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                             * - **title**: Adds the title of the redirect.
                             * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                             * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                             *
                             * Defaults to `title`.
                             */
                            garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 0.
                             */
                            garnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            garlimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gardir?: "ascending" | "descending";
                        }

                        /**
                         * List all revisions.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                         */
                        interface AllRevisions extends Query {
                            generator?: "allrevisions";
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            garvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "oresscores"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            garvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `garvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                             */
                            garvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                             *
                             * @deprecated
                             */
                            garvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                             *
                             * @deprecated
                             */
                            garvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            garvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            garvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            garvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            garvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                             *
                             * @deprecated
                             */
                            garvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `arvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            garvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Only list revisions by this user.
                             */
                            garvuser?: string;
                            /**
                             * Only list pages in this namespace.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            garvnamespace?: number | number[] | "*";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            garvstart?: string;
                            /**
                             * The timestamp to stop enumerating at.
                             */
                            garvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                             * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                             *
                             * Defaults to `older`.
                             */
                            garvdir?: "newer" | "older";
                            /**
                             * Don't list revisions by this user.
                             */
                            garvexcludeuser?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            garvcontinue?: string;
                            /**
                             * When being used as a generator, generate titles rather than revision IDs.
                             */
                            garvgeneratetitles?: boolean;
                        }

                        /**
                         * List all transclusions (pages embedded using {{x}}), including non-existing.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                         */
                        interface AllTransclusions extends Query {
                            generator?: "alltransclusions";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gatcontinue?: string;
                            /**
                             * The title of the transclusion to start enumerating from.
                             */
                            gatfrom?: string;
                            /**
                             * The title of the transclusion to stop enumerating at.
                             */
                            gatto?: string;
                            /**
                             * Search for all transcluded titles that begin with this value.
                             */
                            gatprefix?: string;
                            /**
                             * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                             * When used as a generator, yields target pages instead of source pages.
                             */
                            gatunique?: boolean;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                             * - **title**: Adds the title of the transclusion.
                             *
                             * Defaults to `title`.
                             */
                            gatprop?: OneOrMore<"ids" | "title">;
                            /**
                             * The namespace to enumerate.
                             *
                             * Defaults to 10.
                             */
                            gatnamespace?: number;
                            /**
                             * How many total items to return.
                             *
                             * Defaults to 10.
                             */
                            gatlimit?: Limit;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gatdir?: "ascending" | "descending";
                        }

                        /**
                         * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                         */
                        interface AutomaticTranslationDenseLanguages extends Query {
                            "generator"?: "automatictranslationdenselanguages";
                            /**
                             * The Wikidata ID.
                             */
                            "gqid": string;
                            /**
                             * A boolean value indicating whether the section titles should be included in the response.
                             */
                            "gsection-titles"?: boolean;
                        }

                        /**
                         * Find all pages that link to the given page.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                         */
                        interface Backlinks extends Query {
                            generator?: "backlinks";
                            /**
                             * Title to search. Cannot be used together with `blpageid`.
                             */
                            gbltitle?: string;
                            /**
                             * Page ID to search. Cannot be used together with `bltitle`.
                             */
                            gblpageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gblcontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            gblnamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gbldir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                             *
                             * Defaults to `all`.
                             */
                            gblfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                             *
                             * Defaults to 10.
                             */
                            gbllimit?: Limit;
                            /**
                             * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                             */
                            gblredirect?: boolean;
                        }

                        /**
                         * List all categories the pages belong to.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                         */
                        interface Categories extends Query {
                            generator?: "categories";
                            /**
                             * Which additional properties to get for each category:
                             *
                             * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                             * - **timestamp**: Adds timestamp of when the category was added.
                             * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                             */
                            gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                            /**
                             * Which kind of categories to show.
                             */
                            gclshow?: OneOrMore<Toggle<"hidden">>;
                            /**
                             * How many categories to return.
                             *
                             * Defaults to 10.
                             */
                            gcllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gclcontinue?: string;
                            /**
                             * Only list these categories. Useful for checking whether a certain page is in a certain category.
                             */
                            gclcategories?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gcldir?: "ascending" | "descending";
                        }

                        /**
                         * List all pages in a given category.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                         */
                        interface CategoryMembers extends Query {
                            generator?: "categorymembers";
                            /**
                             * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                             */
                            gcmtitle?: string;
                            /**
                             * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                             */
                            gcmpageid?: number;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                             * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                             * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                             * - **timestamp**: Adds the timestamp of when the page was included.
                             *
                             * Defaults to `ids` and `title`.
                             */
                            gcmprop?: OneOrMore<
                                "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                            >;
                            /**
                             * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            gcmnamespace?: number | number[] | "*";
                            /**
                             * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                             *
                             * Defaults to `page`, `subcat`, and `file`.
                             */
                            gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gcmcontinue?: string;
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            gcmlimit?: Limit;
                            /**
                             * Property to sort by.
                             *
                             * Defaults to `sortkey`.
                             */
                            gcmsort?: "sortkey" | "timestamp";
                            /**
                             * In which direction to sort.
                             *
                             * Defaults to `ascending`.
                             */
                            gcmdir?:
                                | "asc"
                                | "ascending"
                                | "desc"
                                | "descending"
                                | "newer"
                                | "older";
                            /**
                             * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                             */
                            gcmstart?: string;
                            /**
                             * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                             */
                            gcmend?: string;
                            /**
                             * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                             */
                            gcmstarthexsortkey?: string;
                            /**
                             * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                             */
                            gcmendhexsortkey?: string;
                            /**
                             * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                             */
                            gcmstartsortkeyprefix?: string;
                            /**
                             * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                             */
                            gcmendsortkeyprefix?: string;
                            /**
                             * Use cmstarthexsortkey instead.
                             *
                             * @deprecated
                             */
                            gcmstartsortkey?: string;
                            /**
                             * Use cmendhexsortkey instead.
                             *
                             * @deprecated
                             */
                            gcmendsortkey?: string;
                        }

                        /**
                         * Enumerate all pages that have custom review configurations.
                         */
                        interface Configuredpages extends Query {
                            generator?: "configuredpages";
                            /**
                             * Start listing at this page ID.
                             */
                            gcpstart?: number;
                            /**
                             * Stop listing at this page ID.
                             */
                            gcpend?: number;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            gcpdir?: "newer" | "older";
                            /**
                             * The namespaces to enumerate.
                             */
                            gcpnamespace?: number | number[] | "*";
                            /**
                             * The default page view version.
                             */
                            gcpdefault?: "latest" | "stable";
                            /**
                             * Review/autoreview restriction level.
                             */
                            gcpautoreview?: "none" | "sysop";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gcplimit?: Limit;
                        }

                        /**
                         * Query Content Translation database for translations.
                         */
                        interface ContentTranslation extends Query {
                            generator?: "contenttranslation";
                            /**
                             * Translation ID.
                             */
                            gtranslationid?: string;
                            /**
                             * The source language code.
                             */
                            gfrom?: string;
                            /**
                             * The target language code.
                             */
                            gto?: string;
                            /**
                             * The title of the source page.
                             */
                            gsourcetitle?: string;
                            /**
                             * The title of the source section (optional).
                             */
                            gsourcesectiontitle?: string;
                            /**
                             * The maximum number of translations to fetch.
                             *
                             * Defaults to 100.
                             */
                            glimit?: Limit;
                            /**
                             * Offset into result set (optional).
                             */
                            goffset?: string;
                            /**
                             * State of the translation.
                             */
                            gtype?: "draft" | "published";
                            /**
                             * The usecase for which the translations are being fetched (optional).
                             */
                            gusecase?:
                                | "desktop-editor-draft"
                                | "translation-corpora-units"
                                | "unified-dashboard";
                        }

                        /**
                         * Get suggestion lists for Content Translation.
                         */
                        interface ContentTranslationSuggestions extends Query {
                            generator?: "contenttranslationsuggestions";
                            /**
                             * The source language code.
                             */
                            gfrom?: string;
                            /**
                             * The target language code.
                             */
                            gto?: string;
                            /**
                             * Return suggestions only from a particular list
                             */
                            glistid?: string;
                            /**
                             * The maximum number of translation suggestions to fetch.
                             *
                             * Defaults to 10.
                             */
                            glimit?: Limit;
                            /**
                             * Offset for paginated results.
                             */
                            goffset?: string;
                            /**
                             * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                             */
                            gseed?: number;
                        }

                        /**
                         * Get deleted revision information.
                         *
                         * May be used in several ways:
                         *
                         * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                         * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                         */
                        interface DeletedRevisions extends Query {
                            generator?: "deletedrevisions";
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            gdrvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flags"
                                | "ids"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            gdrvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `gdrvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                             */
                            gdrvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                             *
                             * @deprecated
                             */
                            gdrvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                             *
                             * @deprecated
                             */
                            gdrvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            gdrvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            gdrvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            gdrvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            gdrvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                             *
                             * @deprecated
                             */
                            gdrvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `drvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            gdrvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                             */
                            gdrvstart?: string;
                            /**
                             * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                             */
                            gdrvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                             * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                             *
                             * Defaults to `older`.
                             */
                            gdrvdir?: "newer" | "older";
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            gdrvtag?: string;
                            /**
                             * Only list revisions by this user.
                             */
                            gdrvuser?: string;
                            /**
                             * Don't list revisions by this user.
                             */
                            gdrvexcludeuser?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gdrvcontinue?: string;
                        }

                        /**
                         * List all files that are duplicates of the given files based on hash values.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                         */
                        interface DuplicateFiles extends Query {
                            generator?: "duplicatefiles";
                            /**
                             * How many duplicate files to return.
                             *
                             * Defaults to 10.
                             */
                            gdflimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gdfcontinue?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gdfdir?: "ascending" | "descending";
                            /**
                             * Look only for files in the local repository.
                             */
                            gdflocalonly?: boolean;
                        }

                        /**
                         * Find all pages that embed (transclude) the given title.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                         */
                        interface Embeddedin extends Query {
                            generator?: "embeddedin";
                            /**
                             * Title to search. Cannot be used together with eipageid.
                             */
                            geititle?: string;
                            /**
                             * Page ID to search. Cannot be used together with eititle.
                             */
                            geipageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            geicontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            geinamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            geidir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            geifilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            geilimit?: Limit;
                        }

                        /**
                         * Enumerate pages that contain a given URL.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                         */
                        interface ExtUrlUsage extends Query {
                            generator?: "exturlusage";
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the ID of page.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **url**: Adds the URL used in the page.
                             *
                             * Defaults to `ids`, `title`, and `url`.
                             */
                            geuprop?: OneOrMore<"ids" | "title" | "url">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            geucontinue?: string;
                            /**
                             * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                             *
                             * Defaults to an empty string.
                             */
                            geuprotocol?:
                                | ""
                                | "bitcoin"
                                | "ftp"
                                | "ftps"
                                | "geo"
                                | "git"
                                | "gopher"
                                | "http"
                                | "https"
                                | "irc"
                                | "ircs"
                                | "magnet"
                                | "mailto"
                                | "matrix"
                                | "mms"
                                | "news"
                                | "nntp"
                                | "redis"
                                | "sftp"
                                | "sip"
                                | "sips"
                                | "sms"
                                | "ssh"
                                | "svn"
                                | "tel"
                                | "telnet"
                                | "urn"
                                | "worldwind"
                                | "xmpp";
                            /**
                             * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                             */
                            geuquery?: string;
                            /**
                             * The page namespaces to enumerate.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            geunamespace?: number | number[] | "*";
                            /**
                             * How many pages to return.
                             *
                             * Defaults to 10.
                             */
                            geulimit?: Limit;
                            /**
                             * Expand protocol-relative URLs with the canonical protocol.
                             *
                             * @deprecated
                             */
                            geuexpandurl?: boolean;
                        }

                        /**
                         * Find all pages that use the given files.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                         */
                        interface FileUsage extends Query {
                            generator?: "fileusage";
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            gfunamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            gfushow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            gfulimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gfucontinue?: string;
                        }

                        /**
                         * Returns pages having coordinates that are located in a certain area.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                         */
                        interface GeoSearch extends Query {
                            generator?: "geosearch";
                            /**
                             * Coordinate around which to search.
                             *
                             * Format: Latitude and longitude separated by pipe (`|`).
                             */
                            ggscoord?: string;
                            /**
                             * Title of page around which to search.
                             */
                            ggspage?: string;
                            /**
                             * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                             */
                            ggsbbox?: string;
                            /**
                             * Search radius in meters.
                             *
                             * Defaults to 500.
                             */
                            ggsradius?: number;
                            /**
                             * Restrict search to objects no larger than this, in meters.
                             */
                            ggsmaxdim?: number;
                            /**
                             * Set the sort order of returned results.
                             *
                             * - **distance**: Rank pages by their distance to the center.
                             * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                             *
                             * Defaults to `distance`.
                             */
                            ggssort?: "distance" | "relevance";
                            /**
                             * Maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            ggslimit?: Limit;
                            /**
                             * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                             *
                             * Defaults to `earth`.
                             */
                            ggsglobe?: "earth";
                            /**
                             * Namespaces to search.
                             *
                             * Defaults to 0.
                             */
                            ggsnamespace?: number | number[] | "*";
                            /**
                             * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                             *
                             * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                             * - **name**: Name of the object.
                             * - **dim**: Approximate size of the object in meters.
                             * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                             * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                             * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                             *
                             * Defaults to `globe`.
                             */
                            ggsprop?: OneOrMore<
                                "country" | "dim" | "globe" | "name" | "region" | "type"
                            >;
                            /**
                             * Which kind of coordinates to return.
                             *
                             * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                             * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                             * - **all**: Return both primary and secondary coordinates.
                             *
                             * Defaults to `primary`.
                             */
                            ggsprimary?: "all" | "primary" | "secondary";
                            /**
                             * Whether debug information should be returned.
                             */
                            ggsdebug?: boolean;
                        }

                        /**
                         * Get task recommendations suitable for newcomers.
                         *
                         * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                         *
                         * @private
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                         */
                        interface GrowthTasks extends Query {
                            generator?: "growthtasks";
                            /**
                             * Task types to limit results to. Leave empty to receive all suggestions.
                             *
                             * - **copyedit**: Copyedit
                             * - **expand**: Expand short articles
                             * - **links**: Add links between articles
                             * - **references**: Find references
                             * - **update**: Update articles
                             * - **link-recommendation**: Add links between articles
                             */
                            ggttasktypes?: OneOrMore<
                                | "copyedit"
                                | "expand"
                                | "image-recommendation"
                                | "link-recommendation"
                                | "links"
                                | "references"
                                | "section-image-recommendation"
                                | "update"
                            >;
                            /**
                             * Article topics to prefer in task suggestions.
                             *
                             * - **architecture**: Architecture
                             * - **art**: Art
                             * - **comics-and-anime**: Comics and anime
                             * - **entertainment**: Entertainment
                             * - **fashion**: Fashion
                             * - **literature**: Literature
                             * - **music**: Music
                             * - **performing-arts**: Performing arts
                             * - **sports**: Sports
                             * - **tv-and-film**: TV and film
                             * - **video-games**: Video games
                             * - **biography**: Biography (all)
                             * - **women**: Biography (women)
                             * - **business-and-economics**: Business and economics
                             * - **education**: Education
                             * - **food-and-drink**: Food and drink
                             * - **history**: History
                             * - **military-and-warfare**: Military and warfare
                             * - **philosophy-and-religion**: Philosophy and religion
                             * - **politics-and-government**: Politics and government
                             * - **society**: Society
                             * - **transportation**: Transportation
                             * - **biology**: Biology
                             * - **chemistry**: Chemistry
                             * - **computers-and-internet**: Computers and internet
                             * - **earth-and-environment**: Earth and environment
                             * - **engineering**: Engineering
                             * - **general-science**: General science
                             * - **mathematics**: Mathematics
                             * - **medicine-and-health**: Medicine and health
                             * - **physics**: Physics
                             * - **technology**: Technology
                             * - **africa**: Africa
                             * - **asia**: Asia
                             * - **central-america**: Central America
                             * - **europe**: Europe
                             * - **north-america**: North America
                             * - **oceania**: Oceania
                             * - **south-america**: South America
                             */
                            ggttopics?: OneOrMore<
                                | "africa"
                                | "architecture"
                                | "art"
                                | "asia"
                                | "biography"
                                | "biology"
                                | "business-and-economics"
                                | "central-america"
                                | "chemistry"
                                | "comics-and-anime"
                                | "computers-and-internet"
                                | "earth-and-environment"
                                | "education"
                                | "engineering"
                                | "entertainment"
                                | "europe"
                                | "fashion"
                                | "food-and-drink"
                                | "general-science"
                                | "history"
                                | "literature"
                                | "mathematics"
                                | "medicine-and-health"
                                | "military-and-warfare"
                                | "music"
                                | "north-america"
                                | "oceania"
                                | "performing-arts"
                                | "philosophy-and-religion"
                                | "physics"
                                | "politics-and-government"
                                | "society"
                                | "south-america"
                                | "sports"
                                | "technology"
                                | "transportation"
                                | "tv-and-film"
                                | "video-games"
                                | "women"
                            >;
                            /**
                             * Matching mode for topics.
                             */
                            ggttopicsmode?: "AND" | "OR";
                            /**
                             * Maximum number of task suggestions to return.
                             */
                            ggtlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            ggtoffset?: number;
                            /**
                             * Add debug data to the output.
                             */
                            ggtdebug?: boolean;
                            /**
                             * Page IDs to exclude from the query.
                             */
                            ggtexcludepageids?: number | number[];
                        }

                        /**
                         * Returns all files contained on the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                         */
                        interface Images extends Query {
                            generator?: "images";
                            /**
                             * How many files to return.
                             *
                             * Defaults to 10.
                             */
                            gimlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gimcontinue?: string;
                            /**
                             * Only list these files. Useful for checking whether a certain page has a certain file.
                             */
                            gimimages?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gimdir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that use the given image title.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                         */
                        interface ImageUsage extends Query {
                            generator?: "imageusage";
                            /**
                             * Title to search. Cannot be used together with iupageid.
                             */
                            giutitle?: string;
                            /**
                             * Page ID to search. Cannot be used together with iutitle.
                             */
                            giupageid?: number;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            giucontinue?: string;
                            /**
                             * The namespace to enumerate.
                             */
                            giunamespace?: number | number[] | "*";
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            giudir?: "ascending" | "descending";
                            /**
                             * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                             *
                             * Defaults to `all`.
                             */
                            giufilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                             *
                             * Defaults to 10.
                             */
                            giulimit?: Limit;
                            /**
                             * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                             */
                            giuredirect?: boolean;
                        }

                        /**
                         * Find all pages that link to the given interwiki link.
                         *
                         * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                         */
                        // tslint:disable-next-line:interface-name
                        interface IWBacklinks extends Query {
                            generator?: "iwbacklinks";
                            /**
                             * Prefix for the interwiki.
                             */
                            giwblprefix?: string;
                            /**
                             * Interwiki link to search for. Must be used with `iwblblprefix`.
                             */
                            giwbltitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            giwblcontinue?: string;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            giwbllimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **iwprefix**: Adds the prefix of the interwiki.
                             * - **iwtitle**: Adds the title of the interwiki.
                             *
                             * Defaults to an empty string.
                             */
                            giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            giwbldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that link to the given language link.
                         *
                         * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                         *
                         * Note that this may not consider language links added by extensions.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                         */
                        interface LangBacklinks extends Query {
                            generator?: "langbacklinks";
                            /**
                             * Language for the language link.
                             */
                            glbllang?: string;
                            /**
                             * Language link to search for. Must be used with lbllang.
                             */
                            glbltitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            glblcontinue?: string;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            glbllimit?: Limit;
                            /**
                             * Which properties to get:
                             *
                             * - **lllang**: Adds the language code of the language link.
                             * - **lltitle**: Adds the title of the language link.
                             *
                             * Defaults to an empty string.
                             */
                            glblprop?: OneOrMore<"lllang" | "lltitle">;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            glbldir?: "ascending" | "descending";
                        }

                        /**
                         * Returns all links from the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                         */
                        interface Links extends Query {
                            generator?: "links";
                            /**
                             * Show links in these namespaces only.
                             */
                            gplnamespace?: number | number[] | "*";
                            /**
                             * How many links to return.
                             *
                             * Defaults to 10.
                             */
                            gpllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gplcontinue?: string;
                            /**
                             * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                             */
                            gpltitles?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gpldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that link to the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                         */
                        interface LinksHere extends Query {
                            generator?: "linkshere";
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            glhnamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            glhshow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            glhlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            glhcontinue?: string;
                        }

                        /**
                         * Query MessageCollection about translations.
                         */
                        interface MessageCollection extends Query {
                            generator?: "messagecollection";
                            /**
                             * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                             */
                            gmcgroup: string;
                            /**
                             * Language code.
                             *
                             * Defaults to `en`.
                             */
                            gmclanguage?: string;
                            /**
                             * How many messages to show (after filtering).
                             *
                             * Defaults to 500.
                             */
                            gmclimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to an empty string.
                             */
                            gmcoffset?: string;
                            /**
                             * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                             *
                             * - **fuzzy**: Messages with fuzzy tag.
                             * - **optional**: Messages which should be translated only if changes are necessary.
                             * - **ignored**: Messages which are never translated.
                             * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                             * - **translated**: Messages which have a translation which is not fuzzy.
                             * - **changed**: Messages which have been translated or changed since last export.
                             * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                             * - **last-translator:N**: Messages where the user number `N` is the last translator.
                             *
                             * Defaults to `!optional` and `!ignored`.
                             */
                            gmcfilter?: string | string[];
                            /**
                             * Which properties to get:
                             *
                             * - **definition**: Message definition.
                             * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                             * - **tags**: Message tags, like optional, ignored and fuzzy.
                             * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                             * - **revision**: Deprecated. Use mcprop=properties.
                             *
                             * Defaults to `definition` and `translation`.
                             */
                            gmcprop?: OneOrMore<
                                "definition" | "properties" | "revision" | "tags" | "translation"
                            >;
                        }

                        /**
                         * Lists the most viewed pages (based on last day's pageview count).
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                         */
                        interface MostViewed extends Query {
                            generator?: "mostviewed";
                            /**
                             * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                             *
                             * - **pageviews**: Plain pageviews.
                             *
                             * Defaults to `pageviews`.
                             */
                            gpvimmetric?: "pageviews";
                            /**
                             * The number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            gpvimlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            gpvimoffset?: number;
                        }

                        /**
                         * Enumerates pages that have changes pending review.
                         */
                        interface Oldreviewedpages extends Query {
                            generator?: "oldreviewedpages";
                            /**
                             * Start listing at this timestamp.
                             */
                            gorstart?: string;
                            /**
                             * Stop listing at this timestamp.
                             */
                            gorend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * Defaults to `newer`.
                             */
                            gordir?: "newer" | "older";
                            /**
                             * Maximum character count change size.
                             */
                            gormaxsize?: number;
                            /**
                             * How to filter for pages on your watchlist.
                             *
                             * Defaults to `all`.
                             */
                            gorfilterwatched?: "all" | "watched";
                            /**
                             * The namespaces to enumerate.
                             *
                             * Defaults to 0.
                             */
                            gornamespace?: number | number[] | "*";
                            /**
                             * Show pages only in the given category.
                             */
                            gorcategory?: string;
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            gorfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gorlimit?: Limit;
                        }

                        /**
                         * List all pages using a given page property.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                         */
                        interface PagesWithProp extends Query {
                            generator?: "pageswithprop";
                            /**
                             * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                             */
                            gpwppropname: string;
                            /**
                             * Which pieces of information to include:
                             *
                             * - **ids**: Adds the page ID.
                             * - **title**: Adds the title and namespace ID of the page.
                             * - **value**: Adds the value of the page property.
                             *
                             * Defaults to `ids` and `title`.
                             */
                            gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gpwpcontinue?: string;
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            gpwplimit?: Limit;
                            /**
                             * In which direction to sort.
                             *
                             * Defaults to `ascending`.
                             */
                            gpwpdir?: "ascending" | "descending";
                        }

                        /**
                         * Perform a prefix search for page titles.
                         *
                         * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                         */
                        interface PrefixSearch extends Query {
                            generator?: "prefixsearch";
                            /**
                             * Search string.
                             */
                            gpssearch: string;
                            /**
                             * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                             *
                             * Defaults to 0.
                             */
                            gpsnamespace?: number | number[] | "*";
                            /**
                             * Maximum number of results to return.
                             *
                             * Defaults to 10.
                             */
                            gpslimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            gpsoffset?: number;
                            /**
                             * Search profile to use.
                             *
                             * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                             * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                             * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                             * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                             * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                             * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                             * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                             * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                             *
                             * Defaults to `engine_autoselect`.
                             */
                            gpsprofile?:
                                | "classic"
                                | "engine_autoselect"
                                | "fast-fuzzy"
                                | "fuzzy"
                                | "fuzzy-subphrases"
                                | "normal"
                                | "normal-subphrases"
                                | "strict";
                        }

                        /**
                         * List all pages associated with one or more projects.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                         */
                        interface ProjectPages extends Query {
                            generator?: "projectpages";
                            /**
                             * Also return assessments for the pages returned.
                             */
                            gwppassessments?: boolean;
                            /**
                             * The projects to list pages for. If this parameter is omitted, all projects will be included.
                             */
                            gwppprojects: string | string[];
                            /**
                             * The maximum number of pages to return.
                             *
                             * Defaults to 10.
                             */
                            gwpplimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwppcontinue?: string;
                        }

                        /**
                         * List the pages in a given index
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                         */
                        interface ProofreadPagesInIndex extends Query {
                            generator?: "proofreadpagesinindex";
                            /**
                             * Which properties to get for each page
                             *
                             * - **ids**: Return the page ID of each page linked to the index page
                             * - **title**: Return the page title of each page linked to the index page
                             * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                             * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                             *
                             * Defaults to `ids` and `title`.
                             */
                            gprppiiprop?: OneOrMore<
                                "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                            >;
                            /**
                             * The title of the Index page to get pages for
                             */
                            gprppiititle?: string;
                            /**
                             * The page ID of the Index page to get pages for
                             */
                            gprppiipageid?: number;
                        }

                        /**
                         * List all titles protected from creation.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                         */
                        interface ProtectedTitles extends Query {
                            generator?: "protectedtitles";
                            /**
                             * Only list titles in these namespaces.
                             */
                            gptnamespace?: number | number[] | "*";
                            /**
                             * Only list titles with these protection levels.
                             */
                            gptlevel?: string | string[];
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gptlimit?: Limit;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                             * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                             *
                             * Defaults to `older`.
                             */
                            gptdir?: "newer" | "older";
                            /**
                             * Start listing at this protection timestamp.
                             */
                            gptstart?: string;
                            /**
                             * Stop listing at this protection timestamp.
                             */
                            gptend?: string;
                            /**
                             * Which properties to get:
                             *
                             * - **timestamp**: Adds the timestamp of when protection was added.
                             * - **user**: Adds the user that added the protection.
                             * - **userid**: Adds the user ID that added the protection.
                             * - **comment**: Adds the comment for the protection.
                             * - **parsedcomment**: Adds the parsed comment for the protection.
                             * - **expiry**: Adds the timestamp of when the protection will be lifted.
                             * - **level**: Adds the protection level.
                             *
                             * Defaults to `timestamp` and `level`.
                             */
                            gptprop?: OneOrMore<
                                | "comment"
                                | "expiry"
                                | "level"
                                | "parsedcomment"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gptcontinue?: string;
                        }

                        /**
                         * Get a list provided by a QueryPage-based special page.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                         */
                        interface QueryPage extends Query {
                            generator?: "querypage";
                            /**
                             * The name of the special page. Note, this is case-sensitive.
                             */
                            gqppage: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            gqpoffset?: number;
                            /**
                             * Number of results to return.
                             *
                             * Defaults to 10.
                             */
                            gqplimit?: Limit;
                        }

                        /**
                         * Get a set of random pages.
                         *
                         * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                         */
                        interface Random extends Query {
                            generator?: "random";
                            /**
                             * Return pages in these namespaces only.
                             */
                            grnnamespace?: number | number[] | "*";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `nonredirects`.
                             */
                            grnfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * Use `rnfilterredir=redirects` instead.
                             *
                             * @deprecated
                             */
                            grnredirect?: boolean;
                            /**
                             * Limit how many random pages will be returned.
                             *
                             * Defaults to 1.
                             */
                            grnlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            grncontinue?: string;
                        }

                        /**
                         * List the pages of a certain list.
                         *
                         * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                         *
                         * @private
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                         */
                        interface ReadingListEntries extends Query {
                            generator?: "readinglistentries";
                            /**
                             * The list IDs for which to return pages.
                             */
                            grlelists?: number | number[];
                            /**
                             * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                             */
                            grlechangedsince?: string;
                            /**
                             * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                             *
                             * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                             * - **updated**: Last update timestamp.
                             */
                            grlesort?: "name" | "updated";
                            /**
                             * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                             *
                             * Defaults to `ascending`.
                             */
                            grledir?: "ascending" | "descending";
                            /**
                             * Number of result items to return.
                             *
                             * Defaults to 10.
                             */
                            grlelimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            grlecontinue?: string;
                        }

                        /**
                         * Enumerate recent changes.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                         */
                        interface RecentChanges extends Query {
                            generator?: "recentchanges";
                            /**
                             * The timestamp to start enumerating from.
                             */
                            grcstart?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            grcend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                             * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                             *
                             * Defaults to `older`.
                             */
                            grcdir?: "newer" | "older";
                            /**
                             * Filter changes to only these namespaces.
                             */
                            grcnamespace?: number | number[] | "*";
                            /**
                             * Only list changes by this user.
                             */
                            grcuser?: string;
                            /**
                             * Don't list changes by this user.
                             */
                            grcexcludeuser?: string;
                            /**
                             * Only list changes tagged with this tag.
                             */
                            grctag?: string;
                            /**
                             * Include additional pieces of information:
                             *
                             * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **flags**: Adds flags for the edit.
                             * - **timestamp**: Adds timestamp of the edit.
                             * - **title**: Adds the page title of the edit.
                             * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                             * - **sizes**: Adds the new and old page length in bytes.
                             * - **redirect**: Tags edit if page is a redirect.
                             * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                             * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                             * - **tags**: Lists tags for the entry.
                             * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             *
                             * Defaults to `title`, `timestamp`, and `ids`.
                             */
                            grcprop?: OneOrMore<
                                | "comment"
                                | "flags"
                                | "ids"
                                | "loginfo"
                                | "oresscores"
                                | "parsedcomment"
                                | "patrolled"
                                | "redirect"
                                | "sha1"
                                | "sizes"
                                | "tags"
                                | "timestamp"
                                | "title"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                             *
                             * @deprecated
                             */
                            grctoken?: string;
                            /**
                             * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                             */
                            grcshow?: OneOrMore<
                                | Toggle<
                                      | "anon"
                                      | "autopatrolled"
                                      | "bot"
                                      | "minor"
                                      | "oresreview"
                                      | "patrolled"
                                      | "redirect"
                                  >
                                | "unpatrolled"
                            >;
                            /**
                             * How many total changes to return.
                             *
                             * Defaults to 10.
                             */
                            grclimit?: Limit;
                            /**
                             * Which types of changes to show.
                             *
                             * Defaults to `edit`, `new`, `log`, and `categorize`.
                             */
                            grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                            /**
                             * Only list changes which are the latest revision.
                             */
                            grctoponly?: boolean;
                            /**
                             * Filter entries to those related to a page.
                             */
                            grctitle?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            grccontinue?: string;
                            /**
                             * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                             */
                            grcgeneraterevisions?: boolean;
                            /**
                             * Only list changes that touch the named slot.
                             */
                            grcslot?: "main" | "mediainfo";
                        }

                        /**
                         * Returns all redirects to the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                         */
                        interface Redirects extends Query {
                            generator?: "redirects";
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each redirect.
                             * - **title**: Title of each redirect.
                             * - **fragment**: Fragment of each redirect, if any.
                             *
                             * Defaults to `pageid` and `title`.
                             */
                            grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             *
                             * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                             */
                            grdnamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **fragment**: Only show redirects with a fragment.
                             * - **!fragment**: Only show redirects without a fragment.
                             */
                            grdshow?: OneOrMore<Toggle<"fragment">>;
                            /**
                             * How many redirects to return.
                             *
                             * Defaults to 10.
                             */
                            grdlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            grdcontinue?: string;
                        }

                        /**
                         * Get revision information.
                         *
                         * May be used in several ways:
                         *
                         * - Get data about a set of pages (last revision), by setting titles or pageids.
                         * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                         * - Get data about a set of revisions by setting their IDs with revids.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                         */
                        interface Revisions extends Query {
                            generator?: "revisions";
                            /**
                             * Which properties to get for each revision:
                             *
                             * - **ids**: The ID of the revision.
                             * - **flags**: Revision flags (minor).
                             * - **timestamp**: The timestamp of the revision.
                             * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **size**: Length (bytes) of the revision.
                             * - **slotsize**: Length (bytes) of each revision slot.
                             * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                             * - **contentmodel**: Content model ID of each revision slot.
                             * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             * - **tags**: Tags for the revision.
                             * - **roles**: List content slot roles that exist in the revision.
                             * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                             */
                            grvprop?: OneOrMore<
                                | "comment"
                                | "content"
                                | "contentmodel"
                                | "flagged"
                                | "flags"
                                | "ids"
                                | "oresscores"
                                | "parsedcomment"
                                | "parsetree"
                                | "roles"
                                | "sha1"
                                | "size"
                                | "slotsha1"
                                | "slotsize"
                                | "tags"
                                | "timestamp"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                             */
                            grvslots?: string | string[];
                            /**
                             * Content serialization format used for output of content.
                             */
                            [k: `grvcontentformat-${string}`]:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                             */
                            grvlimit?: Limit;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                             *
                             * @deprecated
                             */
                            grvexpandtemplates?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                             *
                             * @deprecated
                             */
                            grvgeneratexml?: boolean;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                             *
                             * @deprecated
                             */
                            grvparse?: boolean;
                            /**
                             * Only retrieve the content of the section with this identifier.
                             */
                            grvsection?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            grvdiffto?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                             *
                             * @deprecated
                             */
                            grvdifftotext?: string;
                            /**
                             * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                             *
                             * @deprecated
                             */
                            grvdifftotextpst?: boolean;
                            /**
                             * Serialization format used for `rvdifftotext` and expected for output of content.
                             *
                             * @deprecated
                             */
                            grvcontentformat?:
                                | "application/json"
                                | "application/octet-stream"
                                | "application/unknown"
                                | "application/vnd.php.serialized"
                                | "application/x-binary"
                                | "text/css"
                                | "text/javascript"
                                | "text/plain"
                                | "text/unknown"
                                | "text/x-wiki"
                                | "unknown/unknown";
                            /**
                             * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                             */
                            grvstartid?: number;
                            /**
                             * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                             */
                            grvendid?: number;
                            /**
                             * From which revision timestamp to start enumeration.
                             */
                            grvstart?: string;
                            /**
                             * Enumerate up to this timestamp.
                             */
                            grvend?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                             * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                             *
                             * Defaults to `older`.
                             */
                            grvdir?: "newer" | "older";
                            /**
                             * Only include revisions made by user.
                             */
                            grvuser?: string;
                            /**
                             * Exclude revisions made by user.
                             */
                            grvexcludeuser?: string;
                            /**
                             * Only list revisions tagged with this tag.
                             */
                            grvtag?: string;
                            /**
                             * Which tokens to obtain for each revision.
                             *
                             * @deprecated
                             */
                            grvtoken?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            grvcontinue?: string;
                        }

                        /**
                         * Perform a full text search.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                         */
                        interface Search extends Query {
                            generator?: "search";
                            /**
                             * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                             */
                            gsrsearch: string;
                            /**
                             * Search only within these namespaces.
                             *
                             * Defaults to 0.
                             */
                            gsrnamespace?: number | number[] | "*";
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gsrlimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             *
                             * Defaults to 0.
                             */
                            gsroffset?: number;
                            /**
                             * Query independent profile to use (affects ranking algorithm).
                             *
                             * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                             * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                             * - **empty**: Ranking based solely on query dependent features (for debug only).
                             * - **wsum_inclinks**: Weighted sum based on incoming links
                             * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                             * - **popular_inclinks_pv**: Ranking based primarily on page views
                             * - **popular_inclinks**: Ranking based primarily on incoming link counts
                             * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                             *
                             * Defaults to `engine_autoselect`.
                             */
                            gsrqiprofile?: string;
                            /**
                             * Which type of search to perform.
                             */
                            gsrwhat?: "nearmatch" | "text" | "title";
                            /**
                             * Which metadata to return.
                             *
                             * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                             */
                            gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                            /**
                             * Which properties to return:
                             *
                             * - **size**: Adds the size of the page in bytes.
                             * - **wordcount**: Adds the word count of the page.
                             * - **timestamp**: Adds the timestamp of when the page was last edited.
                             * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                             * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                             * - **redirecttitle**: Adds the title of the matching redirect.
                             * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                             * - **sectiontitle**: Adds the title of the matching section.
                             * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                             * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                             * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                             * - **score**: Deprecated. Ignored.
                             * - **hasrelated**: Deprecated. Ignored.
                             * - **extensiondata**: Adds extra data generated by extensions.
                             *
                             * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                             */
                            gsrprop?: OneOrMore<
                                | "categorysnippet"
                                | "extensiondata"
                                | "hasrelated"
                                | "isfilematch"
                                | "redirectsnippet"
                                | "redirecttitle"
                                | "score"
                                | "sectionsnippet"
                                | "sectiontitle"
                                | "size"
                                | "snippet"
                                | "timestamp"
                                | "titlesnippet"
                                | "wordcount"
                            >;
                            /**
                             * Include interwiki results in the search, if available.
                             */
                            gsrinterwiki?: boolean;
                            /**
                             * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                             */
                            gsrenablerewrites?: boolean;
                            /**
                             * Set the sort order of returned results.
                             *
                             * Defaults to `relevance`.
                             */
                            gsrsort?:
                                | "create_timestamp_asc"
                                | "create_timestamp_desc"
                                | "incoming_links_asc"
                                | "incoming_links_desc"
                                | "just_match"
                                | "last_edit_asc"
                                | "last_edit_desc"
                                | "none"
                                | "random"
                                | "relevance"
                                | "user_random";
                        }

                        /**
                         * Returns all pages transcluded on the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                         */
                        interface Templates extends Query {
                            generator?: "templates";
                            /**
                             * Show templates in these namespaces only.
                             */
                            gtlnamespace?: number | number[] | "*";
                            /**
                             * How many templates to return.
                             *
                             * Defaults to 10.
                             */
                            gtllimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gtlcontinue?: string;
                            /**
                             * Only list these templates. Useful for checking whether a certain page uses a certain template.
                             */
                            gtltemplates?: string | string[];
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gtldir?: "ascending" | "descending";
                        }

                        /**
                         * Find all pages that transclude the given pages.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                         */
                        interface Transcludedin extends Query {
                            generator?: "transcludedin";
                            /**
                             * Which properties to get:
                             *
                             * - **pageid**: Page ID of each page.
                             * - **title**: Title of each page.
                             * - **redirect**: Flag if the page is a redirect.
                             *
                             * Defaults to `pageid`, `title`, and `redirect`.
                             */
                            gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                            /**
                             * Only include pages in these namespaces.
                             */
                            gtinamespace?: number | number[] | "*";
                            /**
                             * Show only items that meet these criteria:
                             *
                             * - **redirect**: Only show redirects.
                             * - **!redirect**: Only show non-redirects.
                             */
                            gtishow?: OneOrMore<Toggle<"redirect">>;
                            /**
                             * How many to return.
                             *
                             * Defaults to 10.
                             */
                            gtilimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gticontinue?: string;
                        }

                        /**
                         * Enumerates pages that have not been reviewed to a given quality level.
                         */
                        interface Unreviewedpages extends Query {
                            generator?: "unreviewedpages";
                            /**
                             * Start listing at this page title.
                             */
                            gurstart?: string;
                            /**
                             * Stop listing at this page title.
                             */
                            gurend?: string;
                            /**
                             * Direction to sort in.
                             *
                             * Defaults to `ascending`.
                             */
                            gurdir?: "ascending" | "descending";
                            /**
                             * The namespaces to enumerate.
                             *
                             * Defaults to 0.
                             */
                            gurnamespace?: number | number[] | "*";
                            /**
                             * How to filter for redirects.
                             *
                             * Defaults to `all`.
                             */
                            gurfilterredir?: "all" | "nonredirects" | "redirects";
                            /**
                             * How to filter by quality (0=checked, 1=quality).
                             *
                             * Defaults to 0.
                             */
                            gurfilterlevel?: number;
                            /**
                             * How many total pages to return.
                             *
                             * Defaults to 10.
                             */
                            gurlimit?: Limit;
                        }

                        /**
                         * Get recent changes to pages in the current user's watchlist.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                         */
                        interface Watchlist extends Query {
                            generator?: "watchlist";
                            /**
                             * Include multiple revisions of the same page within given timeframe.
                             */
                            gwlallrev?: boolean;
                            /**
                             * The timestamp to start enumerating from.
                             */
                            gwlstart?: string;
                            /**
                             * The timestamp to end enumerating.
                             */
                            gwlend?: string;
                            /**
                             * Filter changes to only the given namespaces.
                             */
                            gwlnamespace?: number | number[] | "*";
                            /**
                             * Only list changes by this user.
                             */
                            gwluser?: string;
                            /**
                             * Don't list changes by this user.
                             */
                            gwlexcludeuser?: string;
                            /**
                             * In which direction to enumerate:
                             *
                             * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                             * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                             *
                             * Defaults to `older`.
                             */
                            gwldir?: "newer" | "older";
                            /**
                             * How many total results to return per request.
                             *
                             * Defaults to 10.
                             */
                            gwllimit?: Limit;
                            /**
                             * Which additional properties to get:
                             *
                             * - **ids**: Adds revision IDs and page IDs.
                             * - **title**: Adds title of the page.
                             * - **flags**: Adds flags for the edit.
                             * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                             * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                             * - **timestamp**: Adds timestamp of the edit.
                             * - **patrol**: Tags edits that are patrolled.
                             * - **sizes**: Adds the old and new lengths of the page.
                             * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                             * - **loginfo**: Adds log information where appropriate.
                             * - **tags**: Lists tags for the entry.
                             * - **expiry**: Adds the expiry time.
                             *
                             * Defaults to `ids`, `title`, and `flags`.
                             */
                            gwlprop?: OneOrMore<
                                | "comment"
                                | "expiry"
                                | "flags"
                                | "ids"
                                | "loginfo"
                                | "notificationtimestamp"
                                | "oresscores"
                                | "parsedcomment"
                                | "patrol"
                                | "sizes"
                                | "tags"
                                | "timestamp"
                                | "title"
                                | "user"
                                | "userid"
                            >;
                            /**
                             * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                             */
                            gwlshow?: OneOrMore<
                                Toggle<
                                    | "anon"
                                    | "autopatrolled"
                                    | "bot"
                                    | "minor"
                                    | "oresreview"
                                    | "patrolled"
                                    | "unread"
                                >
                            >;
                            /**
                             * Which types of changes to show:
                             *
                             * - **edit**: Regular page edits.
                             * - **new**: Page creations.
                             * - **log**: Log entries.
                             * - **external**: External changes.
                             * - **categorize**: Category membership changes.
                             *
                             * Defaults to `edit`, `new`, `log`, and `categorize`.
                             */
                            gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                            /**
                             * Used along with wltoken to access a different user's watchlist.
                             */
                            gwlowner?: string;
                            /**
                             * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                             *
                             * Sensitive parameter.
                             */
                            gwltoken?: string;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwlcontinue?: string;
                        }

                        /**
                         * Get all pages on the current user's watchlist.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                         */
                        interface WatchlistRaw extends Query {
                            generator?: "watchlistraw";
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwrcontinue?: string;
                            /**
                             * Only list pages in the given namespaces.
                             */
                            gwrnamespace?: number | number[] | "*";
                            /**
                             * How many total results to return per request.
                             *
                             * Defaults to 10.
                             */
                            gwrlimit?: Limit;
                            /**
                             * Which additional properties to get:
                             *
                             * - **changed**: Adds timestamp of when the user was last notified about the edit.
                             */
                            gwrprop?: OneOrMore<"changed">;
                            /**
                             * Only list items that meet these criteria.
                             */
                            gwrshow?: OneOrMore<Toggle<"changed">>;
                            /**
                             * Used along with wrtoken to access a different user's watchlist.
                             */
                            gwrowner?: string;
                            /**
                             * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                             *
                             * Sensitive parameter.
                             */
                            gwrtoken?: string;
                            /**
                             * The direction in which to list.
                             *
                             * Defaults to `ascending`.
                             */
                            gwrdir?: "ascending" | "descending";
                            /**
                             * Title (with namespace prefix) to begin enumerating from.
                             */
                            gwrfromtitle?: string;
                            /**
                             * Title (with namespace prefix) to stop enumerating at.
                             */
                            gwrtotitle?: string;
                        }

                        /**
                         * Returns all pages that use the given entity IDs.
                         *
                         * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                         */
                        interface WBListEntityUsage extends Query {
                            generator?: "wblistentityusage";
                            /**
                             * Properties to add to the result.
                             *
                             * - **url**: If enabled the url of the entity will be added to the result.
                             */
                            gwbleuprop?: OneOrMore<"url">;
                            /**
                             * Only return entity IDs that used this aspect.
                             *
                             * - **S**: The entity's sitelinks are used
                             * - **L**: The entity's label is used
                             * - **D**: The entity's description is used
                             * - **T**: The title of the local page corresponding to the entity is used
                             * - **C**: Statements from the entity are used
                             * - **X**: All aspects of an entity are or may be used
                             * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                             */
                            gwbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                            /**
                             * Entities that have been used.
                             */
                            gwbleuentities: string | string[];
                            /**
                             * How many entity usages to return.
                             *
                             * Defaults to 10.
                             */
                            gwbleulimit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwbleucontinue?: string;
                        }

                        /**
                         * Searches for entities using labels and aliases.
                         *
                         * This can be used as a generator for other queries.
                         * Returns the matched term that should be displayed.
                         *
                         * @private
                         */
                        interface WBSearch extends Query {
                            generator?: "wbsearch";
                            /**
                             * Search for this text.
                             */
                            gwbssearch: string;
                            /**
                             * Search in this language.
                             */
                            gwbslanguage?: string;
                            /**
                             * Whether to disable language fallback
                             */
                            gwbsstrictlanguage?: boolean;
                            /**
                             * Search for this type of entity.
                             *
                             * Defaults to `item`.
                             */
                            gwbstype?: string;
                            /**
                             * Maximal number of results
                             *
                             * Defaults to 7.
                             */
                            gwbslimit?: Limit;
                            /**
                             * The search profile to use.
                             *
                             * - **default**: The default profile, suitable for most purposes.
                             * - **language**: A profile to search for items about natural languages.
                             *
                             * Defaults to `default`.
                             */
                            gwbsprofile?: "default" | "language";
                        }

                        /**
                         * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                         */
                        interface WikiLambdaFnSearch extends Query {
                            generator?: "wikilambdafn_search";
                            /**
                             * The ZFunction ID to search for
                             *
                             * Defaults to an empty string.
                             */
                            gwikilambdafn_zfunction_id?: string;
                            /**
                             * The type of ZObject referenced by the ZFunction to search for
                             *
                             * Defaults to an empty string.
                             */
                            gwikilambdafn_type?: string;
                            /**
                             * The maximum number of results to return
                             *
                             * Defaults to 10.
                             */
                            gwikilambdafn_limit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwikilambdafn_continue?: string;
                        }

                        /**
                         * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                         */
                        interface WikiLambdaLoadZObjects extends Query {
                            generator?: "wikilambdaload_zobjects";
                            /**
                             * The ZObject ZIDs to fetch.
                             */
                            gwikilambdaload_zids: string | string[];
                            /**
                             * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                             */
                            gwikilambdaload_revisions?: string | string[];
                            /**
                             * The MediaWiki language code in which to return all the ZObject labels.
                             */
                            gwikilambdaload_language?: string;
                            /**
                             * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                             */
                            gwikilambdaload_get_dependencies?: boolean;
                        }

                        /**
                         * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                         */
                        interface WikiLambdaSearchLabels extends Query {
                            generator?: "wikilambdasearch_labels";
                            /**
                             * The search term
                             *
                             * Defaults to an empty string.
                             */
                            gwikilambdasearch_search?: string;
                            /**
                             * The MediaWiki language code in which to search
                             */
                            gwikilambdasearch_language: string;
                            /**
                             * Whether to search only in the given language and not its fallback languages
                             */
                            gwikilambdasearch_nofallback?: boolean;
                            /**
                             * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                             */
                            gwikilambdasearch_exact?: boolean;
                            /**
                             * Restrict matches to a specific type of ZObject.
                             */
                            gwikilambdasearch_type?: string;
                            /**
                             * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                             */
                            gwikilambdasearch_return_type?: string;
                            /**
                             * Restrict return type to be strictly the given one, excluding generic ZObject.
                             */
                            gwikilambdasearch_strict_return_type?: boolean;
                            /**
                             * The maximum number of results to return
                             *
                             * Defaults to 10.
                             */
                            gwikilambdasearch_limit?: Limit;
                            /**
                             * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                             */
                            gwikilambdasearch_continue?: string;
                        }
                    }
                }

                namespace ReadingLists.Command {
                    /**
                     * Create a new list for the current user.
                     *
                     * The user must have fewer than 100 (non-deleted) lists.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface Create extends ReadingLists {
                        command: "create";
                        /**
                         * List name. Required unless using batch creation.
                         */
                        name?: string;
                        /**
                         * List description.
                         */
                        description?: string;
                        /**
                         * Batch data for creating multiple lists in a single request, in the form of a JSON array with one or more objects with `name` and (optionally) `description` fields.
                         */
                        batch?: string;
                    }

                    /**
                     * Add a new page to a list belonging to the current user.
                     *
                     * List entries must be unique. Pages are not limited to the wiki where the API is accessed. The user must have fewer than 5000 (non-deleted) entries in the list.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface CreateEntry extends ReadingLists {
                        command: "createentry";
                        /**
                         * List ID.
                         */
                        list: number;
                        /**
                         * Project name of the wiki hosting the page. (Typically this is the domain name of the wiki.) Required unless doing batch creation.
                         */
                        project?: string;
                        /**
                         * Page title (including the localized namespace name). Required unless doing batch creation. Human-readable format (spaces not underscores) is recommended. The API treats titles as raw strings; normalization (such as title casing) is left to the clients.
                         */
                        title?: string;
                        /**
                         * Batch data for creating multiple list entries (in the same list) in a single request, in the form of a JSON array with one or more objects with `project` and `title` fields.
                         */
                        batch?: string;
                    }

                    /**
                     * Delete a list belonging to the current user.
                     *
                     * Deleted lists remain available for some amount of time through the {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglists `readinglists`} and {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Breadinglistentries `readinglistentries`} modules (via the `changedsince` parameter). There is no way to undelete.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface Delete extends ReadingLists {
                        command: "delete";
                        /**
                         * List ID. Required unless doing batch deletion.
                         */
                        list?: number;
                        /**
                         * Batch data for deleting multiple lists in a single request, in the form of a JSON array with one or more objects with a `list` field.
                         */
                        batch?: string;
                    }

                    /**
                     * Delete a page from a list belonging to the current user.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface DeleteEntry extends ReadingLists {
                        command: "deleteentry";
                        /**
                         * Entry ID. Required unless doing batch deletion.
                         */
                        entry?: number;
                        /**
                         * Batch data for deleting multiple list entries in a single request, in the form of a JSON array with one or more objects with an `entry` field.
                         */
                        batch?: string;
                    }

                    /**
                     * Enable lists for the current user.
                     *
                     * This command must be used before the user can do anything else with reading lists. Also creates a default list. To undo it, use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bteardown `teardown`}.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface Setup extends ReadingLists {
                        command: "setup";
                    }

                    /**
                     * Disable lists for the current user.
                     *
                     * Removes all reading list data for the user. The {@link https://www.mediawiki.org/wiki/Special:ApiHelp/readinglists%2Bsetup `setup`} command must be used if the user wishes to begin using reading lists again.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface Teardown extends ReadingLists {
                        command: "teardown";
                    }

                    /**
                     * Update a list belonging to the current user.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface Update extends ReadingLists {
                        command: "update";
                        /**
                         * List ID. Required unless using batch update.
                         */
                        list?: number;
                        /**
                         * New list name. Either this or description is required unless doing batch update.
                         */
                        name?: string;
                        /**
                         * New list description.
                         */
                        description?: string;
                        /**
                         * Batch data for updating multiple lists in a single request, in the form of a JSON array with one or more objects with `list`, `name` and `description` fields. Name and description are optional but at least one of them must be present.
                         */
                        batch?: string;
                    }
                }

                namespace SetNotificationTimestamp.Generator {
                    /**
                     * Enumerate all categories.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                     */
                    interface AllCategories extends SetNotificationTimestamp {
                        generator?: "allcategories";
                        /**
                         * The category to start enumerating from.
                         */
                        gacfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaccontinue?: string;
                        /**
                         * The category to stop enumerating at.
                         */
                        gacto?: string;
                        /**
                         * Search for all category titles that begin with this value.
                         */
                        gacprefix?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gacdir?: "ascending" | "descending";
                        /**
                         * Only return categories with at least this many members.
                         */
                        gacmin?: number;
                        /**
                         * Only return categories with at most this many members.
                         */
                        gacmax?: number;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gaclimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **size**: Adds number of pages in the category.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         *
                         * Defaults to an empty string.
                         */
                        gacprop?: OneOrMore<"hidden" | "size">;
                    }

                    /**
                     * List all deleted revisions by a user or in a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                     */
                    interface AllDeletedRevisions extends SetNotificationTimestamp {
                        generator?: "alldeletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gadrprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gadrslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gadrcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                         */
                        gadrlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gadrparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gadrsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                         *
                         * @deprecated
                         */
                        gadrdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `adrdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gadrcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadruser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadrnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gadrstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        gadrend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                         * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                         *
                         * Defaults to `older`.
                         */
                        gadrdir?: "newer" | "older";
                        /**
                         * Start listing at this title.
                         */
                        gadrfrom?: string;
                        /**
                         * Stop listing at this title.
                         */
                        gadrto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gadrprefix?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gadrexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gadrtag?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gadrcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        gadrgeneratetitles?: boolean;
                    }

                    /**
                     * List all file usages, including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                     */
                    interface AllFileUsages extends SetNotificationTimestamp {
                        generator?: "allfileusages";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gafcontinue?: string;
                        /**
                         * The title of the file to start enumerating from.
                         */
                        gaffrom?: string;
                        /**
                         * The title of the file to stop enumerating at.
                         */
                        gafto?: string;
                        /**
                         * Search for all file titles that begin with this value.
                         */
                        gafprefix?: string;
                        /**
                         * Only show distinct file titles. Cannot be used with afprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gafunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                         * - **title**: Adds the title of the file.
                         *
                         * Defaults to `title`.
                         */
                        gafprop?: OneOrMore<"ids" | "title">;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gaflimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gafdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all images sequentially.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                     */
                    interface AllImages extends SetNotificationTimestamp {
                        generator?: "allimages";
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `name`.
                         */
                        gaisort?: "name" | "timestamp";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gaidir?: "ascending" | "descending" | "newer" | "older";
                        /**
                         * The image title to start enumerating from. Can only be used with aisort=name.
                         */
                        gaifrom?: string;
                        /**
                         * The image title to stop enumerating at. Can only be used with aisort=name.
                         */
                        gaito?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaicontinue?: string;
                        /**
                         * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                         */
                        gaistart?: string;
                        /**
                         * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                         */
                        gaiend?: string;
                        /**
                         * Which file information to get:
                         *
                         * - **timestamp**: Adds timestamp for the uploaded version.
                         * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                         * - **dimensions**: Alias for size.
                         * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                         *
                         * Defaults to `timestamp` and `url`.
                         */
                        gaiprop?: OneOrMore<
                            | "badfile"
                            | "bitdepth"
                            | "canonicaltitle"
                            | "comment"
                            | "commonmetadata"
                            | "dimensions"
                            | "extmetadata"
                            | "mediatype"
                            | "metadata"
                            | "mime"
                            | "parsedcomment"
                            | "sha1"
                            | "size"
                            | "timestamp"
                            | "url"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Search for all image titles that begin with this value. Can only be used with aisort=name.
                         */
                        gaiprefix?: string;
                        /**
                         * Limit to images with at least this many bytes.
                         */
                        gaiminsize?: number;
                        /**
                         * Limit to images with at most this many bytes.
                         */
                        gaimaxsize?: number;
                        /**
                         * SHA1 hash of image. Overrides aisha1base36.
                         */
                        gaisha1?: string;
                        /**
                         * SHA1 hash of image in base 36 (used in MediaWiki).
                         */
                        gaisha1base36?: string;
                        /**
                         * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                         */
                        gaiuser?: string;
                        /**
                         * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                         *
                         * Defaults to `all`.
                         */
                        gaifilterbots?: "all" | "bots" | "nobots";
                        /**
                         * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                         */
                        gaimime?: string | string[];
                        /**
                         * How many images in total to return.
                         *
                         * Defaults to 10.
                         */
                        gailimit?: Limit;
                    }

                    /**
                     * Enumerate all links that point to a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                     */
                    interface AllLinks extends SetNotificationTimestamp {
                        generator?: "alllinks";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        galcontinue?: string;
                        /**
                         * The title of the link to start enumerating from.
                         */
                        galfrom?: string;
                        /**
                         * The title of the link to stop enumerating at.
                         */
                        galto?: string;
                        /**
                         * Search for all linked titles that begin with this value.
                         */
                        galprefix?: string;
                        /**
                         * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        galunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                         * - **title**: Adds the title of the link.
                         *
                         * Defaults to `title`.
                         */
                        galprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        galnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gallimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        galdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all pages sequentially in a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                     */
                    interface AllPages extends SetNotificationTimestamp {
                        generator?: "allpages";
                        /**
                         * The page title to start enumerating from.
                         */
                        gapfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gapcontinue?: string;
                        /**
                         * The page title to stop enumerating at.
                         */
                        gapto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gapprefix?: string;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gapnamespace?: number;
                        /**
                         * Which pages to list.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                        /**
                         * Limit to pages with at least this many bytes.
                         */
                        gapminsize?: number;
                        /**
                         * Limit to pages with at most this many bytes.
                         */
                        gapmaxsize?: number;
                        /**
                         * Limit to protected pages only.
                         */
                        gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                        /**
                         * Filter protections based on protection level (must be used with apprtype= parameter).
                         */
                        gapprlevel?: string | string[];
                        /**
                         * Filter protections based on cascadingness (ignored when apprtype isn't set).
                         *
                         * Defaults to `all`.
                         */
                        gapprfiltercascade?: "all" | "cascading" | "noncascading";
                        /**
                         * Which protection expiry to filter the page on:
                         *
                         * - **indefinite**: Get only pages with indefinite protection expiry.
                         * - **definite**: Get only pages with a definite (specific) protection expiry.
                         * - **all**: Get pages with any protections expiry.
                         *
                         * Defaults to `all`.
                         */
                        gapprexpiry?: "all" | "definite" | "indefinite";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gaplimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gapdir?: "ascending" | "descending";
                    }

                    /**
                     * List all redirects to a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                     */
                    interface AllRedirects extends SetNotificationTimestamp {
                        generator?: "allredirects";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garcontinue?: string;
                        /**
                         * The title of the redirect to start enumerating from.
                         */
                        garfrom?: string;
                        /**
                         * The title of the redirect to stop enumerating at.
                         */
                        garto?: string;
                        /**
                         * Search for all target pages that begin with this value.
                         */
                        garprefix?: string;
                        /**
                         * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        garunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                         * - **title**: Adds the title of the redirect.
                         * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                         * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                         *
                         * Defaults to `title`.
                         */
                        garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        garnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        garlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gardir?: "ascending" | "descending";
                    }

                    /**
                     * List all revisions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                     */
                    interface AllRevisions extends SetNotificationTimestamp {
                        generator?: "allrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        garvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        garvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `garvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                         */
                        garvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        garvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        garvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                         *
                         * @deprecated
                         */
                        garvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `arvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        garvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         */
                        garvuser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        garvnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        garvstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        garvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                         * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                         *
                         * Defaults to `older`.
                         */
                        garvdir?: "newer" | "older";
                        /**
                         * Don't list revisions by this user.
                         */
                        garvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garvcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        garvgeneratetitles?: boolean;
                    }

                    /**
                     * List all transclusions (pages embedded using {{x}}), including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                     */
                    interface AllTransclusions extends SetNotificationTimestamp {
                        generator?: "alltransclusions";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gatcontinue?: string;
                        /**
                         * The title of the transclusion to start enumerating from.
                         */
                        gatfrom?: string;
                        /**
                         * The title of the transclusion to stop enumerating at.
                         */
                        gatto?: string;
                        /**
                         * Search for all transcluded titles that begin with this value.
                         */
                        gatprefix?: string;
                        /**
                         * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gatunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                         * - **title**: Adds the title of the transclusion.
                         *
                         * Defaults to `title`.
                         */
                        gatprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 10.
                         */
                        gatnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gatlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gatdir?: "ascending" | "descending";
                    }

                    /**
                     * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                     */
                    interface AutomaticTranslationDenseLanguages extends SetNotificationTimestamp {
                        "generator"?: "automatictranslationdenselanguages";
                        /**
                         * The Wikidata ID.
                         */
                        "gqid": string;
                        /**
                         * A boolean value indicating whether the section titles should be included in the response.
                         */
                        "gsection-titles"?: boolean;
                    }

                    /**
                     * Find all pages that link to the given page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                     */
                    interface Backlinks extends SetNotificationTimestamp {
                        generator?: "backlinks";
                        /**
                         * Title to search. Cannot be used together with `blpageid`.
                         */
                        gbltitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with `bltitle`.
                         */
                        gblpageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gblcontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        gblnamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gbldir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        gblfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        gbllimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        gblredirect?: boolean;
                    }

                    /**
                     * List all categories the pages belong to.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                     */
                    interface Categories extends SetNotificationTimestamp {
                        generator?: "categories";
                        /**
                         * Which additional properties to get for each category:
                         *
                         * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                         * - **timestamp**: Adds timestamp of when the category was added.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         */
                        gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                        /**
                         * Which kind of categories to show.
                         */
                        gclshow?: OneOrMore<Toggle<"hidden">>;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gcllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gclcontinue?: string;
                        /**
                         * Only list these categories. Useful for checking whether a certain page is in a certain category.
                         */
                        gclcategories?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gcldir?: "ascending" | "descending";
                    }

                    /**
                     * List all pages in a given category.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                     */
                    interface CategoryMembers extends SetNotificationTimestamp {
                        generator?: "categorymembers";
                        /**
                         * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                         */
                        gcmtitle?: string;
                        /**
                         * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                         */
                        gcmpageid?: number;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                         * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                         * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                         * - **timestamp**: Adds the timestamp of when the page was included.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gcmprop?: OneOrMore<
                            "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                        >;
                        /**
                         * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gcmnamespace?: number | number[] | "*";
                        /**
                         * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                         *
                         * Defaults to `page`, `subcat`, and `file`.
                         */
                        gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gcmcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcmlimit?: Limit;
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `sortkey`.
                         */
                        gcmsort?: "sortkey" | "timestamp";
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gcmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                        /**
                         * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                         */
                        gcmstart?: string;
                        /**
                         * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                         */
                        gcmend?: string;
                        /**
                         * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmstarthexsortkey?: string;
                        /**
                         * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmendhexsortkey?: string;
                        /**
                         * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                         */
                        gcmstartsortkeyprefix?: string;
                        /**
                         * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                         */
                        gcmendsortkeyprefix?: string;
                        /**
                         * Use cmstarthexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmstartsortkey?: string;
                        /**
                         * Use cmendhexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmendsortkey?: string;
                    }

                    /**
                     * Enumerate all pages that have custom review configurations.
                     */
                    interface Configuredpages extends SetNotificationTimestamp {
                        generator?: "configuredpages";
                        /**
                         * Start listing at this page ID.
                         */
                        gcpstart?: number;
                        /**
                         * Stop listing at this page ID.
                         */
                        gcpend?: number;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gcpdir?: "newer" | "older";
                        /**
                         * The namespaces to enumerate.
                         */
                        gcpnamespace?: number | number[] | "*";
                        /**
                         * The default page view version.
                         */
                        gcpdefault?: "latest" | "stable";
                        /**
                         * Review/autoreview restriction level.
                         */
                        gcpautoreview?: "none" | "sysop";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcplimit?: Limit;
                    }

                    /**
                     * Query Content Translation database for translations.
                     */
                    interface ContentTranslation extends SetNotificationTimestamp {
                        generator?: "contenttranslation";
                        /**
                         * Translation ID.
                         */
                        gtranslationid?: string;
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * The title of the source page.
                         */
                        gsourcetitle?: string;
                        /**
                         * The title of the source section (optional).
                         */
                        gsourcesectiontitle?: string;
                        /**
                         * The maximum number of translations to fetch.
                         *
                         * Defaults to 100.
                         */
                        glimit?: Limit;
                        /**
                         * Offset into result set (optional).
                         */
                        goffset?: string;
                        /**
                         * State of the translation.
                         */
                        gtype?: "draft" | "published";
                        /**
                         * The usecase for which the translations are being fetched (optional).
                         */
                        gusecase?:
                            | "desktop-editor-draft"
                            | "translation-corpora-units"
                            | "unified-dashboard";
                    }

                    /**
                     * Get suggestion lists for Content Translation.
                     */
                    interface ContentTranslationSuggestions extends SetNotificationTimestamp {
                        generator?: "contenttranslationsuggestions";
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * Return suggestions only from a particular list
                         */
                        glistid?: string;
                        /**
                         * The maximum number of translation suggestions to fetch.
                         *
                         * Defaults to 10.
                         */
                        glimit?: Limit;
                        /**
                         * Offset for paginated results.
                         */
                        goffset?: string;
                        /**
                         * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                         */
                        gseed?: number;
                    }

                    /**
                     * Get deleted revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                     * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                     */
                    interface DeletedRevisions extends SetNotificationTimestamp {
                        generator?: "deletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gdrvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gdrvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gdrvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                         */
                        gdrvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gdrvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gdrvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                         *
                         * @deprecated
                         */
                        gdrvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `drvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gdrvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                         */
                        gdrvstart?: string;
                        /**
                         * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                         */
                        gdrvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                         * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                         *
                         * Defaults to `older`.
                         */
                        gdrvdir?: "newer" | "older";
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gdrvtag?: string;
                        /**
                         * Only list revisions by this user.
                         */
                        gdrvuser?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gdrvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdrvcontinue?: string;
                    }

                    /**
                     * List all files that are duplicates of the given files based on hash values.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                     */
                    interface DuplicateFiles extends SetNotificationTimestamp {
                        generator?: "duplicatefiles";
                        /**
                         * How many duplicate files to return.
                         *
                         * Defaults to 10.
                         */
                        gdflimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdfcontinue?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gdfdir?: "ascending" | "descending";
                        /**
                         * Look only for files in the local repository.
                         */
                        gdflocalonly?: boolean;
                    }

                    /**
                     * Find all pages that embed (transclude) the given title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                     */
                    interface Embeddedin extends SetNotificationTimestamp {
                        generator?: "embeddedin";
                        /**
                         * Title to search. Cannot be used together with eipageid.
                         */
                        geititle?: string;
                        /**
                         * Page ID to search. Cannot be used together with eititle.
                         */
                        geipageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geicontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        geinamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        geidir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        geifilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        geilimit?: Limit;
                    }

                    /**
                     * Enumerate pages that contain a given URL.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                     */
                    interface ExtUrlUsage extends SetNotificationTimestamp {
                        generator?: "exturlusage";
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the ID of page.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **url**: Adds the URL used in the page.
                         *
                         * Defaults to `ids`, `title`, and `url`.
                         */
                        geuprop?: OneOrMore<"ids" | "title" | "url">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geucontinue?: string;
                        /**
                         * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                         *
                         * Defaults to an empty string.
                         */
                        geuprotocol?:
                            | ""
                            | "bitcoin"
                            | "ftp"
                            | "ftps"
                            | "geo"
                            | "git"
                            | "gopher"
                            | "http"
                            | "https"
                            | "irc"
                            | "ircs"
                            | "magnet"
                            | "mailto"
                            | "matrix"
                            | "mms"
                            | "news"
                            | "nntp"
                            | "redis"
                            | "sftp"
                            | "sip"
                            | "sips"
                            | "sms"
                            | "ssh"
                            | "svn"
                            | "tel"
                            | "telnet"
                            | "urn"
                            | "worldwind"
                            | "xmpp";
                        /**
                         * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                         */
                        geuquery?: string;
                        /**
                         * The page namespaces to enumerate.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        geunamespace?: number | number[] | "*";
                        /**
                         * How many pages to return.
                         *
                         * Defaults to 10.
                         */
                        geulimit?: Limit;
                        /**
                         * Expand protocol-relative URLs with the canonical protocol.
                         *
                         * @deprecated
                         */
                        geuexpandurl?: boolean;
                    }

                    /**
                     * Find all pages that use the given files.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                     */
                    interface FileUsage extends SetNotificationTimestamp {
                        generator?: "fileusage";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gfunamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gfushow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gfulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gfucontinue?: string;
                    }

                    /**
                     * Returns pages having coordinates that are located in a certain area.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                     */
                    interface GeoSearch extends SetNotificationTimestamp {
                        generator?: "geosearch";
                        /**
                         * Coordinate around which to search.
                         *
                         * Format: Latitude and longitude separated by pipe (`|`).
                         */
                        ggscoord?: string;
                        /**
                         * Title of page around which to search.
                         */
                        ggspage?: string;
                        /**
                         * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                         */
                        ggsbbox?: string;
                        /**
                         * Search radius in meters.
                         *
                         * Defaults to 500.
                         */
                        ggsradius?: number;
                        /**
                         * Restrict search to objects no larger than this, in meters.
                         */
                        ggsmaxdim?: number;
                        /**
                         * Set the sort order of returned results.
                         *
                         * - **distance**: Rank pages by their distance to the center.
                         * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                         *
                         * Defaults to `distance`.
                         */
                        ggssort?: "distance" | "relevance";
                        /**
                         * Maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        ggslimit?: Limit;
                        /**
                         * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `earth`.
                         */
                        ggsglobe?: "earth";
                        /**
                         * Namespaces to search.
                         *
                         * Defaults to 0.
                         */
                        ggsnamespace?: number | number[] | "*";
                        /**
                         * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                         *
                         * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                         * - **name**: Name of the object.
                         * - **dim**: Approximate size of the object in meters.
                         * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                         * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                         * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `globe`.
                         */
                        ggsprop?: OneOrMore<
                            "country" | "dim" | "globe" | "name" | "region" | "type"
                        >;
                        /**
                         * Which kind of coordinates to return.
                         *
                         * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                         * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                         * - **all**: Return both primary and secondary coordinates.
                         *
                         * Defaults to `primary`.
                         */
                        ggsprimary?: "all" | "primary" | "secondary";
                        /**
                         * Whether debug information should be returned.
                         */
                        ggsdebug?: boolean;
                    }

                    /**
                     * Get task recommendations suitable for newcomers.
                     *
                     * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                     */
                    interface GrowthTasks extends SetNotificationTimestamp {
                        generator?: "growthtasks";
                        /**
                         * Task types to limit results to. Leave empty to receive all suggestions.
                         *
                         * - **copyedit**: Copyedit
                         * - **expand**: Expand short articles
                         * - **links**: Add links between articles
                         * - **references**: Find references
                         * - **update**: Update articles
                         * - **link-recommendation**: Add links between articles
                         */
                        ggttasktypes?: OneOrMore<
                            | "copyedit"
                            | "expand"
                            | "image-recommendation"
                            | "link-recommendation"
                            | "links"
                            | "references"
                            | "section-image-recommendation"
                            | "update"
                        >;
                        /**
                         * Article topics to prefer in task suggestions.
                         *
                         * - **architecture**: Architecture
                         * - **art**: Art
                         * - **comics-and-anime**: Comics and anime
                         * - **entertainment**: Entertainment
                         * - **fashion**: Fashion
                         * - **literature**: Literature
                         * - **music**: Music
                         * - **performing-arts**: Performing arts
                         * - **sports**: Sports
                         * - **tv-and-film**: TV and film
                         * - **video-games**: Video games
                         * - **biography**: Biography (all)
                         * - **women**: Biography (women)
                         * - **business-and-economics**: Business and economics
                         * - **education**: Education
                         * - **food-and-drink**: Food and drink
                         * - **history**: History
                         * - **military-and-warfare**: Military and warfare
                         * - **philosophy-and-religion**: Philosophy and religion
                         * - **politics-and-government**: Politics and government
                         * - **society**: Society
                         * - **transportation**: Transportation
                         * - **biology**: Biology
                         * - **chemistry**: Chemistry
                         * - **computers-and-internet**: Computers and internet
                         * - **earth-and-environment**: Earth and environment
                         * - **engineering**: Engineering
                         * - **general-science**: General science
                         * - **mathematics**: Mathematics
                         * - **medicine-and-health**: Medicine and health
                         * - **physics**: Physics
                         * - **technology**: Technology
                         * - **africa**: Africa
                         * - **asia**: Asia
                         * - **central-america**: Central America
                         * - **europe**: Europe
                         * - **north-america**: North America
                         * - **oceania**: Oceania
                         * - **south-america**: South America
                         */
                        ggttopics?: OneOrMore<
                            | "africa"
                            | "architecture"
                            | "art"
                            | "asia"
                            | "biography"
                            | "biology"
                            | "business-and-economics"
                            | "central-america"
                            | "chemistry"
                            | "comics-and-anime"
                            | "computers-and-internet"
                            | "earth-and-environment"
                            | "education"
                            | "engineering"
                            | "entertainment"
                            | "europe"
                            | "fashion"
                            | "food-and-drink"
                            | "general-science"
                            | "history"
                            | "literature"
                            | "mathematics"
                            | "medicine-and-health"
                            | "military-and-warfare"
                            | "music"
                            | "north-america"
                            | "oceania"
                            | "performing-arts"
                            | "philosophy-and-religion"
                            | "physics"
                            | "politics-and-government"
                            | "society"
                            | "south-america"
                            | "sports"
                            | "technology"
                            | "transportation"
                            | "tv-and-film"
                            | "video-games"
                            | "women"
                        >;
                        /**
                         * Matching mode for topics.
                         */
                        ggttopicsmode?: "AND" | "OR";
                        /**
                         * Maximum number of task suggestions to return.
                         */
                        ggtlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        ggtoffset?: number;
                        /**
                         * Add debug data to the output.
                         */
                        ggtdebug?: boolean;
                        /**
                         * Page IDs to exclude from the query.
                         */
                        ggtexcludepageids?: number | number[];
                    }

                    /**
                     * Returns all files contained on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                     */
                    interface Images extends SetNotificationTimestamp {
                        generator?: "images";
                        /**
                         * How many files to return.
                         *
                         * Defaults to 10.
                         */
                        gimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gimcontinue?: string;
                        /**
                         * Only list these files. Useful for checking whether a certain page has a certain file.
                         */
                        gimimages?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gimdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that use the given image title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                     */
                    interface ImageUsage extends SetNotificationTimestamp {
                        generator?: "imageusage";
                        /**
                         * Title to search. Cannot be used together with iupageid.
                         */
                        giutitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with iutitle.
                         */
                        giupageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giucontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        giunamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giudir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        giufilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        giulimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        giuredirect?: boolean;
                    }

                    /**
                     * Find all pages that link to the given interwiki link.
                     *
                     * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                     */
                    // tslint:disable-next-line:interface-name
                    interface IWBacklinks extends SetNotificationTimestamp {
                        generator?: "iwbacklinks";
                        /**
                         * Prefix for the interwiki.
                         */
                        giwblprefix?: string;
                        /**
                         * Interwiki link to search for. Must be used with `iwblblprefix`.
                         */
                        giwbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giwblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        giwbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **iwprefix**: Adds the prefix of the interwiki.
                         * - **iwtitle**: Adds the title of the interwiki.
                         *
                         * Defaults to an empty string.
                         */
                        giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giwbldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given language link.
                     *
                     * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                     *
                     * Note that this may not consider language links added by extensions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                     */
                    interface LangBacklinks extends SetNotificationTimestamp {
                        generator?: "langbacklinks";
                        /**
                         * Language for the language link.
                         */
                        glbllang?: string;
                        /**
                         * Language link to search for. Must be used with lbllang.
                         */
                        glbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        glbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **lllang**: Adds the language code of the language link.
                         * - **lltitle**: Adds the title of the language link.
                         *
                         * Defaults to an empty string.
                         */
                        glblprop?: OneOrMore<"lllang" | "lltitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        glbldir?: "ascending" | "descending";
                    }

                    /**
                     * Returns all links from the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                     */
                    interface Links extends SetNotificationTimestamp {
                        generator?: "links";
                        /**
                         * Show links in these namespaces only.
                         */
                        gplnamespace?: number | number[] | "*";
                        /**
                         * How many links to return.
                         *
                         * Defaults to 10.
                         */
                        gpllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gplcontinue?: string;
                        /**
                         * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                         */
                        gpltitles?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gpldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                     */
                    interface LinksHere extends SetNotificationTimestamp {
                        generator?: "linkshere";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        glhnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        glhshow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        glhlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glhcontinue?: string;
                    }

                    /**
                     * Query MessageCollection about translations.
                     */
                    interface MessageCollection extends SetNotificationTimestamp {
                        generator?: "messagecollection";
                        /**
                         * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                         */
                        gmcgroup: string;
                        /**
                         * Language code.
                         *
                         * Defaults to `en`.
                         */
                        gmclanguage?: string;
                        /**
                         * How many messages to show (after filtering).
                         *
                         * Defaults to 500.
                         */
                        gmclimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to an empty string.
                         */
                        gmcoffset?: string;
                        /**
                         * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                         *
                         * - **fuzzy**: Messages with fuzzy tag.
                         * - **optional**: Messages which should be translated only if changes are necessary.
                         * - **ignored**: Messages which are never translated.
                         * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                         * - **translated**: Messages which have a translation which is not fuzzy.
                         * - **changed**: Messages which have been translated or changed since last export.
                         * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                         * - **last-translator:N**: Messages where the user number `N` is the last translator.
                         *
                         * Defaults to `!optional` and `!ignored`.
                         */
                        gmcfilter?: string | string[];
                        /**
                         * Which properties to get:
                         *
                         * - **definition**: Message definition.
                         * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                         * - **tags**: Message tags, like optional, ignored and fuzzy.
                         * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                         * - **revision**: Deprecated. Use mcprop=properties.
                         *
                         * Defaults to `definition` and `translation`.
                         */
                        gmcprop?: OneOrMore<
                            "definition" | "properties" | "revision" | "tags" | "translation"
                        >;
                    }

                    /**
                     * Lists the most viewed pages (based on last day's pageview count).
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                     */
                    interface MostViewed extends SetNotificationTimestamp {
                        generator?: "mostviewed";
                        /**
                         * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                         *
                         * - **pageviews**: Plain pageviews.
                         *
                         * Defaults to `pageviews`.
                         */
                        gpvimmetric?: "pageviews";
                        /**
                         * The number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpvimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpvimoffset?: number;
                    }

                    /**
                     * Enumerates pages that have changes pending review.
                     */
                    interface Oldreviewedpages extends SetNotificationTimestamp {
                        generator?: "oldreviewedpages";
                        /**
                         * Start listing at this timestamp.
                         */
                        gorstart?: string;
                        /**
                         * Stop listing at this timestamp.
                         */
                        gorend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gordir?: "newer" | "older";
                        /**
                         * Maximum character count change size.
                         */
                        gormaxsize?: number;
                        /**
                         * How to filter for pages on your watchlist.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterwatched?: "all" | "watched";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gornamespace?: number | number[] | "*";
                        /**
                         * Show pages only in the given category.
                         */
                        gorcategory?: string;
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gorlimit?: Limit;
                    }

                    /**
                     * List all pages using a given page property.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                     */
                    interface PagesWithProp extends SetNotificationTimestamp {
                        generator?: "pageswithprop";
                        /**
                         * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                         */
                        gpwppropname: string;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **value**: Adds the value of the page property.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gpwpcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpwplimit?: Limit;
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gpwpdir?: "ascending" | "descending";
                    }

                    /**
                     * Perform a prefix search for page titles.
                     *
                     * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                     */
                    interface PrefixSearch extends SetNotificationTimestamp {
                        generator?: "prefixsearch";
                        /**
                         * Search string.
                         */
                        gpssearch: string;
                        /**
                         * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                         *
                         * Defaults to 0.
                         */
                        gpsnamespace?: number | number[] | "*";
                        /**
                         * Maximum number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gpslimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpsoffset?: number;
                        /**
                         * Search profile to use.
                         *
                         * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                         * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                         * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                         * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                         * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gpsprofile?:
                            | "classic"
                            | "engine_autoselect"
                            | "fast-fuzzy"
                            | "fuzzy"
                            | "fuzzy-subphrases"
                            | "normal"
                            | "normal-subphrases"
                            | "strict";
                    }

                    /**
                     * List all pages associated with one or more projects.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                     */
                    interface ProjectPages extends SetNotificationTimestamp {
                        generator?: "projectpages";
                        /**
                         * Also return assessments for the pages returned.
                         */
                        gwppassessments?: boolean;
                        /**
                         * The projects to list pages for. If this parameter is omitted, all projects will be included.
                         */
                        gwppprojects: string | string[];
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gwpplimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwppcontinue?: string;
                    }

                    /**
                     * List the pages in a given index
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                     */
                    interface ProofreadPagesInIndex extends SetNotificationTimestamp {
                        generator?: "proofreadpagesinindex";
                        /**
                         * Which properties to get for each page
                         *
                         * - **ids**: Return the page ID of each page linked to the index page
                         * - **title**: Return the page title of each page linked to the index page
                         * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                         * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gprppiiprop?: OneOrMore<
                            "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                        >;
                        /**
                         * The title of the Index page to get pages for
                         */
                        gprppiititle?: string;
                        /**
                         * The page ID of the Index page to get pages for
                         */
                        gprppiipageid?: number;
                    }

                    /**
                     * List all titles protected from creation.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                     */
                    interface ProtectedTitles extends SetNotificationTimestamp {
                        generator?: "protectedtitles";
                        /**
                         * Only list titles in these namespaces.
                         */
                        gptnamespace?: number | number[] | "*";
                        /**
                         * Only list titles with these protection levels.
                         */
                        gptlevel?: string | string[];
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gptlimit?: Limit;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                         * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                         *
                         * Defaults to `older`.
                         */
                        gptdir?: "newer" | "older";
                        /**
                         * Start listing at this protection timestamp.
                         */
                        gptstart?: string;
                        /**
                         * Stop listing at this protection timestamp.
                         */
                        gptend?: string;
                        /**
                         * Which properties to get:
                         *
                         * - **timestamp**: Adds the timestamp of when protection was added.
                         * - **user**: Adds the user that added the protection.
                         * - **userid**: Adds the user ID that added the protection.
                         * - **comment**: Adds the comment for the protection.
                         * - **parsedcomment**: Adds the parsed comment for the protection.
                         * - **expiry**: Adds the timestamp of when the protection will be lifted.
                         * - **level**: Adds the protection level.
                         *
                         * Defaults to `timestamp` and `level`.
                         */
                        gptprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "level"
                            | "parsedcomment"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gptcontinue?: string;
                    }

                    /**
                     * Get a list provided by a QueryPage-based special page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                     */
                    interface QueryPage extends SetNotificationTimestamp {
                        generator?: "querypage";
                        /**
                         * The name of the special page. Note, this is case-sensitive.
                         */
                        gqppage: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gqpoffset?: number;
                        /**
                         * Number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gqplimit?: Limit;
                    }

                    /**
                     * Get a set of random pages.
                     *
                     * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                     */
                    interface Random extends SetNotificationTimestamp {
                        generator?: "random";
                        /**
                         * Return pages in these namespaces only.
                         */
                        grnnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `nonredirects`.
                         */
                        grnfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Use `rnfilterredir=redirects` instead.
                         *
                         * @deprecated
                         */
                        grnredirect?: boolean;
                        /**
                         * Limit how many random pages will be returned.
                         *
                         * Defaults to 1.
                         */
                        grnlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grncontinue?: string;
                    }

                    /**
                     * List the pages of a certain list.
                     *
                     * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface ReadingListEntries extends SetNotificationTimestamp {
                        generator?: "readinglistentries";
                        /**
                         * The list IDs for which to return pages.
                         */
                        grlelists?: number | number[];
                        /**
                         * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                         */
                        grlechangedsince?: string;
                        /**
                         * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                         *
                         * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                         * - **updated**: Last update timestamp.
                         */
                        grlesort?: "name" | "updated";
                        /**
                         * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                         *
                         * Defaults to `ascending`.
                         */
                        grledir?: "ascending" | "descending";
                        /**
                         * Number of result items to return.
                         *
                         * Defaults to 10.
                         */
                        grlelimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grlecontinue?: string;
                    }

                    /**
                     * Enumerate recent changes.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                     */
                    interface RecentChanges extends SetNotificationTimestamp {
                        generator?: "recentchanges";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        grcstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        grcend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                         * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                         *
                         * Defaults to `older`.
                         */
                        grcdir?: "newer" | "older";
                        /**
                         * Filter changes to only these namespaces.
                         */
                        grcnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        grcuser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        grcexcludeuser?: string;
                        /**
                         * Only list changes tagged with this tag.
                         */
                        grctag?: string;
                        /**
                         * Include additional pieces of information:
                         *
                         * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **flags**: Adds flags for the edit.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **title**: Adds the page title of the edit.
                         * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                         * - **sizes**: Adds the new and old page length in bytes.
                         * - **redirect**: Tags edit if page is a redirect.
                         * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                         * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                         * - **tags**: Lists tags for the entry.
                         * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         *
                         * Defaults to `title`, `timestamp`, and `ids`.
                         */
                        grcprop?: OneOrMore<
                            | "comment"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrolled"
                            | "redirect"
                            | "sha1"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                         *
                         * @deprecated
                         */
                        grctoken?: string;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                         */
                        grcshow?: OneOrMore<
                            | Toggle<
                                  | "anon"
                                  | "autopatrolled"
                                  | "bot"
                                  | "minor"
                                  | "oresreview"
                                  | "patrolled"
                                  | "redirect"
                              >
                            | "unpatrolled"
                        >;
                        /**
                         * How many total changes to return.
                         *
                         * Defaults to 10.
                         */
                        grclimit?: Limit;
                        /**
                         * Which types of changes to show.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Only list changes which are the latest revision.
                         */
                        grctoponly?: boolean;
                        /**
                         * Filter entries to those related to a page.
                         */
                        grctitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grccontinue?: string;
                        /**
                         * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                         */
                        grcgeneraterevisions?: boolean;
                        /**
                         * Only list changes that touch the named slot.
                         */
                        grcslot?: "main" | "mediainfo";
                    }

                    /**
                     * Returns all redirects to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                     */
                    interface Redirects extends SetNotificationTimestamp {
                        generator?: "redirects";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each redirect.
                         * - **title**: Title of each redirect.
                         * - **fragment**: Fragment of each redirect, if any.
                         *
                         * Defaults to `pageid` and `title`.
                         */
                        grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        grdnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **fragment**: Only show redirects with a fragment.
                         * - **!fragment**: Only show redirects without a fragment.
                         */
                        grdshow?: OneOrMore<Toggle<"fragment">>;
                        /**
                         * How many redirects to return.
                         *
                         * Defaults to 10.
                         */
                        grdlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grdcontinue?: string;
                    }

                    /**
                     * Get revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get data about a set of pages (last revision), by setting titles or pageids.
                     * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                     * - Get data about a set of revisions by setting their IDs with revids.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                     */
                    interface Revisions extends SetNotificationTimestamp {
                        generator?: "revisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        grvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flagged"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        grvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `grvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                         */
                        grvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        grvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        grvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                         *
                         * @deprecated
                         */
                        grvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `rvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        grvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvstartid?: number;
                        /**
                         * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvendid?: number;
                        /**
                         * From which revision timestamp to start enumeration.
                         */
                        grvstart?: string;
                        /**
                         * Enumerate up to this timestamp.
                         */
                        grvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                         * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                         *
                         * Defaults to `older`.
                         */
                        grvdir?: "newer" | "older";
                        /**
                         * Only include revisions made by user.
                         */
                        grvuser?: string;
                        /**
                         * Exclude revisions made by user.
                         */
                        grvexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        grvtag?: string;
                        /**
                         * Which tokens to obtain for each revision.
                         *
                         * @deprecated
                         */
                        grvtoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grvcontinue?: string;
                    }

                    /**
                     * Perform a full text search.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                     */
                    interface Search extends SetNotificationTimestamp {
                        generator?: "search";
                        /**
                         * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                         */
                        gsrsearch: string;
                        /**
                         * Search only within these namespaces.
                         *
                         * Defaults to 0.
                         */
                        gsrnamespace?: number | number[] | "*";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gsrlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gsroffset?: number;
                        /**
                         * Query independent profile to use (affects ranking algorithm).
                         *
                         * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                         * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                         * - **empty**: Ranking based solely on query dependent features (for debug only).
                         * - **wsum_inclinks**: Weighted sum based on incoming links
                         * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                         * - **popular_inclinks_pv**: Ranking based primarily on page views
                         * - **popular_inclinks**: Ranking based primarily on incoming link counts
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gsrqiprofile?: string;
                        /**
                         * Which type of search to perform.
                         */
                        gsrwhat?: "nearmatch" | "text" | "title";
                        /**
                         * Which metadata to return.
                         *
                         * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                         */
                        gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                        /**
                         * Which properties to return:
                         *
                         * - **size**: Adds the size of the page in bytes.
                         * - **wordcount**: Adds the word count of the page.
                         * - **timestamp**: Adds the timestamp of when the page was last edited.
                         * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                         * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                         * - **redirecttitle**: Adds the title of the matching redirect.
                         * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                         * - **sectiontitle**: Adds the title of the matching section.
                         * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                         * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                         * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                         * - **score**: Deprecated. Ignored.
                         * - **hasrelated**: Deprecated. Ignored.
                         * - **extensiondata**: Adds extra data generated by extensions.
                         *
                         * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                         */
                        gsrprop?: OneOrMore<
                            | "categorysnippet"
                            | "extensiondata"
                            | "hasrelated"
                            | "isfilematch"
                            | "redirectsnippet"
                            | "redirecttitle"
                            | "score"
                            | "sectionsnippet"
                            | "sectiontitle"
                            | "size"
                            | "snippet"
                            | "timestamp"
                            | "titlesnippet"
                            | "wordcount"
                        >;
                        /**
                         * Include interwiki results in the search, if available.
                         */
                        gsrinterwiki?: boolean;
                        /**
                         * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                         */
                        gsrenablerewrites?: boolean;
                        /**
                         * Set the sort order of returned results.
                         *
                         * Defaults to `relevance`.
                         */
                        gsrsort?:
                            | "create_timestamp_asc"
                            | "create_timestamp_desc"
                            | "incoming_links_asc"
                            | "incoming_links_desc"
                            | "just_match"
                            | "last_edit_asc"
                            | "last_edit_desc"
                            | "none"
                            | "random"
                            | "relevance"
                            | "user_random";
                    }

                    /**
                     * Returns all pages transcluded on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                     */
                    interface Templates extends SetNotificationTimestamp {
                        generator?: "templates";
                        /**
                         * Show templates in these namespaces only.
                         */
                        gtlnamespace?: number | number[] | "*";
                        /**
                         * How many templates to return.
                         *
                         * Defaults to 10.
                         */
                        gtllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gtlcontinue?: string;
                        /**
                         * Only list these templates. Useful for checking whether a certain page uses a certain template.
                         */
                        gtltemplates?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gtldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that transclude the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                     */
                    interface Transcludedin extends SetNotificationTimestamp {
                        generator?: "transcludedin";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gtinamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gtishow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gtilimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gticontinue?: string;
                    }

                    /**
                     * Enumerates pages that have not been reviewed to a given quality level.
                     */
                    interface Unreviewedpages extends SetNotificationTimestamp {
                        generator?: "unreviewedpages";
                        /**
                         * Start listing at this page title.
                         */
                        gurstart?: string;
                        /**
                         * Stop listing at this page title.
                         */
                        gurend?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gurdir?: "ascending" | "descending";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gurnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gurfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How to filter by quality (0=checked, 1=quality).
                         *
                         * Defaults to 0.
                         */
                        gurfilterlevel?: number;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gurlimit?: Limit;
                    }

                    /**
                     * Get recent changes to pages in the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                     */
                    interface Watchlist extends SetNotificationTimestamp {
                        generator?: "watchlist";
                        /**
                         * Include multiple revisions of the same page within given timeframe.
                         */
                        gwlallrev?: boolean;
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gwlstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        gwlend?: string;
                        /**
                         * Filter changes to only the given namespaces.
                         */
                        gwlnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        gwluser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        gwlexcludeuser?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                         * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                         *
                         * Defaults to `older`.
                         */
                        gwldir?: "newer" | "older";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwllimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **ids**: Adds revision IDs and page IDs.
                         * - **title**: Adds title of the page.
                         * - **flags**: Adds flags for the edit.
                         * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **patrol**: Tags edits that are patrolled.
                         * - **sizes**: Adds the old and new lengths of the page.
                         * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                         * - **loginfo**: Adds log information where appropriate.
                         * - **tags**: Lists tags for the entry.
                         * - **expiry**: Adds the expiry time.
                         *
                         * Defaults to `ids`, `title`, and `flags`.
                         */
                        gwlprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "notificationtimestamp"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrol"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                         */
                        gwlshow?: OneOrMore<
                            Toggle<
                                | "anon"
                                | "autopatrolled"
                                | "bot"
                                | "minor"
                                | "oresreview"
                                | "patrolled"
                                | "unread"
                            >
                        >;
                        /**
                         * Which types of changes to show:
                         *
                         * - **edit**: Regular page edits.
                         * - **new**: Page creations.
                         * - **log**: Log entries.
                         * - **external**: External changes.
                         * - **categorize**: Category membership changes.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Used along with wltoken to access a different user's watchlist.
                         */
                        gwlowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwltoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwlcontinue?: string;
                    }

                    /**
                     * Get all pages on the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                     */
                    interface WatchlistRaw extends SetNotificationTimestamp {
                        generator?: "watchlistraw";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwrcontinue?: string;
                        /**
                         * Only list pages in the given namespaces.
                         */
                        gwrnamespace?: number | number[] | "*";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwrlimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **changed**: Adds timestamp of when the user was last notified about the edit.
                         */
                        gwrprop?: OneOrMore<"changed">;
                        /**
                         * Only list items that meet these criteria.
                         */
                        gwrshow?: OneOrMore<Toggle<"changed">>;
                        /**
                         * Used along with wrtoken to access a different user's watchlist.
                         */
                        gwrowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwrtoken?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gwrdir?: "ascending" | "descending";
                        /**
                         * Title (with namespace prefix) to begin enumerating from.
                         */
                        gwrfromtitle?: string;
                        /**
                         * Title (with namespace prefix) to stop enumerating at.
                         */
                        gwrtotitle?: string;
                    }

                    /**
                     * Returns all pages that use the given entity IDs.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                     */
                    interface WBListEntityUsage extends SetNotificationTimestamp {
                        generator?: "wblistentityusage";
                        /**
                         * Properties to add to the result.
                         *
                         * - **url**: If enabled the url of the entity will be added to the result.
                         */
                        gwbleuprop?: OneOrMore<"url">;
                        /**
                         * Only return entity IDs that used this aspect.
                         *
                         * - **S**: The entity's sitelinks are used
                         * - **L**: The entity's label is used
                         * - **D**: The entity's description is used
                         * - **T**: The title of the local page corresponding to the entity is used
                         * - **C**: Statements from the entity are used
                         * - **X**: All aspects of an entity are or may be used
                         * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                         */
                        gwbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                        /**
                         * Entities that have been used.
                         */
                        gwbleuentities: string | string[];
                        /**
                         * How many entity usages to return.
                         *
                         * Defaults to 10.
                         */
                        gwbleulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwbleucontinue?: string;
                    }

                    /**
                     * Searches for entities using labels and aliases.
                     *
                     * This can be used as a generator for other queries.
                     * Returns the matched term that should be displayed.
                     *
                     * @private
                     */
                    interface WBSearch extends SetNotificationTimestamp {
                        generator?: "wbsearch";
                        /**
                         * Search for this text.
                         */
                        gwbssearch: string;
                        /**
                         * Search in this language.
                         */
                        gwbslanguage?: string;
                        /**
                         * Whether to disable language fallback
                         */
                        gwbsstrictlanguage?: boolean;
                        /**
                         * Search for this type of entity.
                         *
                         * Defaults to `item`.
                         */
                        gwbstype?: string;
                        /**
                         * Maximal number of results
                         *
                         * Defaults to 7.
                         */
                        gwbslimit?: Limit;
                        /**
                         * The search profile to use.
                         *
                         * - **default**: The default profile, suitable for most purposes.
                         * - **language**: A profile to search for items about natural languages.
                         *
                         * Defaults to `default`.
                         */
                        gwbsprofile?: "default" | "language";
                    }

                    /**
                     * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                     */
                    interface WikiLambdaFnSearch extends SetNotificationTimestamp {
                        generator?: "wikilambdafn_search";
                        /**
                         * The ZFunction ID to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_zfunction_id?: string;
                        /**
                         * The type of ZObject referenced by the ZFunction to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_type?: string;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdafn_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdafn_continue?: string;
                    }

                    /**
                     * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                     */
                    interface WikiLambdaLoadZObjects extends SetNotificationTimestamp {
                        generator?: "wikilambdaload_zobjects";
                        /**
                         * The ZObject ZIDs to fetch.
                         */
                        gwikilambdaload_zids: string | string[];
                        /**
                         * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                         */
                        gwikilambdaload_revisions?: string | string[];
                        /**
                         * The MediaWiki language code in which to return all the ZObject labels.
                         */
                        gwikilambdaload_language?: string;
                        /**
                         * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                         */
                        gwikilambdaload_get_dependencies?: boolean;
                    }

                    /**
                     * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                     */
                    interface WikiLambdaSearchLabels extends SetNotificationTimestamp {
                        generator?: "wikilambdasearch_labels";
                        /**
                         * The search term
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdasearch_search?: string;
                        /**
                         * The MediaWiki language code in which to search
                         */
                        gwikilambdasearch_language: string;
                        /**
                         * Whether to search only in the given language and not its fallback languages
                         */
                        gwikilambdasearch_nofallback?: boolean;
                        /**
                         * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                         */
                        gwikilambdasearch_exact?: boolean;
                        /**
                         * Restrict matches to a specific type of ZObject.
                         */
                        gwikilambdasearch_type?: string;
                        /**
                         * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                         */
                        gwikilambdasearch_return_type?: string;
                        /**
                         * Restrict return type to be strictly the given one, excluding generic ZObject.
                         */
                        gwikilambdasearch_strict_return_type?: boolean;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdasearch_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdasearch_continue?: string;
                    }
                }

                namespace TemplateData.Generator {
                    /**
                     * Enumerate all categories.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                     */
                    interface AllCategories extends TemplateData {
                        generator?: "allcategories";
                        /**
                         * The category to start enumerating from.
                         */
                        gacfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaccontinue?: string;
                        /**
                         * The category to stop enumerating at.
                         */
                        gacto?: string;
                        /**
                         * Search for all category titles that begin with this value.
                         */
                        gacprefix?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gacdir?: "ascending" | "descending";
                        /**
                         * Only return categories with at least this many members.
                         */
                        gacmin?: number;
                        /**
                         * Only return categories with at most this many members.
                         */
                        gacmax?: number;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gaclimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **size**: Adds number of pages in the category.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         *
                         * Defaults to an empty string.
                         */
                        gacprop?: OneOrMore<"hidden" | "size">;
                    }

                    /**
                     * List all deleted revisions by a user or in a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                     */
                    interface AllDeletedRevisions extends TemplateData {
                        generator?: "alldeletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gadrprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gadrslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gadrcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                         */
                        gadrlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gadrparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gadrsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                         *
                         * @deprecated
                         */
                        gadrdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `adrdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gadrcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadruser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadrnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gadrstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        gadrend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                         * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                         *
                         * Defaults to `older`.
                         */
                        gadrdir?: "newer" | "older";
                        /**
                         * Start listing at this title.
                         */
                        gadrfrom?: string;
                        /**
                         * Stop listing at this title.
                         */
                        gadrto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gadrprefix?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gadrexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gadrtag?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gadrcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        gadrgeneratetitles?: boolean;
                    }

                    /**
                     * List all file usages, including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                     */
                    interface AllFileUsages extends TemplateData {
                        generator?: "allfileusages";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gafcontinue?: string;
                        /**
                         * The title of the file to start enumerating from.
                         */
                        gaffrom?: string;
                        /**
                         * The title of the file to stop enumerating at.
                         */
                        gafto?: string;
                        /**
                         * Search for all file titles that begin with this value.
                         */
                        gafprefix?: string;
                        /**
                         * Only show distinct file titles. Cannot be used with afprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gafunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                         * - **title**: Adds the title of the file.
                         *
                         * Defaults to `title`.
                         */
                        gafprop?: OneOrMore<"ids" | "title">;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gaflimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gafdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all images sequentially.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                     */
                    interface AllImages extends TemplateData {
                        generator?: "allimages";
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `name`.
                         */
                        gaisort?: "name" | "timestamp";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gaidir?: "ascending" | "descending" | "newer" | "older";
                        /**
                         * The image title to start enumerating from. Can only be used with aisort=name.
                         */
                        gaifrom?: string;
                        /**
                         * The image title to stop enumerating at. Can only be used with aisort=name.
                         */
                        gaito?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaicontinue?: string;
                        /**
                         * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                         */
                        gaistart?: string;
                        /**
                         * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                         */
                        gaiend?: string;
                        /**
                         * Which file information to get:
                         *
                         * - **timestamp**: Adds timestamp for the uploaded version.
                         * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                         * - **dimensions**: Alias for size.
                         * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                         *
                         * Defaults to `timestamp` and `url`.
                         */
                        gaiprop?: OneOrMore<
                            | "badfile"
                            | "bitdepth"
                            | "canonicaltitle"
                            | "comment"
                            | "commonmetadata"
                            | "dimensions"
                            | "extmetadata"
                            | "mediatype"
                            | "metadata"
                            | "mime"
                            | "parsedcomment"
                            | "sha1"
                            | "size"
                            | "timestamp"
                            | "url"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Search for all image titles that begin with this value. Can only be used with aisort=name.
                         */
                        gaiprefix?: string;
                        /**
                         * Limit to images with at least this many bytes.
                         */
                        gaiminsize?: number;
                        /**
                         * Limit to images with at most this many bytes.
                         */
                        gaimaxsize?: number;
                        /**
                         * SHA1 hash of image. Overrides aisha1base36.
                         */
                        gaisha1?: string;
                        /**
                         * SHA1 hash of image in base 36 (used in MediaWiki).
                         */
                        gaisha1base36?: string;
                        /**
                         * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                         */
                        gaiuser?: string;
                        /**
                         * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                         *
                         * Defaults to `all`.
                         */
                        gaifilterbots?: "all" | "bots" | "nobots";
                        /**
                         * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                         */
                        gaimime?: string | string[];
                        /**
                         * How many images in total to return.
                         *
                         * Defaults to 10.
                         */
                        gailimit?: Limit;
                    }

                    /**
                     * Enumerate all links that point to a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                     */
                    interface AllLinks extends TemplateData {
                        generator?: "alllinks";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        galcontinue?: string;
                        /**
                         * The title of the link to start enumerating from.
                         */
                        galfrom?: string;
                        /**
                         * The title of the link to stop enumerating at.
                         */
                        galto?: string;
                        /**
                         * Search for all linked titles that begin with this value.
                         */
                        galprefix?: string;
                        /**
                         * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        galunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                         * - **title**: Adds the title of the link.
                         *
                         * Defaults to `title`.
                         */
                        galprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        galnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gallimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        galdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all pages sequentially in a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                     */
                    interface AllPages extends TemplateData {
                        generator?: "allpages";
                        /**
                         * The page title to start enumerating from.
                         */
                        gapfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gapcontinue?: string;
                        /**
                         * The page title to stop enumerating at.
                         */
                        gapto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gapprefix?: string;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gapnamespace?: number;
                        /**
                         * Which pages to list.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                        /**
                         * Limit to pages with at least this many bytes.
                         */
                        gapminsize?: number;
                        /**
                         * Limit to pages with at most this many bytes.
                         */
                        gapmaxsize?: number;
                        /**
                         * Limit to protected pages only.
                         */
                        gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                        /**
                         * Filter protections based on protection level (must be used with apprtype= parameter).
                         */
                        gapprlevel?: string | string[];
                        /**
                         * Filter protections based on cascadingness (ignored when apprtype isn't set).
                         *
                         * Defaults to `all`.
                         */
                        gapprfiltercascade?: "all" | "cascading" | "noncascading";
                        /**
                         * Which protection expiry to filter the page on:
                         *
                         * - **indefinite**: Get only pages with indefinite protection expiry.
                         * - **definite**: Get only pages with a definite (specific) protection expiry.
                         * - **all**: Get pages with any protections expiry.
                         *
                         * Defaults to `all`.
                         */
                        gapprexpiry?: "all" | "definite" | "indefinite";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gaplimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gapdir?: "ascending" | "descending";
                    }

                    /**
                     * List all redirects to a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                     */
                    interface AllRedirects extends TemplateData {
                        generator?: "allredirects";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garcontinue?: string;
                        /**
                         * The title of the redirect to start enumerating from.
                         */
                        garfrom?: string;
                        /**
                         * The title of the redirect to stop enumerating at.
                         */
                        garto?: string;
                        /**
                         * Search for all target pages that begin with this value.
                         */
                        garprefix?: string;
                        /**
                         * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        garunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                         * - **title**: Adds the title of the redirect.
                         * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                         * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                         *
                         * Defaults to `title`.
                         */
                        garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        garnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        garlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gardir?: "ascending" | "descending";
                    }

                    /**
                     * List all revisions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                     */
                    interface AllRevisions extends TemplateData {
                        generator?: "allrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        garvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        garvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `garvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                         */
                        garvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        garvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        garvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                         *
                         * @deprecated
                         */
                        garvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `arvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        garvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         */
                        garvuser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        garvnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        garvstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        garvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                         * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                         *
                         * Defaults to `older`.
                         */
                        garvdir?: "newer" | "older";
                        /**
                         * Don't list revisions by this user.
                         */
                        garvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garvcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        garvgeneratetitles?: boolean;
                    }

                    /**
                     * List all transclusions (pages embedded using {{x}}), including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                     */
                    interface AllTransclusions extends TemplateData {
                        generator?: "alltransclusions";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gatcontinue?: string;
                        /**
                         * The title of the transclusion to start enumerating from.
                         */
                        gatfrom?: string;
                        /**
                         * The title of the transclusion to stop enumerating at.
                         */
                        gatto?: string;
                        /**
                         * Search for all transcluded titles that begin with this value.
                         */
                        gatprefix?: string;
                        /**
                         * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gatunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                         * - **title**: Adds the title of the transclusion.
                         *
                         * Defaults to `title`.
                         */
                        gatprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 10.
                         */
                        gatnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gatlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gatdir?: "ascending" | "descending";
                    }

                    /**
                     * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                     */
                    interface AutomaticTranslationDenseLanguages extends TemplateData {
                        "generator"?: "automatictranslationdenselanguages";
                        /**
                         * The Wikidata ID.
                         */
                        "gqid": string;
                        /**
                         * A boolean value indicating whether the section titles should be included in the response.
                         */
                        "gsection-titles"?: boolean;
                    }

                    /**
                     * Find all pages that link to the given page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                     */
                    interface Backlinks extends TemplateData {
                        generator?: "backlinks";
                        /**
                         * Title to search. Cannot be used together with `blpageid`.
                         */
                        gbltitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with `bltitle`.
                         */
                        gblpageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gblcontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        gblnamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gbldir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        gblfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        gbllimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        gblredirect?: boolean;
                    }

                    /**
                     * List all categories the pages belong to.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                     */
                    interface Categories extends TemplateData {
                        generator?: "categories";
                        /**
                         * Which additional properties to get for each category:
                         *
                         * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                         * - **timestamp**: Adds timestamp of when the category was added.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         */
                        gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                        /**
                         * Which kind of categories to show.
                         */
                        gclshow?: OneOrMore<Toggle<"hidden">>;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gcllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gclcontinue?: string;
                        /**
                         * Only list these categories. Useful for checking whether a certain page is in a certain category.
                         */
                        gclcategories?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gcldir?: "ascending" | "descending";
                    }

                    /**
                     * List all pages in a given category.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                     */
                    interface CategoryMembers extends TemplateData {
                        generator?: "categorymembers";
                        /**
                         * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                         */
                        gcmtitle?: string;
                        /**
                         * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                         */
                        gcmpageid?: number;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                         * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                         * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                         * - **timestamp**: Adds the timestamp of when the page was included.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gcmprop?: OneOrMore<
                            "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                        >;
                        /**
                         * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gcmnamespace?: number | number[] | "*";
                        /**
                         * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                         *
                         * Defaults to `page`, `subcat`, and `file`.
                         */
                        gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gcmcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcmlimit?: Limit;
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `sortkey`.
                         */
                        gcmsort?: "sortkey" | "timestamp";
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gcmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                        /**
                         * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                         */
                        gcmstart?: string;
                        /**
                         * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                         */
                        gcmend?: string;
                        /**
                         * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmstarthexsortkey?: string;
                        /**
                         * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmendhexsortkey?: string;
                        /**
                         * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                         */
                        gcmstartsortkeyprefix?: string;
                        /**
                         * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                         */
                        gcmendsortkeyprefix?: string;
                        /**
                         * Use cmstarthexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmstartsortkey?: string;
                        /**
                         * Use cmendhexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmendsortkey?: string;
                    }

                    /**
                     * Enumerate all pages that have custom review configurations.
                     */
                    interface Configuredpages extends TemplateData {
                        generator?: "configuredpages";
                        /**
                         * Start listing at this page ID.
                         */
                        gcpstart?: number;
                        /**
                         * Stop listing at this page ID.
                         */
                        gcpend?: number;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gcpdir?: "newer" | "older";
                        /**
                         * The namespaces to enumerate.
                         */
                        gcpnamespace?: number | number[] | "*";
                        /**
                         * The default page view version.
                         */
                        gcpdefault?: "latest" | "stable";
                        /**
                         * Review/autoreview restriction level.
                         */
                        gcpautoreview?: "none" | "sysop";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcplimit?: Limit;
                    }

                    /**
                     * Query Content Translation database for translations.
                     */
                    interface ContentTranslation extends TemplateData {
                        generator?: "contenttranslation";
                        /**
                         * Translation ID.
                         */
                        gtranslationid?: string;
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * The title of the source page.
                         */
                        gsourcetitle?: string;
                        /**
                         * The title of the source section (optional).
                         */
                        gsourcesectiontitle?: string;
                        /**
                         * The maximum number of translations to fetch.
                         *
                         * Defaults to 100.
                         */
                        glimit?: Limit;
                        /**
                         * Offset into result set (optional).
                         */
                        goffset?: string;
                        /**
                         * State of the translation.
                         */
                        gtype?: "draft" | "published";
                        /**
                         * The usecase for which the translations are being fetched (optional).
                         */
                        gusecase?:
                            | "desktop-editor-draft"
                            | "translation-corpora-units"
                            | "unified-dashboard";
                    }

                    /**
                     * Get suggestion lists for Content Translation.
                     */
                    interface ContentTranslationSuggestions extends TemplateData {
                        generator?: "contenttranslationsuggestions";
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * Return suggestions only from a particular list
                         */
                        glistid?: string;
                        /**
                         * The maximum number of translation suggestions to fetch.
                         *
                         * Defaults to 10.
                         */
                        glimit?: Limit;
                        /**
                         * Offset for paginated results.
                         */
                        goffset?: string;
                        /**
                         * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                         */
                        gseed?: number;
                    }

                    /**
                     * Get deleted revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                     * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                     */
                    interface DeletedRevisions extends TemplateData {
                        generator?: "deletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gdrvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gdrvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gdrvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                         */
                        gdrvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gdrvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gdrvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                         *
                         * @deprecated
                         */
                        gdrvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `drvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gdrvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                         */
                        gdrvstart?: string;
                        /**
                         * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                         */
                        gdrvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                         * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                         *
                         * Defaults to `older`.
                         */
                        gdrvdir?: "newer" | "older";
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gdrvtag?: string;
                        /**
                         * Only list revisions by this user.
                         */
                        gdrvuser?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gdrvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdrvcontinue?: string;
                    }

                    /**
                     * List all files that are duplicates of the given files based on hash values.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                     */
                    interface DuplicateFiles extends TemplateData {
                        generator?: "duplicatefiles";
                        /**
                         * How many duplicate files to return.
                         *
                         * Defaults to 10.
                         */
                        gdflimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdfcontinue?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gdfdir?: "ascending" | "descending";
                        /**
                         * Look only for files in the local repository.
                         */
                        gdflocalonly?: boolean;
                    }

                    /**
                     * Find all pages that embed (transclude) the given title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                     */
                    interface Embeddedin extends TemplateData {
                        generator?: "embeddedin";
                        /**
                         * Title to search. Cannot be used together with eipageid.
                         */
                        geititle?: string;
                        /**
                         * Page ID to search. Cannot be used together with eititle.
                         */
                        geipageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geicontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        geinamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        geidir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        geifilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        geilimit?: Limit;
                    }

                    /**
                     * Enumerate pages that contain a given URL.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                     */
                    interface ExtUrlUsage extends TemplateData {
                        generator?: "exturlusage";
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the ID of page.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **url**: Adds the URL used in the page.
                         *
                         * Defaults to `ids`, `title`, and `url`.
                         */
                        geuprop?: OneOrMore<"ids" | "title" | "url">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geucontinue?: string;
                        /**
                         * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                         *
                         * Defaults to an empty string.
                         */
                        geuprotocol?:
                            | ""
                            | "bitcoin"
                            | "ftp"
                            | "ftps"
                            | "geo"
                            | "git"
                            | "gopher"
                            | "http"
                            | "https"
                            | "irc"
                            | "ircs"
                            | "magnet"
                            | "mailto"
                            | "matrix"
                            | "mms"
                            | "news"
                            | "nntp"
                            | "redis"
                            | "sftp"
                            | "sip"
                            | "sips"
                            | "sms"
                            | "ssh"
                            | "svn"
                            | "tel"
                            | "telnet"
                            | "urn"
                            | "worldwind"
                            | "xmpp";
                        /**
                         * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                         */
                        geuquery?: string;
                        /**
                         * The page namespaces to enumerate.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        geunamespace?: number | number[] | "*";
                        /**
                         * How many pages to return.
                         *
                         * Defaults to 10.
                         */
                        geulimit?: Limit;
                        /**
                         * Expand protocol-relative URLs with the canonical protocol.
                         *
                         * @deprecated
                         */
                        geuexpandurl?: boolean;
                    }

                    /**
                     * Find all pages that use the given files.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                     */
                    interface FileUsage extends TemplateData {
                        generator?: "fileusage";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gfunamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gfushow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gfulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gfucontinue?: string;
                    }

                    /**
                     * Returns pages having coordinates that are located in a certain area.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                     */
                    interface GeoSearch extends TemplateData {
                        generator?: "geosearch";
                        /**
                         * Coordinate around which to search.
                         *
                         * Format: Latitude and longitude separated by pipe (`|`).
                         */
                        ggscoord?: string;
                        /**
                         * Title of page around which to search.
                         */
                        ggspage?: string;
                        /**
                         * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                         */
                        ggsbbox?: string;
                        /**
                         * Search radius in meters.
                         *
                         * Defaults to 500.
                         */
                        ggsradius?: number;
                        /**
                         * Restrict search to objects no larger than this, in meters.
                         */
                        ggsmaxdim?: number;
                        /**
                         * Set the sort order of returned results.
                         *
                         * - **distance**: Rank pages by their distance to the center.
                         * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                         *
                         * Defaults to `distance`.
                         */
                        ggssort?: "distance" | "relevance";
                        /**
                         * Maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        ggslimit?: Limit;
                        /**
                         * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `earth`.
                         */
                        ggsglobe?: "earth";
                        /**
                         * Namespaces to search.
                         *
                         * Defaults to 0.
                         */
                        ggsnamespace?: number | number[] | "*";
                        /**
                         * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                         *
                         * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                         * - **name**: Name of the object.
                         * - **dim**: Approximate size of the object in meters.
                         * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                         * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                         * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `globe`.
                         */
                        ggsprop?: OneOrMore<
                            "country" | "dim" | "globe" | "name" | "region" | "type"
                        >;
                        /**
                         * Which kind of coordinates to return.
                         *
                         * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                         * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                         * - **all**: Return both primary and secondary coordinates.
                         *
                         * Defaults to `primary`.
                         */
                        ggsprimary?: "all" | "primary" | "secondary";
                        /**
                         * Whether debug information should be returned.
                         */
                        ggsdebug?: boolean;
                    }

                    /**
                     * Get task recommendations suitable for newcomers.
                     *
                     * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                     */
                    interface GrowthTasks extends TemplateData {
                        generator?: "growthtasks";
                        /**
                         * Task types to limit results to. Leave empty to receive all suggestions.
                         *
                         * - **copyedit**: Copyedit
                         * - **expand**: Expand short articles
                         * - **links**: Add links between articles
                         * - **references**: Find references
                         * - **update**: Update articles
                         * - **link-recommendation**: Add links between articles
                         */
                        ggttasktypes?: OneOrMore<
                            | "copyedit"
                            | "expand"
                            | "image-recommendation"
                            | "link-recommendation"
                            | "links"
                            | "references"
                            | "section-image-recommendation"
                            | "update"
                        >;
                        /**
                         * Article topics to prefer in task suggestions.
                         *
                         * - **architecture**: Architecture
                         * - **art**: Art
                         * - **comics-and-anime**: Comics and anime
                         * - **entertainment**: Entertainment
                         * - **fashion**: Fashion
                         * - **literature**: Literature
                         * - **music**: Music
                         * - **performing-arts**: Performing arts
                         * - **sports**: Sports
                         * - **tv-and-film**: TV and film
                         * - **video-games**: Video games
                         * - **biography**: Biography (all)
                         * - **women**: Biography (women)
                         * - **business-and-economics**: Business and economics
                         * - **education**: Education
                         * - **food-and-drink**: Food and drink
                         * - **history**: History
                         * - **military-and-warfare**: Military and warfare
                         * - **philosophy-and-religion**: Philosophy and religion
                         * - **politics-and-government**: Politics and government
                         * - **society**: Society
                         * - **transportation**: Transportation
                         * - **biology**: Biology
                         * - **chemistry**: Chemistry
                         * - **computers-and-internet**: Computers and internet
                         * - **earth-and-environment**: Earth and environment
                         * - **engineering**: Engineering
                         * - **general-science**: General science
                         * - **mathematics**: Mathematics
                         * - **medicine-and-health**: Medicine and health
                         * - **physics**: Physics
                         * - **technology**: Technology
                         * - **africa**: Africa
                         * - **asia**: Asia
                         * - **central-america**: Central America
                         * - **europe**: Europe
                         * - **north-america**: North America
                         * - **oceania**: Oceania
                         * - **south-america**: South America
                         */
                        ggttopics?: OneOrMore<
                            | "africa"
                            | "architecture"
                            | "art"
                            | "asia"
                            | "biography"
                            | "biology"
                            | "business-and-economics"
                            | "central-america"
                            | "chemistry"
                            | "comics-and-anime"
                            | "computers-and-internet"
                            | "earth-and-environment"
                            | "education"
                            | "engineering"
                            | "entertainment"
                            | "europe"
                            | "fashion"
                            | "food-and-drink"
                            | "general-science"
                            | "history"
                            | "literature"
                            | "mathematics"
                            | "medicine-and-health"
                            | "military-and-warfare"
                            | "music"
                            | "north-america"
                            | "oceania"
                            | "performing-arts"
                            | "philosophy-and-religion"
                            | "physics"
                            | "politics-and-government"
                            | "society"
                            | "south-america"
                            | "sports"
                            | "technology"
                            | "transportation"
                            | "tv-and-film"
                            | "video-games"
                            | "women"
                        >;
                        /**
                         * Matching mode for topics.
                         */
                        ggttopicsmode?: "AND" | "OR";
                        /**
                         * Maximum number of task suggestions to return.
                         */
                        ggtlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        ggtoffset?: number;
                        /**
                         * Add debug data to the output.
                         */
                        ggtdebug?: boolean;
                        /**
                         * Page IDs to exclude from the query.
                         */
                        ggtexcludepageids?: number | number[];
                    }

                    /**
                     * Returns all files contained on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                     */
                    interface Images extends TemplateData {
                        generator?: "images";
                        /**
                         * How many files to return.
                         *
                         * Defaults to 10.
                         */
                        gimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gimcontinue?: string;
                        /**
                         * Only list these files. Useful for checking whether a certain page has a certain file.
                         */
                        gimimages?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gimdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that use the given image title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                     */
                    interface ImageUsage extends TemplateData {
                        generator?: "imageusage";
                        /**
                         * Title to search. Cannot be used together with iupageid.
                         */
                        giutitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with iutitle.
                         */
                        giupageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giucontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        giunamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giudir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        giufilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        giulimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        giuredirect?: boolean;
                    }

                    /**
                     * Find all pages that link to the given interwiki link.
                     *
                     * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                     */
                    // tslint:disable-next-line:interface-name
                    interface IWBacklinks extends TemplateData {
                        generator?: "iwbacklinks";
                        /**
                         * Prefix for the interwiki.
                         */
                        giwblprefix?: string;
                        /**
                         * Interwiki link to search for. Must be used with `iwblblprefix`.
                         */
                        giwbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giwblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        giwbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **iwprefix**: Adds the prefix of the interwiki.
                         * - **iwtitle**: Adds the title of the interwiki.
                         *
                         * Defaults to an empty string.
                         */
                        giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giwbldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given language link.
                     *
                     * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                     *
                     * Note that this may not consider language links added by extensions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                     */
                    interface LangBacklinks extends TemplateData {
                        generator?: "langbacklinks";
                        /**
                         * Language for the language link.
                         */
                        glbllang?: string;
                        /**
                         * Language link to search for. Must be used with lbllang.
                         */
                        glbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        glbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **lllang**: Adds the language code of the language link.
                         * - **lltitle**: Adds the title of the language link.
                         *
                         * Defaults to an empty string.
                         */
                        glblprop?: OneOrMore<"lllang" | "lltitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        glbldir?: "ascending" | "descending";
                    }

                    /**
                     * Returns all links from the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                     */
                    interface Links extends TemplateData {
                        generator?: "links";
                        /**
                         * Show links in these namespaces only.
                         */
                        gplnamespace?: number | number[] | "*";
                        /**
                         * How many links to return.
                         *
                         * Defaults to 10.
                         */
                        gpllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gplcontinue?: string;
                        /**
                         * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                         */
                        gpltitles?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gpldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                     */
                    interface LinksHere extends TemplateData {
                        generator?: "linkshere";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        glhnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        glhshow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        glhlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glhcontinue?: string;
                    }

                    /**
                     * Query MessageCollection about translations.
                     */
                    interface MessageCollection extends TemplateData {
                        generator?: "messagecollection";
                        /**
                         * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                         */
                        gmcgroup: string;
                        /**
                         * Language code.
                         *
                         * Defaults to `en`.
                         */
                        gmclanguage?: string;
                        /**
                         * How many messages to show (after filtering).
                         *
                         * Defaults to 500.
                         */
                        gmclimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to an empty string.
                         */
                        gmcoffset?: string;
                        /**
                         * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                         *
                         * - **fuzzy**: Messages with fuzzy tag.
                         * - **optional**: Messages which should be translated only if changes are necessary.
                         * - **ignored**: Messages which are never translated.
                         * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                         * - **translated**: Messages which have a translation which is not fuzzy.
                         * - **changed**: Messages which have been translated or changed since last export.
                         * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                         * - **last-translator:N**: Messages where the user number `N` is the last translator.
                         *
                         * Defaults to `!optional` and `!ignored`.
                         */
                        gmcfilter?: string | string[];
                        /**
                         * Which properties to get:
                         *
                         * - **definition**: Message definition.
                         * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                         * - **tags**: Message tags, like optional, ignored and fuzzy.
                         * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                         * - **revision**: Deprecated. Use mcprop=properties.
                         *
                         * Defaults to `definition` and `translation`.
                         */
                        gmcprop?: OneOrMore<
                            "definition" | "properties" | "revision" | "tags" | "translation"
                        >;
                    }

                    /**
                     * Lists the most viewed pages (based on last day's pageview count).
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                     */
                    interface MostViewed extends TemplateData {
                        generator?: "mostviewed";
                        /**
                         * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                         *
                         * - **pageviews**: Plain pageviews.
                         *
                         * Defaults to `pageviews`.
                         */
                        gpvimmetric?: "pageviews";
                        /**
                         * The number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpvimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpvimoffset?: number;
                    }

                    /**
                     * Enumerates pages that have changes pending review.
                     */
                    interface Oldreviewedpages extends TemplateData {
                        generator?: "oldreviewedpages";
                        /**
                         * Start listing at this timestamp.
                         */
                        gorstart?: string;
                        /**
                         * Stop listing at this timestamp.
                         */
                        gorend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gordir?: "newer" | "older";
                        /**
                         * Maximum character count change size.
                         */
                        gormaxsize?: number;
                        /**
                         * How to filter for pages on your watchlist.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterwatched?: "all" | "watched";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gornamespace?: number | number[] | "*";
                        /**
                         * Show pages only in the given category.
                         */
                        gorcategory?: string;
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gorlimit?: Limit;
                    }

                    /**
                     * List all pages using a given page property.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                     */
                    interface PagesWithProp extends TemplateData {
                        generator?: "pageswithprop";
                        /**
                         * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                         */
                        gpwppropname: string;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **value**: Adds the value of the page property.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gpwpcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpwplimit?: Limit;
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gpwpdir?: "ascending" | "descending";
                    }

                    /**
                     * Perform a prefix search for page titles.
                     *
                     * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                     */
                    interface PrefixSearch extends TemplateData {
                        generator?: "prefixsearch";
                        /**
                         * Search string.
                         */
                        gpssearch: string;
                        /**
                         * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                         *
                         * Defaults to 0.
                         */
                        gpsnamespace?: number | number[] | "*";
                        /**
                         * Maximum number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gpslimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpsoffset?: number;
                        /**
                         * Search profile to use.
                         *
                         * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                         * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                         * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                         * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                         * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gpsprofile?:
                            | "classic"
                            | "engine_autoselect"
                            | "fast-fuzzy"
                            | "fuzzy"
                            | "fuzzy-subphrases"
                            | "normal"
                            | "normal-subphrases"
                            | "strict";
                    }

                    /**
                     * List all pages associated with one or more projects.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                     */
                    interface ProjectPages extends TemplateData {
                        generator?: "projectpages";
                        /**
                         * Also return assessments for the pages returned.
                         */
                        gwppassessments?: boolean;
                        /**
                         * The projects to list pages for. If this parameter is omitted, all projects will be included.
                         */
                        gwppprojects: string | string[];
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gwpplimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwppcontinue?: string;
                    }

                    /**
                     * List the pages in a given index
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                     */
                    interface ProofreadPagesInIndex extends TemplateData {
                        generator?: "proofreadpagesinindex";
                        /**
                         * Which properties to get for each page
                         *
                         * - **ids**: Return the page ID of each page linked to the index page
                         * - **title**: Return the page title of each page linked to the index page
                         * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                         * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gprppiiprop?: OneOrMore<
                            "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                        >;
                        /**
                         * The title of the Index page to get pages for
                         */
                        gprppiititle?: string;
                        /**
                         * The page ID of the Index page to get pages for
                         */
                        gprppiipageid?: number;
                    }

                    /**
                     * List all titles protected from creation.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                     */
                    interface ProtectedTitles extends TemplateData {
                        generator?: "protectedtitles";
                        /**
                         * Only list titles in these namespaces.
                         */
                        gptnamespace?: number | number[] | "*";
                        /**
                         * Only list titles with these protection levels.
                         */
                        gptlevel?: string | string[];
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gptlimit?: Limit;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                         * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                         *
                         * Defaults to `older`.
                         */
                        gptdir?: "newer" | "older";
                        /**
                         * Start listing at this protection timestamp.
                         */
                        gptstart?: string;
                        /**
                         * Stop listing at this protection timestamp.
                         */
                        gptend?: string;
                        /**
                         * Which properties to get:
                         *
                         * - **timestamp**: Adds the timestamp of when protection was added.
                         * - **user**: Adds the user that added the protection.
                         * - **userid**: Adds the user ID that added the protection.
                         * - **comment**: Adds the comment for the protection.
                         * - **parsedcomment**: Adds the parsed comment for the protection.
                         * - **expiry**: Adds the timestamp of when the protection will be lifted.
                         * - **level**: Adds the protection level.
                         *
                         * Defaults to `timestamp` and `level`.
                         */
                        gptprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "level"
                            | "parsedcomment"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gptcontinue?: string;
                    }

                    /**
                     * Get a list provided by a QueryPage-based special page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                     */
                    interface QueryPage extends TemplateData {
                        generator?: "querypage";
                        /**
                         * The name of the special page. Note, this is case-sensitive.
                         */
                        gqppage: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gqpoffset?: number;
                        /**
                         * Number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gqplimit?: Limit;
                    }

                    /**
                     * Get a set of random pages.
                     *
                     * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                     */
                    interface Random extends TemplateData {
                        generator?: "random";
                        /**
                         * Return pages in these namespaces only.
                         */
                        grnnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `nonredirects`.
                         */
                        grnfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Use `rnfilterredir=redirects` instead.
                         *
                         * @deprecated
                         */
                        grnredirect?: boolean;
                        /**
                         * Limit how many random pages will be returned.
                         *
                         * Defaults to 1.
                         */
                        grnlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grncontinue?: string;
                    }

                    /**
                     * List the pages of a certain list.
                     *
                     * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface ReadingListEntries extends TemplateData {
                        generator?: "readinglistentries";
                        /**
                         * The list IDs for which to return pages.
                         */
                        grlelists?: number | number[];
                        /**
                         * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                         */
                        grlechangedsince?: string;
                        /**
                         * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                         *
                         * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                         * - **updated**: Last update timestamp.
                         */
                        grlesort?: "name" | "updated";
                        /**
                         * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                         *
                         * Defaults to `ascending`.
                         */
                        grledir?: "ascending" | "descending";
                        /**
                         * Number of result items to return.
                         *
                         * Defaults to 10.
                         */
                        grlelimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grlecontinue?: string;
                    }

                    /**
                     * Enumerate recent changes.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                     */
                    interface RecentChanges extends TemplateData {
                        generator?: "recentchanges";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        grcstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        grcend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                         * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                         *
                         * Defaults to `older`.
                         */
                        grcdir?: "newer" | "older";
                        /**
                         * Filter changes to only these namespaces.
                         */
                        grcnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        grcuser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        grcexcludeuser?: string;
                        /**
                         * Only list changes tagged with this tag.
                         */
                        grctag?: string;
                        /**
                         * Include additional pieces of information:
                         *
                         * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **flags**: Adds flags for the edit.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **title**: Adds the page title of the edit.
                         * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                         * - **sizes**: Adds the new and old page length in bytes.
                         * - **redirect**: Tags edit if page is a redirect.
                         * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                         * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                         * - **tags**: Lists tags for the entry.
                         * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         *
                         * Defaults to `title`, `timestamp`, and `ids`.
                         */
                        grcprop?: OneOrMore<
                            | "comment"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrolled"
                            | "redirect"
                            | "sha1"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                         *
                         * @deprecated
                         */
                        grctoken?: string;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                         */
                        grcshow?: OneOrMore<
                            | Toggle<
                                  | "anon"
                                  | "autopatrolled"
                                  | "bot"
                                  | "minor"
                                  | "oresreview"
                                  | "patrolled"
                                  | "redirect"
                              >
                            | "unpatrolled"
                        >;
                        /**
                         * How many total changes to return.
                         *
                         * Defaults to 10.
                         */
                        grclimit?: Limit;
                        /**
                         * Which types of changes to show.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Only list changes which are the latest revision.
                         */
                        grctoponly?: boolean;
                        /**
                         * Filter entries to those related to a page.
                         */
                        grctitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grccontinue?: string;
                        /**
                         * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                         */
                        grcgeneraterevisions?: boolean;
                        /**
                         * Only list changes that touch the named slot.
                         */
                        grcslot?: "main" | "mediainfo";
                    }

                    /**
                     * Returns all redirects to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                     */
                    interface Redirects extends TemplateData {
                        generator?: "redirects";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each redirect.
                         * - **title**: Title of each redirect.
                         * - **fragment**: Fragment of each redirect, if any.
                         *
                         * Defaults to `pageid` and `title`.
                         */
                        grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        grdnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **fragment**: Only show redirects with a fragment.
                         * - **!fragment**: Only show redirects without a fragment.
                         */
                        grdshow?: OneOrMore<Toggle<"fragment">>;
                        /**
                         * How many redirects to return.
                         *
                         * Defaults to 10.
                         */
                        grdlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grdcontinue?: string;
                    }

                    /**
                     * Get revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get data about a set of pages (last revision), by setting titles or pageids.
                     * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                     * - Get data about a set of revisions by setting their IDs with revids.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                     */
                    interface Revisions extends TemplateData {
                        generator?: "revisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        grvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flagged"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        grvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `grvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                         */
                        grvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        grvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        grvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                         *
                         * @deprecated
                         */
                        grvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `rvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        grvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvstartid?: number;
                        /**
                         * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvendid?: number;
                        /**
                         * From which revision timestamp to start enumeration.
                         */
                        grvstart?: string;
                        /**
                         * Enumerate up to this timestamp.
                         */
                        grvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                         * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                         *
                         * Defaults to `older`.
                         */
                        grvdir?: "newer" | "older";
                        /**
                         * Only include revisions made by user.
                         */
                        grvuser?: string;
                        /**
                         * Exclude revisions made by user.
                         */
                        grvexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        grvtag?: string;
                        /**
                         * Which tokens to obtain for each revision.
                         *
                         * @deprecated
                         */
                        grvtoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grvcontinue?: string;
                    }

                    /**
                     * Perform a full text search.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                     */
                    interface Search extends TemplateData {
                        generator?: "search";
                        /**
                         * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                         */
                        gsrsearch: string;
                        /**
                         * Search only within these namespaces.
                         *
                         * Defaults to 0.
                         */
                        gsrnamespace?: number | number[] | "*";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gsrlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gsroffset?: number;
                        /**
                         * Query independent profile to use (affects ranking algorithm).
                         *
                         * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                         * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                         * - **empty**: Ranking based solely on query dependent features (for debug only).
                         * - **wsum_inclinks**: Weighted sum based on incoming links
                         * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                         * - **popular_inclinks_pv**: Ranking based primarily on page views
                         * - **popular_inclinks**: Ranking based primarily on incoming link counts
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gsrqiprofile?: string;
                        /**
                         * Which type of search to perform.
                         */
                        gsrwhat?: "nearmatch" | "text" | "title";
                        /**
                         * Which metadata to return.
                         *
                         * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                         */
                        gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                        /**
                         * Which properties to return:
                         *
                         * - **size**: Adds the size of the page in bytes.
                         * - **wordcount**: Adds the word count of the page.
                         * - **timestamp**: Adds the timestamp of when the page was last edited.
                         * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                         * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                         * - **redirecttitle**: Adds the title of the matching redirect.
                         * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                         * - **sectiontitle**: Adds the title of the matching section.
                         * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                         * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                         * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                         * - **score**: Deprecated. Ignored.
                         * - **hasrelated**: Deprecated. Ignored.
                         * - **extensiondata**: Adds extra data generated by extensions.
                         *
                         * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                         */
                        gsrprop?: OneOrMore<
                            | "categorysnippet"
                            | "extensiondata"
                            | "hasrelated"
                            | "isfilematch"
                            | "redirectsnippet"
                            | "redirecttitle"
                            | "score"
                            | "sectionsnippet"
                            | "sectiontitle"
                            | "size"
                            | "snippet"
                            | "timestamp"
                            | "titlesnippet"
                            | "wordcount"
                        >;
                        /**
                         * Include interwiki results in the search, if available.
                         */
                        gsrinterwiki?: boolean;
                        /**
                         * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                         */
                        gsrenablerewrites?: boolean;
                        /**
                         * Set the sort order of returned results.
                         *
                         * Defaults to `relevance`.
                         */
                        gsrsort?:
                            | "create_timestamp_asc"
                            | "create_timestamp_desc"
                            | "incoming_links_asc"
                            | "incoming_links_desc"
                            | "just_match"
                            | "last_edit_asc"
                            | "last_edit_desc"
                            | "none"
                            | "random"
                            | "relevance"
                            | "user_random";
                    }

                    /**
                     * Returns all pages transcluded on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                     */
                    interface Templates extends TemplateData {
                        generator?: "templates";
                        /**
                         * Show templates in these namespaces only.
                         */
                        gtlnamespace?: number | number[] | "*";
                        /**
                         * How many templates to return.
                         *
                         * Defaults to 10.
                         */
                        gtllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gtlcontinue?: string;
                        /**
                         * Only list these templates. Useful for checking whether a certain page uses a certain template.
                         */
                        gtltemplates?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gtldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that transclude the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                     */
                    interface Transcludedin extends TemplateData {
                        generator?: "transcludedin";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gtinamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gtishow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gtilimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gticontinue?: string;
                    }

                    /**
                     * Enumerates pages that have not been reviewed to a given quality level.
                     */
                    interface Unreviewedpages extends TemplateData {
                        generator?: "unreviewedpages";
                        /**
                         * Start listing at this page title.
                         */
                        gurstart?: string;
                        /**
                         * Stop listing at this page title.
                         */
                        gurend?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gurdir?: "ascending" | "descending";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gurnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gurfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How to filter by quality (0=checked, 1=quality).
                         *
                         * Defaults to 0.
                         */
                        gurfilterlevel?: number;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gurlimit?: Limit;
                    }

                    /**
                     * Get recent changes to pages in the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                     */
                    interface Watchlist extends TemplateData {
                        generator?: "watchlist";
                        /**
                         * Include multiple revisions of the same page within given timeframe.
                         */
                        gwlallrev?: boolean;
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gwlstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        gwlend?: string;
                        /**
                         * Filter changes to only the given namespaces.
                         */
                        gwlnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        gwluser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        gwlexcludeuser?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                         * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                         *
                         * Defaults to `older`.
                         */
                        gwldir?: "newer" | "older";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwllimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **ids**: Adds revision IDs and page IDs.
                         * - **title**: Adds title of the page.
                         * - **flags**: Adds flags for the edit.
                         * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **patrol**: Tags edits that are patrolled.
                         * - **sizes**: Adds the old and new lengths of the page.
                         * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                         * - **loginfo**: Adds log information where appropriate.
                         * - **tags**: Lists tags for the entry.
                         * - **expiry**: Adds the expiry time.
                         *
                         * Defaults to `ids`, `title`, and `flags`.
                         */
                        gwlprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "notificationtimestamp"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrol"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                         */
                        gwlshow?: OneOrMore<
                            Toggle<
                                | "anon"
                                | "autopatrolled"
                                | "bot"
                                | "minor"
                                | "oresreview"
                                | "patrolled"
                                | "unread"
                            >
                        >;
                        /**
                         * Which types of changes to show:
                         *
                         * - **edit**: Regular page edits.
                         * - **new**: Page creations.
                         * - **log**: Log entries.
                         * - **external**: External changes.
                         * - **categorize**: Category membership changes.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Used along with wltoken to access a different user's watchlist.
                         */
                        gwlowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwltoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwlcontinue?: string;
                    }

                    /**
                     * Get all pages on the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                     */
                    interface WatchlistRaw extends TemplateData {
                        generator?: "watchlistraw";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwrcontinue?: string;
                        /**
                         * Only list pages in the given namespaces.
                         */
                        gwrnamespace?: number | number[] | "*";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwrlimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **changed**: Adds timestamp of when the user was last notified about the edit.
                         */
                        gwrprop?: OneOrMore<"changed">;
                        /**
                         * Only list items that meet these criteria.
                         */
                        gwrshow?: OneOrMore<Toggle<"changed">>;
                        /**
                         * Used along with wrtoken to access a different user's watchlist.
                         */
                        gwrowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwrtoken?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gwrdir?: "ascending" | "descending";
                        /**
                         * Title (with namespace prefix) to begin enumerating from.
                         */
                        gwrfromtitle?: string;
                        /**
                         * Title (with namespace prefix) to stop enumerating at.
                         */
                        gwrtotitle?: string;
                    }

                    /**
                     * Returns all pages that use the given entity IDs.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                     */
                    interface WBListEntityUsage extends TemplateData {
                        generator?: "wblistentityusage";
                        /**
                         * Properties to add to the result.
                         *
                         * - **url**: If enabled the url of the entity will be added to the result.
                         */
                        gwbleuprop?: OneOrMore<"url">;
                        /**
                         * Only return entity IDs that used this aspect.
                         *
                         * - **S**: The entity's sitelinks are used
                         * - **L**: The entity's label is used
                         * - **D**: The entity's description is used
                         * - **T**: The title of the local page corresponding to the entity is used
                         * - **C**: Statements from the entity are used
                         * - **X**: All aspects of an entity are or may be used
                         * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                         */
                        gwbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                        /**
                         * Entities that have been used.
                         */
                        gwbleuentities: string | string[];
                        /**
                         * How many entity usages to return.
                         *
                         * Defaults to 10.
                         */
                        gwbleulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwbleucontinue?: string;
                    }

                    /**
                     * Searches for entities using labels and aliases.
                     *
                     * This can be used as a generator for other queries.
                     * Returns the matched term that should be displayed.
                     *
                     * @private
                     */
                    interface WBSearch extends TemplateData {
                        generator?: "wbsearch";
                        /**
                         * Search for this text.
                         */
                        gwbssearch: string;
                        /**
                         * Search in this language.
                         */
                        gwbslanguage?: string;
                        /**
                         * Whether to disable language fallback
                         */
                        gwbsstrictlanguage?: boolean;
                        /**
                         * Search for this type of entity.
                         *
                         * Defaults to `item`.
                         */
                        gwbstype?: string;
                        /**
                         * Maximal number of results
                         *
                         * Defaults to 7.
                         */
                        gwbslimit?: Limit;
                        /**
                         * The search profile to use.
                         *
                         * - **default**: The default profile, suitable for most purposes.
                         * - **language**: A profile to search for items about natural languages.
                         *
                         * Defaults to `default`.
                         */
                        gwbsprofile?: "default" | "language";
                    }

                    /**
                     * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                     */
                    interface WikiLambdaFnSearch extends TemplateData {
                        generator?: "wikilambdafn_search";
                        /**
                         * The ZFunction ID to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_zfunction_id?: string;
                        /**
                         * The type of ZObject referenced by the ZFunction to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_type?: string;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdafn_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdafn_continue?: string;
                    }

                    /**
                     * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                     */
                    interface WikiLambdaLoadZObjects extends TemplateData {
                        generator?: "wikilambdaload_zobjects";
                        /**
                         * The ZObject ZIDs to fetch.
                         */
                        gwikilambdaload_zids: string | string[];
                        /**
                         * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                         */
                        gwikilambdaload_revisions?: string | string[];
                        /**
                         * The MediaWiki language code in which to return all the ZObject labels.
                         */
                        gwikilambdaload_language?: string;
                        /**
                         * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                         */
                        gwikilambdaload_get_dependencies?: boolean;
                    }

                    /**
                     * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                     */
                    interface WikiLambdaSearchLabels extends TemplateData {
                        generator?: "wikilambdasearch_labels";
                        /**
                         * The search term
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdasearch_search?: string;
                        /**
                         * The MediaWiki language code in which to search
                         */
                        gwikilambdasearch_language: string;
                        /**
                         * Whether to search only in the given language and not its fallback languages
                         */
                        gwikilambdasearch_nofallback?: boolean;
                        /**
                         * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                         */
                        gwikilambdasearch_exact?: boolean;
                        /**
                         * Restrict matches to a specific type of ZObject.
                         */
                        gwikilambdasearch_type?: string;
                        /**
                         * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                         */
                        gwikilambdasearch_return_type?: string;
                        /**
                         * Restrict return type to be strictly the given one, excluding generic ZObject.
                         */
                        gwikilambdasearch_strict_return_type?: boolean;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdasearch_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdasearch_continue?: string;
                    }
                }

                namespace Watch.Generator {
                    /**
                     * Enumerate all categories.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allcategories
                     */
                    interface AllCategories extends Watch {
                        generator?: "allcategories";
                        /**
                         * The category to start enumerating from.
                         */
                        gacfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaccontinue?: string;
                        /**
                         * The category to stop enumerating at.
                         */
                        gacto?: string;
                        /**
                         * Search for all category titles that begin with this value.
                         */
                        gacprefix?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gacdir?: "ascending" | "descending";
                        /**
                         * Only return categories with at least this many members.
                         */
                        gacmin?: number;
                        /**
                         * Only return categories with at most this many members.
                         */
                        gacmax?: number;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gaclimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **size**: Adds number of pages in the category.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         *
                         * Defaults to an empty string.
                         */
                        gacprop?: OneOrMore<"hidden" | "size">;
                    }

                    /**
                     * List all deleted revisions by a user or in a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alldeletedrevisions
                     */
                    interface AllDeletedRevisions extends Watch {
                        generator?: "alldeletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gadrprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `adrprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gadrslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gadrcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `adrprop=content`, `adrprop=parsetree`, `adrdiffto` or `adrdifftotext` is used, the limit is 50. If `adrparse` is used, the limit is 1.
                         */
                        gadrlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires adrprop=content).
                         *
                         * @deprecated
                         */
                        gadrgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `adrprop=content`). For performance reasons, if this option is used, `adrlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gadrparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gadrsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `adrdiffto`. If `adrsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `adrlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gadrdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `adrdifftotext`.
                         *
                         * @deprecated
                         */
                        gadrdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `adrdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gadrcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadruser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using `adruser` and `adrnamespace` together may result in fewer than `adrlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gadrnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gadrstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        gadrend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: adrstart has to be before adrend.
                         * - **older**: List newest first (default). Note: adrstart has to be later than adrend.
                         *
                         * Defaults to `older`.
                         */
                        gadrdir?: "newer" | "older";
                        /**
                         * Start listing at this title.
                         */
                        gadrfrom?: string;
                        /**
                         * Stop listing at this title.
                         */
                        gadrto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gadrprefix?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gadrexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gadrtag?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gadrcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        gadrgeneratetitles?: boolean;
                    }

                    /**
                     * List all file usages, including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allfileusages
                     */
                    interface AllFileUsages extends Watch {
                        generator?: "allfileusages";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gafcontinue?: string;
                        /**
                         * The title of the file to start enumerating from.
                         */
                        gaffrom?: string;
                        /**
                         * The title of the file to stop enumerating at.
                         */
                        gafto?: string;
                        /**
                         * Search for all file titles that begin with this value.
                         */
                        gafprefix?: string;
                        /**
                         * Only show distinct file titles. Cannot be used with afprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gafunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page IDs of the using pages (cannot be used with afunique).
                         * - **title**: Adds the title of the file.
                         *
                         * Defaults to `title`.
                         */
                        gafprop?: OneOrMore<"ids" | "title">;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gaflimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gafdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all images sequentially.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allimages
                     */
                    interface AllImages extends Watch {
                        generator?: "allimages";
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `name`.
                         */
                        gaisort?: "name" | "timestamp";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gaidir?: "ascending" | "descending" | "newer" | "older";
                        /**
                         * The image title to start enumerating from. Can only be used with aisort=name.
                         */
                        gaifrom?: string;
                        /**
                         * The image title to stop enumerating at. Can only be used with aisort=name.
                         */
                        gaito?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gaicontinue?: string;
                        /**
                         * The timestamp to start enumerating from. Can only be used with aisort=timestamp.
                         */
                        gaistart?: string;
                        /**
                         * The timestamp to end enumerating. Can only be used with aisort=timestamp.
                         */
                        gaiend?: string;
                        /**
                         * Which file information to get:
                         *
                         * - **timestamp**: Adds timestamp for the uploaded version.
                         * - **user**: Adds the user who uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Add the ID of the user that uploaded each file version. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parse the comment on the version. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **canonicaltitle**: Adds the canonical title of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **url**: Gives URL to the file and the description page. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **size**: Adds the size of the file in bytes and the height, width and page count (if applicable).
                         * - **dimensions**: Alias for size.
                         * - **sha1**: Adds SHA-1 hash for the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mime**: Adds MIME type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **mediatype**: Adds the media type of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **metadata**: Lists Exif metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **commonmetadata**: Lists file format generic metadata for the version of the file. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **extmetadata**: Lists formatted metadata combined from multiple sources. Results are HTML formatted. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **bitdepth**: Adds the bit depth of the version. If the file has been revision deleted, a `filehidden` property will be returned.
                         * - **badfile**: Adds whether the file is on the {@link https://www.mediawiki.org/wiki/MediaWiki:Bad_image_list MediaWiki:Bad image list}
                         *
                         * Defaults to `timestamp` and `url`.
                         */
                        gaiprop?: OneOrMore<
                            | "badfile"
                            | "bitdepth"
                            | "canonicaltitle"
                            | "comment"
                            | "commonmetadata"
                            | "dimensions"
                            | "extmetadata"
                            | "mediatype"
                            | "metadata"
                            | "mime"
                            | "parsedcomment"
                            | "sha1"
                            | "size"
                            | "timestamp"
                            | "url"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Search for all image titles that begin with this value. Can only be used with aisort=name.
                         */
                        gaiprefix?: string;
                        /**
                         * Limit to images with at least this many bytes.
                         */
                        gaiminsize?: number;
                        /**
                         * Limit to images with at most this many bytes.
                         */
                        gaimaxsize?: number;
                        /**
                         * SHA1 hash of image. Overrides aisha1base36.
                         */
                        gaisha1?: string;
                        /**
                         * SHA1 hash of image in base 36 (used in MediaWiki).
                         */
                        gaisha1base36?: string;
                        /**
                         * Only return files where the last version was uploaded by this user. Can only be used with aisort=timestamp. Cannot be used together with aifilterbots.
                         */
                        gaiuser?: string;
                        /**
                         * How to filter files uploaded by bots. Can only be used with aisort=timestamp. Cannot be used together with aiuser.
                         *
                         * Defaults to `all`.
                         */
                        gaifilterbots?: "all" | "bots" | "nobots";
                        /**
                         * Disabled due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}.
                         */
                        gaimime?: string | string[];
                        /**
                         * How many images in total to return.
                         *
                         * Defaults to 10.
                         */
                        gailimit?: Limit;
                    }

                    /**
                     * Enumerate all links that point to a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alllinks
                     */
                    interface AllLinks extends Watch {
                        generator?: "alllinks";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        galcontinue?: string;
                        /**
                         * The title of the link to start enumerating from.
                         */
                        galfrom?: string;
                        /**
                         * The title of the link to stop enumerating at.
                         */
                        galto?: string;
                        /**
                         * Search for all linked titles that begin with this value.
                         */
                        galprefix?: string;
                        /**
                         * Only show distinct linked titles. Cannot be used with `alprop=ids`.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        galunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the linking page (cannot be used with `alunique`).
                         * - **title**: Adds the title of the link.
                         *
                         * Defaults to `title`.
                         */
                        galprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        galnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gallimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        galdir?: "ascending" | "descending";
                    }

                    /**
                     * Enumerate all pages sequentially in a given namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allpages
                     */
                    interface AllPages extends Watch {
                        generator?: "allpages";
                        /**
                         * The page title to start enumerating from.
                         */
                        gapfrom?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gapcontinue?: string;
                        /**
                         * The page title to stop enumerating at.
                         */
                        gapto?: string;
                        /**
                         * Search for all page titles that begin with this value.
                         */
                        gapprefix?: string;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gapnamespace?: number;
                        /**
                         * Which pages to list.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `aplimit` results returned before continuing; in extreme cases, zero results may be returned.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Filter based on whether a page has langlinks. Note that this may not consider langlinks added by extensions.
                         *
                         * Defaults to `all`.
                         */
                        gapfilterlanglinks?: "all" | "withlanglinks" | "withoutlanglinks";
                        /**
                         * Limit to pages with at least this many bytes.
                         */
                        gapminsize?: number;
                        /**
                         * Limit to pages with at most this many bytes.
                         */
                        gapmaxsize?: number;
                        /**
                         * Limit to protected pages only.
                         */
                        gapprtype?: OneOrMore<"edit" | "move" | "upload">;
                        /**
                         * Filter protections based on protection level (must be used with apprtype= parameter).
                         */
                        gapprlevel?: string | string[];
                        /**
                         * Filter protections based on cascadingness (ignored when apprtype isn't set).
                         *
                         * Defaults to `all`.
                         */
                        gapprfiltercascade?: "all" | "cascading" | "noncascading";
                        /**
                         * Which protection expiry to filter the page on:
                         *
                         * - **indefinite**: Get only pages with indefinite protection expiry.
                         * - **definite**: Get only pages with a definite (specific) protection expiry.
                         * - **all**: Get pages with any protections expiry.
                         *
                         * Defaults to `all`.
                         */
                        gapprexpiry?: "all" | "definite" | "indefinite";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gaplimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gapdir?: "ascending" | "descending";
                    }

                    /**
                     * List all redirects to a namespace.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allredirects
                     */
                    interface AllRedirects extends Watch {
                        generator?: "allredirects";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garcontinue?: string;
                        /**
                         * The title of the redirect to start enumerating from.
                         */
                        garfrom?: string;
                        /**
                         * The title of the redirect to stop enumerating at.
                         */
                        garto?: string;
                        /**
                         * Search for all target pages that begin with this value.
                         */
                        garprefix?: string;
                        /**
                         * Only show distinct target pages. Cannot be used with arprop=ids|fragment|interwiki.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        garunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the redirecting page (cannot be used with `arunique`).
                         * - **title**: Adds the title of the redirect.
                         * - **fragment**: Adds the fragment from the redirect, if any (cannot be used with `arunique`).
                         * - **interwiki**: Adds the interwiki prefix from the redirect, if any (cannot be used with `arunique`).
                         *
                         * Defaults to `title`.
                         */
                        garprop?: OneOrMore<"fragment" | "ids" | "interwiki" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 0.
                         */
                        garnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        garlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gardir?: "ascending" | "descending";
                    }

                    /**
                     * List all revisions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Allrevisions
                     */
                    interface AllRevisions extends Watch {
                        generator?: "allrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        garvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `arvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        garvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `garvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `arvprop=content`, `arvprop=parsetree`, `arvdiffto` or `arvdifftotext` is used, the limit is 50. If `arvparse` is used, the limit is 1.
                         */
                        garvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires arvprop=content).
                         *
                         * @deprecated
                         */
                        garvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `arvprop=content`). For performance reasons, if this option is used, `arvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        garvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        garvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `arvdiffto`. If `arvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `arvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        garvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `arvdifftotext`.
                         *
                         * @deprecated
                         */
                        garvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `arvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        garvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Only list revisions by this user.
                         */
                        garvuser?: string;
                        /**
                         * Only list pages in this namespace.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `arvlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        garvnamespace?: number | number[] | "*";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        garvstart?: string;
                        /**
                         * The timestamp to stop enumerating at.
                         */
                        garvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: arvstart has to be before arvend.
                         * - **older**: List newest first (default). Note: arvstart has to be later than arvend.
                         *
                         * Defaults to `older`.
                         */
                        garvdir?: "newer" | "older";
                        /**
                         * Don't list revisions by this user.
                         */
                        garvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        garvcontinue?: string;
                        /**
                         * When being used as a generator, generate titles rather than revision IDs.
                         */
                        garvgeneratetitles?: boolean;
                    }

                    /**
                     * List all transclusions (pages embedded using {{x}}), including non-existing.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Alltransclusions
                     */
                    interface AllTransclusions extends Watch {
                        generator?: "alltransclusions";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gatcontinue?: string;
                        /**
                         * The title of the transclusion to start enumerating from.
                         */
                        gatfrom?: string;
                        /**
                         * The title of the transclusion to stop enumerating at.
                         */
                        gatto?: string;
                        /**
                         * Search for all transcluded titles that begin with this value.
                         */
                        gatprefix?: string;
                        /**
                         * Only show distinct transcluded titles. Cannot be used with atprop=ids.
                         * When used as a generator, yields target pages instead of source pages.
                         */
                        gatunique?: boolean;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID of the transcluding page (cannot be used with atunique).
                         * - **title**: Adds the title of the transclusion.
                         *
                         * Defaults to `title`.
                         */
                        gatprop?: OneOrMore<"ids" | "title">;
                        /**
                         * The namespace to enumerate.
                         *
                         * Defaults to 10.
                         */
                        gatnamespace?: number;
                        /**
                         * How many total items to return.
                         *
                         * Defaults to 10.
                         */
                        gatlimit?: Limit;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gatdir?: "ascending" | "descending";
                    }

                    /**
                     * Fetch the list of sitelinks for the article that corresponds to a given Wikidata ID, ordered by article size.
                     */
                    interface AutomaticTranslationDenseLanguages extends Watch {
                        "generator"?: "automatictranslationdenselanguages";
                        /**
                         * The Wikidata ID.
                         */
                        "gqid": string;
                        /**
                         * A boolean value indicating whether the section titles should be included in the response.
                         */
                        "gsection-titles"?: boolean;
                    }

                    /**
                     * Find all pages that link to the given page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Backlinks
                     */
                    interface Backlinks extends Watch {
                        generator?: "backlinks";
                        /**
                         * Title to search. Cannot be used together with `blpageid`.
                         */
                        gbltitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with `bltitle`.
                         */
                        gblpageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gblcontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        gblnamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gbldir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to `nonredirects` when `blredirect` is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        gblfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `blredirect` is enabled, the limit applies to each level separately (which means up to 2 * `bllimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        gbllimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        gblredirect?: boolean;
                    }

                    /**
                     * List all categories the pages belong to.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categories
                     */
                    interface Categories extends Watch {
                        generator?: "categories";
                        /**
                         * Which additional properties to get for each category:
                         *
                         * - **sortkey**: Adds the sortkey (hexadecimal string) and sortkey prefix (human-readable part) for the category.
                         * - **timestamp**: Adds timestamp of when the category was added.
                         * - **hidden**: Tags categories that are hidden with `__HIDDENCAT__`.
                         */
                        gclprop?: OneOrMore<"hidden" | "sortkey" | "timestamp">;
                        /**
                         * Which kind of categories to show.
                         */
                        gclshow?: OneOrMore<Toggle<"hidden">>;
                        /**
                         * How many categories to return.
                         *
                         * Defaults to 10.
                         */
                        gcllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gclcontinue?: string;
                        /**
                         * Only list these categories. Useful for checking whether a certain page is in a certain category.
                         */
                        gclcategories?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gcldir?: "ascending" | "descending";
                    }

                    /**
                     * List all pages in a given category.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Categorymembers
                     */
                    interface CategoryMembers extends Watch {
                        generator?: "categorymembers";
                        /**
                         * Which category to enumerate (required). Must include the `Category:` prefix. Cannot be used together with `cmpageid`.
                         */
                        gcmtitle?: string;
                        /**
                         * Page ID of the category to enumerate. Cannot be used together with `cmtitle`.
                         */
                        gcmpageid?: number;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **sortkey**: Adds the sortkey used for sorting in the category (hexadecimal string).
                         * - **sortkeyprefix**: Adds the sortkey prefix used for sorting in the category (human-readable part of the sortkey).
                         * - **type**: Adds the type that the page has been categorised as (`page`, `subcat` or `file`).
                         * - **timestamp**: Adds the timestamp of when the page was included.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gcmprop?: OneOrMore<
                            "ids" | "sortkey" | "sortkeyprefix" | "timestamp" | "title" | "type"
                        >;
                        /**
                         * Only include pages in these namespaces. Note that `cmtype=subcat` or `cmtype=file` may be used instead of `cmnamespace=14` or `6`.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `cmlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        gcmnamespace?: number | number[] | "*";
                        /**
                         * Which type of category members to include. Ignored when `cmsort=timestamp` is set.
                         *
                         * Defaults to `page`, `subcat`, and `file`.
                         */
                        gcmtype?: OneOrMore<"file" | "page" | "subcat">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gcmcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcmlimit?: Limit;
                        /**
                         * Property to sort by.
                         *
                         * Defaults to `sortkey`.
                         */
                        gcmsort?: "sortkey" | "timestamp";
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gcmdir?: "asc" | "ascending" | "desc" | "descending" | "newer" | "older";
                        /**
                         * Timestamp to start listing from. Can only be used with `cmsort=timestamp`.
                         */
                        gcmstart?: string;
                        /**
                         * Timestamp to end listing at. Can only be used with `cmsort=timestamp`.
                         */
                        gcmend?: string;
                        /**
                         * Sortkey to start listing from, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmstarthexsortkey?: string;
                        /**
                         * Sortkey to end listing at, as returned by `cmprop=sortkey`. Can only be used with `cmsort=sortkey`.
                         */
                        gcmendhexsortkey?: string;
                        /**
                         * Sortkey prefix to start listing from. Can only be used with `cmsort=sortkey`. Overrides `cmstarthexsortkey`.
                         */
                        gcmstartsortkeyprefix?: string;
                        /**
                         * Sortkey prefix to end listing **before** (not **at**; if this value occurs it will not be included!). Can only be used with cmsort=sortkey. Overrides cmendhexsortkey.
                         */
                        gcmendsortkeyprefix?: string;
                        /**
                         * Use cmstarthexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmstartsortkey?: string;
                        /**
                         * Use cmendhexsortkey instead.
                         *
                         * @deprecated
                         */
                        gcmendsortkey?: string;
                    }

                    /**
                     * Enumerate all pages that have custom review configurations.
                     */
                    interface Configuredpages extends Watch {
                        generator?: "configuredpages";
                        /**
                         * Start listing at this page ID.
                         */
                        gcpstart?: number;
                        /**
                         * Stop listing at this page ID.
                         */
                        gcpend?: number;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gcpdir?: "newer" | "older";
                        /**
                         * The namespaces to enumerate.
                         */
                        gcpnamespace?: number | number[] | "*";
                        /**
                         * The default page view version.
                         */
                        gcpdefault?: "latest" | "stable";
                        /**
                         * Review/autoreview restriction level.
                         */
                        gcpautoreview?: "none" | "sysop";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gcplimit?: Limit;
                    }

                    /**
                     * Query Content Translation database for translations.
                     */
                    interface ContentTranslation extends Watch {
                        generator?: "contenttranslation";
                        /**
                         * Translation ID.
                         */
                        gtranslationid?: string;
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * The title of the source page.
                         */
                        gsourcetitle?: string;
                        /**
                         * The title of the source section (optional).
                         */
                        gsourcesectiontitle?: string;
                        /**
                         * The maximum number of translations to fetch.
                         *
                         * Defaults to 100.
                         */
                        glimit?: Limit;
                        /**
                         * Offset into result set (optional).
                         */
                        goffset?: string;
                        /**
                         * State of the translation.
                         */
                        gtype?: "draft" | "published";
                        /**
                         * The usecase for which the translations are being fetched (optional).
                         */
                        gusecase?:
                            | "desktop-editor-draft"
                            | "translation-corpora-units"
                            | "unified-dashboard";
                    }

                    /**
                     * Get suggestion lists for Content Translation.
                     */
                    interface ContentTranslationSuggestions extends Watch {
                        generator?: "contenttranslationsuggestions";
                        /**
                         * The source language code.
                         */
                        gfrom?: string;
                        /**
                         * The target language code.
                         */
                        gto?: string;
                        /**
                         * Return suggestions only from a particular list
                         */
                        glistid?: string;
                        /**
                         * The maximum number of translation suggestions to fetch.
                         *
                         * Defaults to 10.
                         */
                        glimit?: Limit;
                        /**
                         * Offset for paginated results.
                         */
                        goffset?: string;
                        /**
                         * By default suggestions are returned in random order. If you wish to return each suggestion only once when using limit and offset, you must specify a seed for all the requests.
                         */
                        gseed?: number;
                    }

                    /**
                     * Get deleted revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get deleted revisions for a set of pages, by setting titles or pageids. Ordered by title and timestamp.
                     * - Get data about a set of deleted revisions by setting their IDs with revids. Ordered by revision ID.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Deletedrevisions
                     */
                    interface DeletedRevisions extends Watch {
                        generator?: "deletedrevisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        gdrvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flags"
                            | "ids"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `drvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        gdrvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `gdrvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `drvprop=content`, `drvprop=parsetree`, `drvdiffto` or `drvdifftotext` is used, the limit is 50. If `drvparse` is used, the limit is 1.
                         */
                        gdrvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires drvprop=content).
                         *
                         * @deprecated
                         */
                        gdrvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `drvprop=content`). For performance reasons, if this option is used, `drvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        gdrvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        gdrvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `drvdiffto`. If `drvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `drvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        gdrvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `drvdifftotext`.
                         *
                         * @deprecated
                         */
                        gdrvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `drvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        gdrvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * The timestamp to start enumerating from. Ignored when processing a list of revision IDs.
                         */
                        gdrvstart?: string;
                        /**
                         * The timestamp to stop enumerating at. Ignored when processing a list of revision IDs.
                         */
                        gdrvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: drvstart has to be before drvend.
                         * - **older**: List newest first (default). Note: drvstart has to be later than drvend.
                         *
                         * Defaults to `older`.
                         */
                        gdrvdir?: "newer" | "older";
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        gdrvtag?: string;
                        /**
                         * Only list revisions by this user.
                         */
                        gdrvuser?: string;
                        /**
                         * Don't list revisions by this user.
                         */
                        gdrvexcludeuser?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdrvcontinue?: string;
                    }

                    /**
                     * List all files that are duplicates of the given files based on hash values.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Duplicatefiles
                     */
                    interface DuplicateFiles extends Watch {
                        generator?: "duplicatefiles";
                        /**
                         * How many duplicate files to return.
                         *
                         * Defaults to 10.
                         */
                        gdflimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gdfcontinue?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gdfdir?: "ascending" | "descending";
                        /**
                         * Look only for files in the local repository.
                         */
                        gdflocalonly?: boolean;
                    }

                    /**
                     * Find all pages that embed (transclude) the given title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Embeddedin
                     */
                    interface Embeddedin extends Watch {
                        generator?: "embeddedin";
                        /**
                         * Title to search. Cannot be used together with eipageid.
                         */
                        geititle?: string;
                        /**
                         * Page ID to search. Cannot be used together with eititle.
                         */
                        geipageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geicontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        geinamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        geidir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        geifilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        geilimit?: Limit;
                    }

                    /**
                     * Enumerate pages that contain a given URL.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Exturlusage
                     */
                    interface ExtUrlUsage extends Watch {
                        generator?: "exturlusage";
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the ID of page.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **url**: Adds the URL used in the page.
                         *
                         * Defaults to `ids`, `title`, and `url`.
                         */
                        geuprop?: OneOrMore<"ids" | "title" | "url">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        geucontinue?: string;
                        /**
                         * Protocol of the URL. If empty and `euquery` is set, the protocol is `http` and `https`. Leave both this and `euquery` empty to list all external links.
                         *
                         * Defaults to an empty string.
                         */
                        geuprotocol?:
                            | ""
                            | "bitcoin"
                            | "ftp"
                            | "ftps"
                            | "geo"
                            | "git"
                            | "gopher"
                            | "http"
                            | "https"
                            | "irc"
                            | "ircs"
                            | "magnet"
                            | "mailto"
                            | "matrix"
                            | "mms"
                            | "news"
                            | "nntp"
                            | "redis"
                            | "sftp"
                            | "sip"
                            | "sips"
                            | "sms"
                            | "ssh"
                            | "svn"
                            | "tel"
                            | "telnet"
                            | "urn"
                            | "worldwind"
                            | "xmpp";
                        /**
                         * Search string without protocol. See {@link https://www.mediawiki.org/wiki/Special:LinkSearch Special:LinkSearch}. Leave empty to list all external links.
                         */
                        geuquery?: string;
                        /**
                         * The page namespaces to enumerate.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `eulimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        geunamespace?: number | number[] | "*";
                        /**
                         * How many pages to return.
                         *
                         * Defaults to 10.
                         */
                        geulimit?: Limit;
                        /**
                         * Expand protocol-relative URLs with the canonical protocol.
                         *
                         * @deprecated
                         */
                        geuexpandurl?: boolean;
                    }

                    /**
                     * Find all pages that use the given files.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Fileusage
                     */
                    interface FileUsage extends Watch {
                        generator?: "fileusage";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gfuprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gfunamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gfushow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gfulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gfucontinue?: string;
                    }

                    /**
                     * Returns pages having coordinates that are located in a certain area.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#list.3Dgeosearch
                     */
                    interface GeoSearch extends Watch {
                        generator?: "geosearch";
                        /**
                         * Coordinate around which to search.
                         *
                         * Format: Latitude and longitude separated by pipe (`|`).
                         */
                        ggscoord?: string;
                        /**
                         * Title of page around which to search.
                         */
                        ggspage?: string;
                        /**
                         * Bounding box to search in: pipe (`|`) separated coordinates of top left and bottom right corners.
                         */
                        ggsbbox?: string;
                        /**
                         * Search radius in meters.
                         *
                         * Defaults to 500.
                         */
                        ggsradius?: number;
                        /**
                         * Restrict search to objects no larger than this, in meters.
                         */
                        ggsmaxdim?: number;
                        /**
                         * Set the sort order of returned results.
                         *
                         * - **distance**: Rank pages by their distance to the center.
                         * - **relevance**: Rank pages by their relevance according to {@link https://www.mediawiki.org/wiki/Extension:CirrusSearch CirrusSearch}, similar to how {@link https://en.wikipedia.org/wiki/Special:Search Special:Search} does it. Currently only supported on wikis that use the ElasticSearch backend, see {@link https://www.mediawiki.org/wiki/Extension:GeoData#Search_backends mw:Extension:GeoData#Search backends}.
                         *
                         * Defaults to `distance`.
                         */
                        ggssort?: "distance" | "relevance";
                        /**
                         * Maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        ggslimit?: Limit;
                        /**
                         * Globe to search on. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `earth`.
                         */
                        ggsglobe?: "earth";
                        /**
                         * Namespaces to search.
                         *
                         * Defaults to 0.
                         */
                        ggsnamespace?: number | number[] | "*";
                        /**
                         * Which additional coordinate properties to return. (Properties that are always returned: `lat`, `lon`, and either `primary` or `secondary` as a boolean flag.)
                         *
                         * - **type**: Type of the object the coordinates point to. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Usage mw:Special:MyLanguage/Extension:GeoData#Usage} for details.
                         * - **name**: Name of the object.
                         * - **dim**: Approximate size of the object in meters.
                         * - **country**: ISO 3166-1 alpha-2 country code (e.g. `US` or `RU`).
                         * - **region**: ISO 3166-2 region code (the part of the ISO 3166-2 code after the dash; e.g. `FL` or `MOS`).
                         * - **globe**: Which terrestrial body the coordinates are relative to (e.g. `moon` or `pluto`). Defaults to Earth. See {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GeoData#Glossary mw:Special:MyLanguage/Extension:GeoData#Glossary} for details.
                         *
                         * Defaults to `globe`.
                         */
                        ggsprop?: OneOrMore<
                            "country" | "dim" | "globe" | "name" | "region" | "type"
                        >;
                        /**
                         * Which kind of coordinates to return.
                         *
                         * - **primary**: The location of the subject of the article. There is at most one primary coordinate per title.
                         * - **secondary**: The location of some object that's mentioned in the article. Any number of secondary coordinates can be associated with a title.
                         * - **all**: Return both primary and secondary coordinates.
                         *
                         * Defaults to `primary`.
                         */
                        ggsprimary?: "all" | "primary" | "secondary";
                        /**
                         * Whether debug information should be returned.
                         */
                        ggsdebug?: boolean;
                    }

                    /**
                     * Get task recommendations suitable for newcomers.
                     *
                     * Suggests a set of articles which have some outstanding issues easy enough for a new editor to tackle.
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:GrowthExperiments#API
                     */
                    interface GrowthTasks extends Watch {
                        generator?: "growthtasks";
                        /**
                         * Task types to limit results to. Leave empty to receive all suggestions.
                         *
                         * - **copyedit**: Copyedit
                         * - **expand**: Expand short articles
                         * - **links**: Add links between articles
                         * - **references**: Find references
                         * - **update**: Update articles
                         * - **link-recommendation**: Add links between articles
                         */
                        ggttasktypes?: OneOrMore<
                            | "copyedit"
                            | "expand"
                            | "image-recommendation"
                            | "link-recommendation"
                            | "links"
                            | "references"
                            | "section-image-recommendation"
                            | "update"
                        >;
                        /**
                         * Article topics to prefer in task suggestions.
                         *
                         * - **architecture**: Architecture
                         * - **art**: Art
                         * - **comics-and-anime**: Comics and anime
                         * - **entertainment**: Entertainment
                         * - **fashion**: Fashion
                         * - **literature**: Literature
                         * - **music**: Music
                         * - **performing-arts**: Performing arts
                         * - **sports**: Sports
                         * - **tv-and-film**: TV and film
                         * - **video-games**: Video games
                         * - **biography**: Biography (all)
                         * - **women**: Biography (women)
                         * - **business-and-economics**: Business and economics
                         * - **education**: Education
                         * - **food-and-drink**: Food and drink
                         * - **history**: History
                         * - **military-and-warfare**: Military and warfare
                         * - **philosophy-and-religion**: Philosophy and religion
                         * - **politics-and-government**: Politics and government
                         * - **society**: Society
                         * - **transportation**: Transportation
                         * - **biology**: Biology
                         * - **chemistry**: Chemistry
                         * - **computers-and-internet**: Computers and internet
                         * - **earth-and-environment**: Earth and environment
                         * - **engineering**: Engineering
                         * - **general-science**: General science
                         * - **mathematics**: Mathematics
                         * - **medicine-and-health**: Medicine and health
                         * - **physics**: Physics
                         * - **technology**: Technology
                         * - **africa**: Africa
                         * - **asia**: Asia
                         * - **central-america**: Central America
                         * - **europe**: Europe
                         * - **north-america**: North America
                         * - **oceania**: Oceania
                         * - **south-america**: South America
                         */
                        ggttopics?: OneOrMore<
                            | "africa"
                            | "architecture"
                            | "art"
                            | "asia"
                            | "biography"
                            | "biology"
                            | "business-and-economics"
                            | "central-america"
                            | "chemistry"
                            | "comics-and-anime"
                            | "computers-and-internet"
                            | "earth-and-environment"
                            | "education"
                            | "engineering"
                            | "entertainment"
                            | "europe"
                            | "fashion"
                            | "food-and-drink"
                            | "general-science"
                            | "history"
                            | "literature"
                            | "mathematics"
                            | "medicine-and-health"
                            | "military-and-warfare"
                            | "music"
                            | "north-america"
                            | "oceania"
                            | "performing-arts"
                            | "philosophy-and-religion"
                            | "physics"
                            | "politics-and-government"
                            | "society"
                            | "south-america"
                            | "sports"
                            | "technology"
                            | "transportation"
                            | "tv-and-film"
                            | "video-games"
                            | "women"
                        >;
                        /**
                         * Matching mode for topics.
                         */
                        ggttopicsmode?: "AND" | "OR";
                        /**
                         * Maximum number of task suggestions to return.
                         */
                        ggtlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        ggtoffset?: number;
                        /**
                         * Add debug data to the output.
                         */
                        ggtdebug?: boolean;
                        /**
                         * Page IDs to exclude from the query.
                         */
                        ggtexcludepageids?: number | number[];
                    }

                    /**
                     * Returns all files contained on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Images
                     */
                    interface Images extends Watch {
                        generator?: "images";
                        /**
                         * How many files to return.
                         *
                         * Defaults to 10.
                         */
                        gimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gimcontinue?: string;
                        /**
                         * Only list these files. Useful for checking whether a certain page has a certain file.
                         */
                        gimimages?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gimdir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that use the given image title.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Imageusage
                     */
                    interface ImageUsage extends Watch {
                        generator?: "imageusage";
                        /**
                         * Title to search. Cannot be used together with iupageid.
                         */
                        giutitle?: string;
                        /**
                         * Page ID to search. Cannot be used together with iutitle.
                         */
                        giupageid?: number;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giucontinue?: string;
                        /**
                         * The namespace to enumerate.
                         */
                        giunamespace?: number | number[] | "*";
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giudir?: "ascending" | "descending";
                        /**
                         * How to filter for redirects. If set to nonredirects when iuredirect is enabled, this is only applied to the second level.
                         *
                         * Defaults to `all`.
                         */
                        giufilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return. If `iuredirect` is enabled, the limit applies to each level separately (which means up to 2 * `iulimit` results may be returned).
                         *
                         * Defaults to 10.
                         */
                        giulimit?: Limit;
                        /**
                         * If linking page is a redirect, find all pages that link to that redirect as well. Maximum limit is halved.
                         */
                        giuredirect?: boolean;
                    }

                    /**
                     * Find all pages that link to the given interwiki link.
                     *
                     * Can be used to find all links with a prefix, or all links to a title (with a given prefix). Using neither parameter is effectively "all interwiki links".
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Iwbacklinks
                     */
                    // tslint:disable-next-line:interface-name
                    interface IWBacklinks extends Watch {
                        generator?: "iwbacklinks";
                        /**
                         * Prefix for the interwiki.
                         */
                        giwblprefix?: string;
                        /**
                         * Interwiki link to search for. Must be used with `iwblblprefix`.
                         */
                        giwbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        giwblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        giwbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **iwprefix**: Adds the prefix of the interwiki.
                         * - **iwtitle**: Adds the title of the interwiki.
                         *
                         * Defaults to an empty string.
                         */
                        giwblprop?: OneOrMore<"iwprefix" | "iwtitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        giwbldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given language link.
                     *
                     * Can be used to find all links with a language code, or all links to a title (with a given language). Using neither parameter is effectively "all language links".
                     *
                     * Note that this may not consider language links added by extensions.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Langbacklinks
                     */
                    interface LangBacklinks extends Watch {
                        generator?: "langbacklinks";
                        /**
                         * Language for the language link.
                         */
                        glbllang?: string;
                        /**
                         * Language link to search for. Must be used with lbllang.
                         */
                        glbltitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glblcontinue?: string;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        glbllimit?: Limit;
                        /**
                         * Which properties to get:
                         *
                         * - **lllang**: Adds the language code of the language link.
                         * - **lltitle**: Adds the title of the language link.
                         *
                         * Defaults to an empty string.
                         */
                        glblprop?: OneOrMore<"lllang" | "lltitle">;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        glbldir?: "ascending" | "descending";
                    }

                    /**
                     * Returns all links from the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Links
                     */
                    interface Links extends Watch {
                        generator?: "links";
                        /**
                         * Show links in these namespaces only.
                         */
                        gplnamespace?: number | number[] | "*";
                        /**
                         * How many links to return.
                         *
                         * Defaults to 10.
                         */
                        gpllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gplcontinue?: string;
                        /**
                         * Only list links to these titles. Useful for checking whether a certain page links to a certain title.
                         */
                        gpltitles?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gpldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that link to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Linkshere
                     */
                    interface LinksHere extends Watch {
                        generator?: "linkshere";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        glhprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        glhnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        glhshow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        glhlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        glhcontinue?: string;
                    }

                    /**
                     * Query MessageCollection about translations.
                     */
                    interface MessageCollection extends Watch {
                        generator?: "messagecollection";
                        /**
                         * Message group. See {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bmessagegroups `action=query&meta=messagegroups`}.
                         */
                        gmcgroup: string;
                        /**
                         * Language code.
                         *
                         * Defaults to `en`.
                         */
                        gmclanguage?: string;
                        /**
                         * How many messages to show (after filtering).
                         *
                         * Defaults to 500.
                         */
                        gmclimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to an empty string.
                         */
                        gmcoffset?: string;
                        /**
                         * Message collection filters. Use `!` to negate condition. For example `!fuzzy` means list only all non-fuzzy messages. Filters are applied in the order given.
                         *
                         * - **fuzzy**: Messages with fuzzy tag.
                         * - **optional**: Messages which should be translated only if changes are necessary.
                         * - **ignored**: Messages which are never translated.
                         * - **hastranslation**: Messages which have a translation regardless if it is fuzzy or not.
                         * - **translated**: Messages which have a translation which is not fuzzy.
                         * - **changed**: Messages which have been translated or changed since last export.
                         * - **reviewer:N**: Messages where the user number `N` is among reviewers.
                         * - **last-translator:N**: Messages where the user number `N` is the last translator.
                         *
                         * Defaults to `!optional` and `!ignored`.
                         */
                        gmcfilter?: string | string[];
                        /**
                         * Which properties to get:
                         *
                         * - **definition**: Message definition.
                         * - **translation**: Current translation (without !!FUZZY!! string if any, use the tags to check for outdated or broken translations).
                         * - **tags**: Message tags, like optional, ignored and fuzzy.
                         * - **properties**: Message properties, like status, revision, last-translator. Can vary between messages.
                         * - **revision**: Deprecated. Use mcprop=properties.
                         *
                         * Defaults to `definition` and `translation`.
                         */
                        gmcprop?: OneOrMore<
                            "definition" | "properties" | "revision" | "tags" | "translation"
                        >;
                    }

                    /**
                     * Lists the most viewed pages (based on last day's pageview count).
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageViewInfo
                     */
                    interface MostViewed extends Watch {
                        generator?: "mostviewed";
                        /**
                         * The metric to use for counting views. Depending on what backend is used, not all metrics might be supported. You can use the siteinfo API ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bsiteinfo action=query&meta=siteinfo}) to check which ones are supported, under `pageviewservice-supported-metrics` / _module name_ (`siteviews`, `mostviewed`, etc.)
                         *
                         * - **pageviews**: Plain pageviews.
                         *
                         * Defaults to `pageviews`.
                         */
                        gpvimmetric?: "pageviews";
                        /**
                         * The number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpvimlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpvimoffset?: number;
                    }

                    /**
                     * Enumerates pages that have changes pending review.
                     */
                    interface Oldreviewedpages extends Watch {
                        generator?: "oldreviewedpages";
                        /**
                         * Start listing at this timestamp.
                         */
                        gorstart?: string;
                        /**
                         * Stop listing at this timestamp.
                         */
                        gorend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * Defaults to `newer`.
                         */
                        gordir?: "newer" | "older";
                        /**
                         * Maximum character count change size.
                         */
                        gormaxsize?: number;
                        /**
                         * How to filter for pages on your watchlist.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterwatched?: "all" | "watched";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gornamespace?: number | number[] | "*";
                        /**
                         * Show pages only in the given category.
                         */
                        gorcategory?: string;
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gorfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gorlimit?: Limit;
                    }

                    /**
                     * List all pages using a given page property.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Pageswithprop
                     */
                    interface PagesWithProp extends Watch {
                        generator?: "pageswithprop";
                        /**
                         * Page property for which to enumerate pages ({@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Bpagepropnames `action=query&list=pagepropnames`} returns page property names in use).
                         */
                        gpwppropname: string;
                        /**
                         * Which pieces of information to include:
                         *
                         * - **ids**: Adds the page ID.
                         * - **title**: Adds the title and namespace ID of the page.
                         * - **value**: Adds the value of the page property.
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gpwpprop?: OneOrMore<"ids" | "title" | "value">;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gpwpcontinue?: string;
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gpwplimit?: Limit;
                        /**
                         * In which direction to sort.
                         *
                         * Defaults to `ascending`.
                         */
                        gpwpdir?: "ascending" | "descending";
                    }

                    /**
                     * Perform a prefix search for page titles.
                     *
                     * Despite the similarity in names, this module is not intended to be equivalent to {@link https://www.mediawiki.org/wiki/Special:PrefixIndex Special:PrefixIndex}; for that, see {@link https://www.mediawiki.org/wiki/Special:ApiHelp/query%2Ballpages `action=query&list=allpages`} with the `apprefix` parameter. The purpose of this module is similar to {@link https://www.mediawiki.org/wiki/Special:ApiHelp/opensearch `action=opensearch`}: to take user input and provide the best-matching titles. Depending on the search engine backend, this might include typo correction, redirect avoidance, or other heuristics.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Prefixsearch
                     */
                    interface PrefixSearch extends Watch {
                        generator?: "prefixsearch";
                        /**
                         * Search string.
                         */
                        gpssearch: string;
                        /**
                         * Namespaces to search. Ignored if `pssearch` begins with a valid namespace prefix.
                         *
                         * Defaults to 0.
                         */
                        gpsnamespace?: number | number[] | "*";
                        /**
                         * Maximum number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gpslimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gpsoffset?: number;
                        /**
                         * Search profile to use.
                         *
                         * - **strict**: Strict profile with few punctuation characters removed but diacritics and stress marks are kept.
                         * - **normal**: Few punctuation characters, some diacritics and stopwords removed.
                         * - **normal-subphrases**: Few punctuation characters, some diacritics and stopwords removed. It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **fuzzy**: Similar to normal with typo correction (two typos supported).
                         * - **fast-fuzzy**: Experimental fuzzy profile (may be removed at any time)
                         * - **fuzzy-subphrases**: Similar to normal with typo correction (two typos supported). It will match also subphrases (can be subphrases or subpages depending on internal wiki configuration).
                         * - **classic**: Classic prefix, few punctuation characters and some diacritics removed.
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gpsprofile?:
                            | "classic"
                            | "engine_autoselect"
                            | "fast-fuzzy"
                            | "fuzzy"
                            | "fuzzy-subphrases"
                            | "normal"
                            | "normal-subphrases"
                            | "strict";
                    }

                    /**
                     * List all pages associated with one or more projects.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:PageAssessments
                     */
                    interface ProjectPages extends Watch {
                        generator?: "projectpages";
                        /**
                         * Also return assessments for the pages returned.
                         */
                        gwppassessments?: boolean;
                        /**
                         * The projects to list pages for. If this parameter is omitted, all projects will be included.
                         */
                        gwppprojects: string | string[];
                        /**
                         * The maximum number of pages to return.
                         *
                         * Defaults to 10.
                         */
                        gwpplimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwppcontinue?: string;
                    }

                    /**
                     * List the pages in a given index
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ProofreadPage/Index pagination API
                     */
                    interface ProofreadPagesInIndex extends Watch {
                        generator?: "proofreadpagesinindex";
                        /**
                         * Which properties to get for each page
                         *
                         * - **ids**: Return the page ID of each page linked to the index page
                         * - **title**: Return the page title of each page linked to the index page
                         * - **formattedPageNumber**: Deprecated. Return the formatted page numbers of each page linked to the index page. Deprecated, use "formattedpagenumber" instead.
                         * - **formattedpagenumber**: Return the formatted page numbers of each page linked to the index page
                         *
                         * Defaults to `ids` and `title`.
                         */
                        gprppiiprop?: OneOrMore<
                            "formattedPageNumber" | "formattedpagenumber" | "ids" | "title"
                        >;
                        /**
                         * The title of the Index page to get pages for
                         */
                        gprppiititle?: string;
                        /**
                         * The page ID of the Index page to get pages for
                         */
                        gprppiipageid?: number;
                    }

                    /**
                     * List all titles protected from creation.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Protectedtitles
                     */
                    interface ProtectedTitles extends Watch {
                        generator?: "protectedtitles";
                        /**
                         * Only list titles in these namespaces.
                         */
                        gptnamespace?: number | number[] | "*";
                        /**
                         * Only list titles with these protection levels.
                         */
                        gptlevel?: string | string[];
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gptlimit?: Limit;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: ptstart has to be before ptend.
                         * - **older**: List newest first (default). Note: ptstart has to be later than ptend.
                         *
                         * Defaults to `older`.
                         */
                        gptdir?: "newer" | "older";
                        /**
                         * Start listing at this protection timestamp.
                         */
                        gptstart?: string;
                        /**
                         * Stop listing at this protection timestamp.
                         */
                        gptend?: string;
                        /**
                         * Which properties to get:
                         *
                         * - **timestamp**: Adds the timestamp of when protection was added.
                         * - **user**: Adds the user that added the protection.
                         * - **userid**: Adds the user ID that added the protection.
                         * - **comment**: Adds the comment for the protection.
                         * - **parsedcomment**: Adds the parsed comment for the protection.
                         * - **expiry**: Adds the timestamp of when the protection will be lifted.
                         * - **level**: Adds the protection level.
                         *
                         * Defaults to `timestamp` and `level`.
                         */
                        gptprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "level"
                            | "parsedcomment"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gptcontinue?: string;
                    }

                    /**
                     * Get a list provided by a QueryPage-based special page.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Querypage
                     */
                    interface QueryPage extends Watch {
                        generator?: "querypage";
                        /**
                         * The name of the special page. Note, this is case-sensitive.
                         */
                        gqppage: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gqpoffset?: number;
                        /**
                         * Number of results to return.
                         *
                         * Defaults to 10.
                         */
                        gqplimit?: Limit;
                    }

                    /**
                     * Get a set of random pages.
                     *
                     * Pages are listed in a fixed sequence, only the starting point is random. This means that if, for example, `Main Page` is the first random page in the list, `List of fictional monkeys` will **always** be second, `List of people on stamps of Vanuatu` third, etc.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Random
                     */
                    interface Random extends Watch {
                        generator?: "random";
                        /**
                         * Return pages in these namespaces only.
                         */
                        grnnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `nonredirects`.
                         */
                        grnfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * Use `rnfilterredir=redirects` instead.
                         *
                         * @deprecated
                         */
                        grnredirect?: boolean;
                        /**
                         * Limit how many random pages will be returned.
                         *
                         * Defaults to 1.
                         */
                        grnlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grncontinue?: string;
                    }

                    /**
                     * List the pages of a certain list.
                     *
                     * This module has two modes of operation. With the `rlelists` parameter, it returns the pages in the given list(s). With the `rlechangedsince` parameter, it returns all list entries from any list of the current user which have been changed since the given date. (This is meant for device sync and, unlike the other modes, includes deleted entries, although not entries of deleted lists.)
                     *
                     * @private
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:ReadingLists#API
                     */
                    interface ReadingListEntries extends Watch {
                        generator?: "readinglistentries";
                        /**
                         * The list IDs for which to return pages.
                         */
                        grlelists?: number | number[];
                        /**
                         * Show list entries that have been changed since this timestamp. Must be after the current timestamp.
                         */
                        grlechangedsince?: string;
                        /**
                         * Property to sort by. `name` cannot be used together with `rlechangedsince`. Defaults to `updated` when `rlechangedsince` is set, and to `name` otherwise.
                         *
                         * - **name**: Article title. (Project name is ignored. Sorting is by binary value; e.g. any uppercase ASCII character will sort before any lowercase one.)
                         * - **updated**: Last update timestamp.
                         */
                        grlesort?: "name" | "updated";
                        /**
                         * Sort direction: `ascending` (A to Z, oldest to newest) or `descending`.
                         *
                         * Defaults to `ascending`.
                         */
                        grledir?: "ascending" | "descending";
                        /**
                         * Number of result items to return.
                         *
                         * Defaults to 10.
                         */
                        grlelimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grlecontinue?: string;
                    }

                    /**
                     * Enumerate recent changes.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Recentchanges
                     */
                    interface RecentChanges extends Watch {
                        generator?: "recentchanges";
                        /**
                         * The timestamp to start enumerating from.
                         */
                        grcstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        grcend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rcstart has to be before rcend.
                         * - **older**: List newest first (default). Note: rcstart has to be later than rcend.
                         *
                         * Defaults to `older`.
                         */
                        grcdir?: "newer" | "older";
                        /**
                         * Filter changes to only these namespaces.
                         */
                        grcnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        grcuser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        grcexcludeuser?: string;
                        /**
                         * Only list changes tagged with this tag.
                         */
                        grctag?: string;
                        /**
                         * Include additional pieces of information:
                         *
                         * - **user**: Adds the user responsible for the edit and tags if they are an IP. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds the user ID responsible for the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds the comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds the parsed comment for the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **flags**: Adds flags for the edit.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **title**: Adds the page title of the edit.
                         * - **ids**: Adds the page ID, recent changes ID and the new and old revision ID.
                         * - **sizes**: Adds the new and old page length in bytes.
                         * - **redirect**: Tags edit if page is a redirect.
                         * - **patrolled**: Tags patrollable edits as being patrolled or unpatrolled.
                         * - **loginfo**: Adds log information (log ID, log type, etc) to log entries.
                         * - **tags**: Lists tags for the entry.
                         * - **sha1**: Adds the content checksum for entries associated with a revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         *
                         * Defaults to `title`, `timestamp`, and `ids`.
                         */
                        grcprop?: OneOrMore<
                            | "comment"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrolled"
                            | "redirect"
                            | "sha1"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Use {@link https://www.gracesguide.co.uk/Special:ApiHelp/query%2Btokens `action=query&meta=tokens`} instead.
                         *
                         * @deprecated
                         */
                        grctoken?: string;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set rcshow=minor|!anon.
                         */
                        grcshow?: OneOrMore<
                            | Toggle<
                                  | "anon"
                                  | "autopatrolled"
                                  | "bot"
                                  | "minor"
                                  | "oresreview"
                                  | "patrolled"
                                  | "redirect"
                              >
                            | "unpatrolled"
                        >;
                        /**
                         * How many total changes to return.
                         *
                         * Defaults to 10.
                         */
                        grclimit?: Limit;
                        /**
                         * Which types of changes to show.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        grctype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Only list changes which are the latest revision.
                         */
                        grctoponly?: boolean;
                        /**
                         * Filter entries to those related to a page.
                         */
                        grctitle?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grccontinue?: string;
                        /**
                         * When being used as a generator, generate revision IDs rather than titles. Recent change entries without associated revision IDs (e.g. most log entries) will generate nothing.
                         */
                        grcgeneraterevisions?: boolean;
                        /**
                         * Only list changes that touch the named slot.
                         */
                        grcslot?: "main" | "mediainfo";
                    }

                    /**
                     * Returns all redirects to the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Redirects
                     */
                    interface Redirects extends Watch {
                        generator?: "redirects";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each redirect.
                         * - **title**: Title of each redirect.
                         * - **fragment**: Fragment of each redirect, if any.
                         *
                         * Defaults to `pageid` and `title`.
                         */
                        grdprop?: OneOrMore<"fragment" | "pageid" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         *
                         * **Note:** Due to {@link https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:$wgMiserMode miser mode}, using this may result in fewer than `rdlimit` results returned before continuing; in extreme cases, zero results may be returned.
                         */
                        grdnamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **fragment**: Only show redirects with a fragment.
                         * - **!fragment**: Only show redirects without a fragment.
                         */
                        grdshow?: OneOrMore<Toggle<"fragment">>;
                        /**
                         * How many redirects to return.
                         *
                         * Defaults to 10.
                         */
                        grdlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grdcontinue?: string;
                    }

                    /**
                     * Get revision information.
                     *
                     * May be used in several ways:
                     *
                     * - Get data about a set of pages (last revision), by setting titles or pageids.
                     * - Get revisions for one given page, by using titles or pageids with start, end, or limit.
                     * - Get data about a set of revisions by setting their IDs with revids.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Revisions
                     */
                    interface Revisions extends Watch {
                        generator?: "revisions";
                        /**
                         * Which properties to get for each revision:
                         *
                         * - **ids**: The ID of the revision.
                         * - **flags**: Revision flags (minor).
                         * - **timestamp**: The timestamp of the revision.
                         * - **user**: User that made the revision. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: User ID of the revision creator. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **size**: Length (bytes) of the revision.
                         * - **slotsize**: Length (bytes) of each revision slot.
                         * - **sha1**: SHA-1 (base 16) of the revision. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **slotsha1**: SHA-1 (base 16) of each revision slot. If the content has been revision deleted, a `sha1hidden` property will be returned.
                         * - **contentmodel**: Content model ID of each revision slot.
                         * - **comment**: Comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Parsed comment by the user for the revision. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **content**: Content of each revision slot. If the content has been revision deleted, a `texthidden` property will be returned. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         * - **tags**: Tags for the revision.
                         * - **roles**: List content slot roles that exist in the revision.
                         * - **parsetree**: Deprecated. Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. The XML parse tree of revision content (requires content model `wikitext`). For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * Defaults to `ids`, `timestamp`, `flags`, `comment`, and `user`.
                         */
                        grvprop?: OneOrMore<
                            | "comment"
                            | "content"
                            | "contentmodel"
                            | "flagged"
                            | "flags"
                            | "ids"
                            | "oresscores"
                            | "parsedcomment"
                            | "parsetree"
                            | "roles"
                            | "sha1"
                            | "size"
                            | "slotsha1"
                            | "slotsize"
                            | "tags"
                            | "timestamp"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Which revision slots to return data for, when slot-related properties are included in `rvprops`. If omitted, data from the `main` slot will be returned in a backwards-compatible format.
                         */
                        grvslots?: string | string[];
                        /**
                         * Content serialization format used for output of content.
                         */
                        [k: `grvcontentformat-${string}`]:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Limit how many revisions will be returned. If `rvprop=content`, `rvprop=parsetree`, `rvdiffto` or `rvdifftotext` is used, the limit is 50. If `rvparse` is used, the limit is 1.
                         */
                        grvlimit?: Limit;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} instead. Expand templates in revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvexpandtemplates?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/expandtemplates `action=expandtemplates`} or {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Generate XML parse tree for revision content (requires rvprop=content).
                         *
                         * @deprecated
                         */
                        grvgeneratexml?: boolean;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/parse `action=parse`} instead. Parse revision content (requires `rvprop=content`). For performance reasons, if this option is used, `rvlimit` is enforced to 1.
                         *
                         * @deprecated
                         */
                        grvparse?: boolean;
                        /**
                         * Only retrieve the content of the section with this identifier.
                         */
                        grvsection?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Revision ID to diff each revision to. Use `prev`, `next` and `cur` for the previous, next and current revision respectively. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdiffto?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Text to diff each revision to. Only diffs a limited number of revisions. Overrides `rvdiffto`. If `rvsection` is set, only that section will be diffed against this text. For performance reasons, if this option is used, `rvlimit` is enforced to 50.
                         *
                         * @deprecated
                         */
                        grvdifftotext?: string;
                        /**
                         * Use {@link https://www.mediawiki.org/wiki/Special:ApiHelp/compare `action=compare`} instead. Perform a pre-save transform on the text before diffing it. Only valid when used with `rvdifftotext`.
                         *
                         * @deprecated
                         */
                        grvdifftotextpst?: boolean;
                        /**
                         * Serialization format used for `rvdifftotext` and expected for output of content.
                         *
                         * @deprecated
                         */
                        grvcontentformat?:
                            | "application/json"
                            | "application/octet-stream"
                            | "application/unknown"
                            | "application/vnd.php.serialized"
                            | "application/x-binary"
                            | "text/css"
                            | "text/javascript"
                            | "text/plain"
                            | "text/unknown"
                            | "text/x-wiki"
                            | "unknown/unknown";
                        /**
                         * Start enumeration from this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvstartid?: number;
                        /**
                         * Stop enumeration at this revision's timestamp. The revision must exist, but need not belong to this page.
                         */
                        grvendid?: number;
                        /**
                         * From which revision timestamp to start enumeration.
                         */
                        grvstart?: string;
                        /**
                         * Enumerate up to this timestamp.
                         */
                        grvend?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: rvstart has to be before rvend.
                         * - **older**: List newest first (default). Note: rvstart has to be later than rvend.
                         *
                         * Defaults to `older`.
                         */
                        grvdir?: "newer" | "older";
                        /**
                         * Only include revisions made by user.
                         */
                        grvuser?: string;
                        /**
                         * Exclude revisions made by user.
                         */
                        grvexcludeuser?: string;
                        /**
                         * Only list revisions tagged with this tag.
                         */
                        grvtag?: string;
                        /**
                         * Which tokens to obtain for each revision.
                         *
                         * @deprecated
                         */
                        grvtoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        grvcontinue?: string;
                    }

                    /**
                     * Perform a full text search.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Search
                     */
                    interface Search extends Watch {
                        generator?: "search";
                        /**
                         * Search for page titles or content matching this value. You can use the search string to invoke special search features, depending on what the wiki's search backend implements.
                         */
                        gsrsearch: string;
                        /**
                         * Search only within these namespaces.
                         *
                         * Defaults to 0.
                         */
                        gsrnamespace?: number | number[] | "*";
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gsrlimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         *
                         * Defaults to 0.
                         */
                        gsroffset?: number;
                        /**
                         * Query independent profile to use (affects ranking algorithm).
                         *
                         * - **classic**: Ranking based on the number of incoming links, some templates, page language and recency (templates/language/recency may not be activated on this wiki).
                         * - **classic_noboostlinks**: Ranking based on some templates, page language and recency when activated on this wiki.
                         * - **empty**: Ranking based solely on query dependent features (for debug only).
                         * - **wsum_inclinks**: Weighted sum based on incoming links
                         * - **wsum_inclinks_pv**: Weighted sum based on incoming links and weekly pageviews
                         * - **popular_inclinks_pv**: Ranking based primarily on page views
                         * - **popular_inclinks**: Ranking based primarily on incoming link counts
                         * - **engine_autoselect**: Let the search engine decide on the best profile to use.
                         *
                         * Defaults to `engine_autoselect`.
                         */
                        gsrqiprofile?: string;
                        /**
                         * Which type of search to perform.
                         */
                        gsrwhat?: "nearmatch" | "text" | "title";
                        /**
                         * Which metadata to return.
                         *
                         * Defaults to `totalhits`, `suggestion`, and `rewrittenquery`.
                         */
                        gsrinfo?: OneOrMore<"rewrittenquery" | "suggestion" | "totalhits">;
                        /**
                         * Which properties to return:
                         *
                         * - **size**: Adds the size of the page in bytes.
                         * - **wordcount**: Adds the word count of the page.
                         * - **timestamp**: Adds the timestamp of when the page was last edited.
                         * - **snippet**: Adds a snippet of the page, with query term highlighting markup.
                         * - **titlesnippet**: Adds the page title, with query term highlighting markup.
                         * - **redirecttitle**: Adds the title of the matching redirect.
                         * - **redirectsnippet**: Adds the title of the matching redirect, with query term highlighting markup.
                         * - **sectiontitle**: Adds the title of the matching section.
                         * - **sectionsnippet**: Adds the title of the matching section, with query term highlighting markup.
                         * - **isfilematch**: Adds a boolean indicating if the search matched file content.
                         * - **categorysnippet**: Adds the matching category name, with query term highlighting markup.
                         * - **score**: Deprecated. Ignored.
                         * - **hasrelated**: Deprecated. Ignored.
                         * - **extensiondata**: Adds extra data generated by extensions.
                         *
                         * Defaults to `size`, `wordcount`, `timestamp`, and `snippet`.
                         */
                        gsrprop?: OneOrMore<
                            | "categorysnippet"
                            | "extensiondata"
                            | "hasrelated"
                            | "isfilematch"
                            | "redirectsnippet"
                            | "redirecttitle"
                            | "score"
                            | "sectionsnippet"
                            | "sectiontitle"
                            | "size"
                            | "snippet"
                            | "timestamp"
                            | "titlesnippet"
                            | "wordcount"
                        >;
                        /**
                         * Include interwiki results in the search, if available.
                         */
                        gsrinterwiki?: boolean;
                        /**
                         * Enable internal query rewriting. Some search backends can rewrite the query into another which is thought to provide better results, for instance by correcting spelling errors.
                         */
                        gsrenablerewrites?: boolean;
                        /**
                         * Set the sort order of returned results.
                         *
                         * Defaults to `relevance`.
                         */
                        gsrsort?:
                            | "create_timestamp_asc"
                            | "create_timestamp_desc"
                            | "incoming_links_asc"
                            | "incoming_links_desc"
                            | "just_match"
                            | "last_edit_asc"
                            | "last_edit_desc"
                            | "none"
                            | "random"
                            | "relevance"
                            | "user_random";
                    }

                    /**
                     * Returns all pages transcluded on the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Templates
                     */
                    interface Templates extends Watch {
                        generator?: "templates";
                        /**
                         * Show templates in these namespaces only.
                         */
                        gtlnamespace?: number | number[] | "*";
                        /**
                         * How many templates to return.
                         *
                         * Defaults to 10.
                         */
                        gtllimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gtlcontinue?: string;
                        /**
                         * Only list these templates. Useful for checking whether a certain page uses a certain template.
                         */
                        gtltemplates?: string | string[];
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gtldir?: "ascending" | "descending";
                    }

                    /**
                     * Find all pages that transclude the given pages.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Transcludedin
                     */
                    interface Transcludedin extends Watch {
                        generator?: "transcludedin";
                        /**
                         * Which properties to get:
                         *
                         * - **pageid**: Page ID of each page.
                         * - **title**: Title of each page.
                         * - **redirect**: Flag if the page is a redirect.
                         *
                         * Defaults to `pageid`, `title`, and `redirect`.
                         */
                        gtiprop?: OneOrMore<"pageid" | "redirect" | "title">;
                        /**
                         * Only include pages in these namespaces.
                         */
                        gtinamespace?: number | number[] | "*";
                        /**
                         * Show only items that meet these criteria:
                         *
                         * - **redirect**: Only show redirects.
                         * - **!redirect**: Only show non-redirects.
                         */
                        gtishow?: OneOrMore<Toggle<"redirect">>;
                        /**
                         * How many to return.
                         *
                         * Defaults to 10.
                         */
                        gtilimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gticontinue?: string;
                    }

                    /**
                     * Enumerates pages that have not been reviewed to a given quality level.
                     */
                    interface Unreviewedpages extends Watch {
                        generator?: "unreviewedpages";
                        /**
                         * Start listing at this page title.
                         */
                        gurstart?: string;
                        /**
                         * Stop listing at this page title.
                         */
                        gurend?: string;
                        /**
                         * Direction to sort in.
                         *
                         * Defaults to `ascending`.
                         */
                        gurdir?: "ascending" | "descending";
                        /**
                         * The namespaces to enumerate.
                         *
                         * Defaults to 0.
                         */
                        gurnamespace?: number | number[] | "*";
                        /**
                         * How to filter for redirects.
                         *
                         * Defaults to `all`.
                         */
                        gurfilterredir?: "all" | "nonredirects" | "redirects";
                        /**
                         * How to filter by quality (0=checked, 1=quality).
                         *
                         * Defaults to 0.
                         */
                        gurfilterlevel?: number;
                        /**
                         * How many total pages to return.
                         *
                         * Defaults to 10.
                         */
                        gurlimit?: Limit;
                    }

                    /**
                     * Get recent changes to pages in the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlist
                     */
                    interface Watchlist extends Watch {
                        generator?: "watchlist";
                        /**
                         * Include multiple revisions of the same page within given timeframe.
                         */
                        gwlallrev?: boolean;
                        /**
                         * The timestamp to start enumerating from.
                         */
                        gwlstart?: string;
                        /**
                         * The timestamp to end enumerating.
                         */
                        gwlend?: string;
                        /**
                         * Filter changes to only the given namespaces.
                         */
                        gwlnamespace?: number | number[] | "*";
                        /**
                         * Only list changes by this user.
                         */
                        gwluser?: string;
                        /**
                         * Don't list changes by this user.
                         */
                        gwlexcludeuser?: string;
                        /**
                         * In which direction to enumerate:
                         *
                         * - **newer**: List oldest first. Note: wlstart has to be before wlend.
                         * - **older**: List newest first (default). Note: wlstart has to be later than wlend.
                         *
                         * Defaults to `older`.
                         */
                        gwldir?: "newer" | "older";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwllimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **ids**: Adds revision IDs and page IDs.
                         * - **title**: Adds title of the page.
                         * - **flags**: Adds flags for the edit.
                         * - **user**: Adds the user who made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **userid**: Adds user ID of whoever made the edit. If the user has been revision deleted, a `userhidden` property will be returned.
                         * - **comment**: Adds comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **parsedcomment**: Adds parsed comment of the edit. If the comment has been revision deleted, a `commenthidden` property will be returned.
                         * - **timestamp**: Adds timestamp of the edit.
                         * - **patrol**: Tags edits that are patrolled.
                         * - **sizes**: Adds the old and new lengths of the page.
                         * - **notificationtimestamp**: Adds timestamp of when the user was last notified about the edit.
                         * - **loginfo**: Adds log information where appropriate.
                         * - **tags**: Lists tags for the entry.
                         * - **expiry**: Adds the expiry time.
                         *
                         * Defaults to `ids`, `title`, and `flags`.
                         */
                        gwlprop?: OneOrMore<
                            | "comment"
                            | "expiry"
                            | "flags"
                            | "ids"
                            | "loginfo"
                            | "notificationtimestamp"
                            | "oresscores"
                            | "parsedcomment"
                            | "patrol"
                            | "sizes"
                            | "tags"
                            | "timestamp"
                            | "title"
                            | "user"
                            | "userid"
                        >;
                        /**
                         * Show only items that meet these criteria. For example, to see only minor edits done by logged-in users, set wlshow=minor|!anon.
                         */
                        gwlshow?: OneOrMore<
                            Toggle<
                                | "anon"
                                | "autopatrolled"
                                | "bot"
                                | "minor"
                                | "oresreview"
                                | "patrolled"
                                | "unread"
                            >
                        >;
                        /**
                         * Which types of changes to show:
                         *
                         * - **edit**: Regular page edits.
                         * - **new**: Page creations.
                         * - **log**: Log entries.
                         * - **external**: External changes.
                         * - **categorize**: Category membership changes.
                         *
                         * Defaults to `edit`, `new`, `log`, and `categorize`.
                         */
                        gwltype?: OneOrMore<"categorize" | "edit" | "external" | "log" | "new">;
                        /**
                         * Used along with wltoken to access a different user's watchlist.
                         */
                        gwlowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwltoken?: string;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwlcontinue?: string;
                    }

                    /**
                     * Get all pages on the current user's watchlist.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Watchlistraw
                     */
                    interface WatchlistRaw extends Watch {
                        generator?: "watchlistraw";
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwrcontinue?: string;
                        /**
                         * Only list pages in the given namespaces.
                         */
                        gwrnamespace?: number | number[] | "*";
                        /**
                         * How many total results to return per request.
                         *
                         * Defaults to 10.
                         */
                        gwrlimit?: Limit;
                        /**
                         * Which additional properties to get:
                         *
                         * - **changed**: Adds timestamp of when the user was last notified about the edit.
                         */
                        gwrprop?: OneOrMore<"changed">;
                        /**
                         * Only list items that meet these criteria.
                         */
                        gwrshow?: OneOrMore<Toggle<"changed">>;
                        /**
                         * Used along with wrtoken to access a different user's watchlist.
                         */
                        gwrowner?: string;
                        /**
                         * A security token (available in the user's {@link https://www.mediawiki.org/wiki/Special:Preferences#mw-prefsection-watchlist preferences}) to allow access to another user's watchlist.
                         *
                         * Sensitive parameter.
                         */
                        gwrtoken?: string;
                        /**
                         * The direction in which to list.
                         *
                         * Defaults to `ascending`.
                         */
                        gwrdir?: "ascending" | "descending";
                        /**
                         * Title (with namespace prefix) to begin enumerating from.
                         */
                        gwrfromtitle?: string;
                        /**
                         * Title (with namespace prefix) to stop enumerating at.
                         */
                        gwrtotitle?: string;
                    }

                    /**
                     * Returns all pages that use the given entity IDs.
                     *
                     * @see https://www.mediawiki.org/wiki/Special:MyLanguage/Wikibase/API
                     */
                    interface WBListEntityUsage extends Watch {
                        generator?: "wblistentityusage";
                        /**
                         * Properties to add to the result.
                         *
                         * - **url**: If enabled the url of the entity will be added to the result.
                         */
                        gwbleuprop?: OneOrMore<"url">;
                        /**
                         * Only return entity IDs that used this aspect.
                         *
                         * - **S**: The entity's sitelinks are used
                         * - **L**: The entity's label is used
                         * - **D**: The entity's description is used
                         * - **T**: The title of the local page corresponding to the entity is used
                         * - **C**: Statements from the entity are used
                         * - **X**: All aspects of an entity are or may be used
                         * - **O**: Something else about the entity is used. This currently implies alias usage and explicit checks for entity existence.
                         */
                        gwbleuaspect?: OneOrMore<"C" | "D" | "L" | "O" | "S" | "T" | "X">;
                        /**
                         * Entities that have been used.
                         */
                        gwbleuentities: string | string[];
                        /**
                         * How many entity usages to return.
                         *
                         * Defaults to 10.
                         */
                        gwbleulimit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwbleucontinue?: string;
                    }

                    /**
                     * Searches for entities using labels and aliases.
                     *
                     * This can be used as a generator for other queries.
                     * Returns the matched term that should be displayed.
                     *
                     * @private
                     */
                    interface WBSearch extends Watch {
                        generator?: "wbsearch";
                        /**
                         * Search for this text.
                         */
                        gwbssearch: string;
                        /**
                         * Search in this language.
                         */
                        gwbslanguage?: string;
                        /**
                         * Whether to disable language fallback
                         */
                        gwbsstrictlanguage?: boolean;
                        /**
                         * Search for this type of entity.
                         *
                         * Defaults to `item`.
                         */
                        gwbstype?: string;
                        /**
                         * Maximal number of results
                         *
                         * Defaults to 7.
                         */
                        gwbslimit?: Limit;
                        /**
                         * The search profile to use.
                         *
                         * - **default**: The default profile, suitable for most purposes.
                         * - **language**: A profile to search for items about natural languages.
                         *
                         * Defaults to `default`.
                         */
                        gwbsprofile?: "default" | "language";
                    }

                    /**
                     * This API query list searches for the IDs of all ZObjects associated with a provided ZFunction ID
                     */
                    interface WikiLambdaFnSearch extends Watch {
                        generator?: "wikilambdafn_search";
                        /**
                         * The ZFunction ID to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_zfunction_id?: string;
                        /**
                         * The type of ZObject referenced by the ZFunction to search for
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdafn_type?: string;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdafn_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdafn_continue?: string;
                    }

                    /**
                     * Search ZObjects given their ZIDs and return their JSON model fully or filtered to a given language or fallbacks. If any of the provided ZIDs does not exist in the wiki, will return a Z5 error instead of the requested ZObject.
                     */
                    interface WikiLambdaLoadZObjects extends Watch {
                        generator?: "wikilambdaload_zobjects";
                        /**
                         * The ZObject ZIDs to fetch.
                         */
                        gwikilambdaload_zids: string | string[];
                        /**
                         * The revision IDs to fetch. Must be empty or the same number as the number of ZIDs requested.
                         */
                        gwikilambdaload_revisions?: string | string[];
                        /**
                         * The MediaWiki language code in which to return all the ZObject labels.
                         */
                        gwikilambdaload_language?: string;
                        /**
                         * Whether to return also the ZObjects that are dependencies of the originally requested ZIDs.
                         */
                        gwikilambdaload_get_dependencies?: boolean;
                    }

                    /**
                     * This API query list generator lets you search ZObjects for labels in a given language. It principally exists to support the look-ahead search system.
                     */
                    interface WikiLambdaSearchLabels extends Watch {
                        generator?: "wikilambdasearch_labels";
                        /**
                         * The search term
                         *
                         * Defaults to an empty string.
                         */
                        gwikilambdasearch_search?: string;
                        /**
                         * The MediaWiki language code in which to search
                         */
                        gwikilambdasearch_language: string;
                        /**
                         * Whether to search only in the given language and not its fallback languages
                         */
                        gwikilambdasearch_nofallback?: boolean;
                        /**
                         * Whether to search for exact matches. If disabled, input will be taken as a case-insensitive, Unicode-normalised search with accents on Latin characters ignored.
                         */
                        gwikilambdasearch_exact?: boolean;
                        /**
                         * Restrict matches to a specific type of ZObject.
                         */
                        gwikilambdasearch_type?: string;
                        /**
                         * Restrict matches to ZFunctions that can return the given type, including those who return a generic ZObject.
                         */
                        gwikilambdasearch_return_type?: string;
                        /**
                         * Restrict return type to be strictly the given one, excluding generic ZObject.
                         */
                        gwikilambdasearch_strict_return_type?: boolean;
                        /**
                         * The maximum number of results to return
                         *
                         * Defaults to 10.
                         */
                        gwikilambdasearch_limit?: Limit;
                        /**
                         * When more results are available, use this to continue. More detailed information on how to continue queries {@link https://www.mediawiki.org/wiki/Special:MyLanguage/API:Continue can be found on mediawiki.org}.
                         */
                        gwikilambdasearch_continue?: string;
                    }
                }
            }

            namespace Format {
                /**
                 * Output data in JSON format.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface Json extends Params {
                    format: "json";
                    /**
                     * If specified, wraps the output into a given function call. For safety, all user-specific data will be restricted.
                     */
                    callback?: string;
                    /**
                     * If specified, encodes most (but not all) non-ASCII characters as UTF-8 instead of replacing them with hexadecimal escape sequences. Default when `formatversion` is not `1`.
                     */
                    utf8?: boolean;
                    /**
                     * If specified, encodes all non-ASCII using hexadecimal escape sequences. Default when `formatversion` is `1`.
                     */
                    ascii?: boolean;
                    /**
                     * Output formatting
                     *
                     * - **1**: Backwards-compatible format (XML-style booleans, `*` keys for content nodes, etc.).
                     * - **2**: Modern format.
                     * - **latest**: Use the latest format (currently `2`), may change without warning.
                     *
                     * Defaults to `1`.
                     */
                    formatversion?: "1" | "2" | "latest";
                }

                /**
                 * Output data in JSON format (pretty-print in HTML).
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface JsonFM extends Params {
                    format?: "jsonfm";
                    /**
                     * Return the pretty-printed HTML and associated ResourceLoader modules as a JSON object.
                     */
                    wrappedhtml?: boolean;
                    /**
                     * If specified, wraps the output into a given function call. For safety, all user-specific data will be restricted.
                     */
                    callback?: string;
                    /**
                     * If specified, encodes most (but not all) non-ASCII characters as UTF-8 instead of replacing them with hexadecimal escape sequences. Default when `formatversion` is not `1`.
                     */
                    utf8?: boolean;
                    /**
                     * If specified, encodes all non-ASCII using hexadecimal escape sequences. Default when `formatversion` is `1`.
                     */
                    ascii?: boolean;
                    /**
                     * Output formatting
                     *
                     * - **1**: Backwards-compatible format (XML-style booleans, `*` keys for content nodes, etc.).
                     * - **2**: Modern format.
                     * - **latest**: Use the latest format (currently `2`), may change without warning.
                     *
                     * Defaults to `1`.
                     */
                    formatversion?: "1" | "2" | "latest";
                }

                /**
                 * Output nothing.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface None extends Params {
                    format: "none";
                }

                /**
                 * Output data in serialized PHP format.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface Php extends Params {
                    format: "php";
                    /**
                     * Output formatting
                     *
                     * - **1**: Backwards-compatible format (XML-style booleans, `*` keys for content nodes, etc.).
                     * - **2**: Modern format.
                     * - **latest**: Use the latest format (currently `2`), may change without warning.
                     *
                     * Defaults to `1`.
                     */
                    formatversion?: "1" | "2" | "latest";
                }

                /**
                 * Output data in serialized PHP format (pretty-print in HTML).
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface PhpFM extends Params {
                    format: "phpfm";
                    /**
                     * Return the pretty-printed HTML and associated ResourceLoader modules as a JSON object.
                     */
                    wrappedhtml?: boolean;
                    /**
                     * Output formatting
                     *
                     * - **1**: Backwards-compatible format (XML-style booleans, `*` keys for content nodes, etc.).
                     * - **2**: Modern format.
                     * - **latest**: Use the latest format (currently `2`), may change without warning.
                     *
                     * Defaults to `1`.
                     */
                    formatversion?: "1" | "2" | "latest";
                }

                /**
                 * Output data, including debugging elements, in JSON format (pretty-print in HTML).
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface RawFM extends Params {
                    format: "rawfm";
                    /**
                     * Return the pretty-printed HTML and associated ResourceLoader modules as a JSON object.
                     */
                    wrappedhtml?: boolean;
                }

                /**
                 * Output data in XML format.
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface Xml extends Params {
                    format: "xml";
                    /**
                     * If specified, adds the named page as an XSL stylesheet. The value must be a title in the MediaWiki namespace ending in `.xsl`.
                     */
                    xslt?: string;
                    /**
                     * If specified, adds an XML namespace.
                     */
                    includexmlnamespace?: boolean;
                }

                /**
                 * Output data in XML format (pretty-print in HTML).
                 *
                 * @see https://www.mediawiki.org/wiki/Special:MyLanguage/API:Data_formats
                 */
                interface XmlFM extends Params {
                    format: "xmlfm";
                    /**
                     * Return the pretty-printed HTML and associated ResourceLoader modules as a JSON object.
                     */
                    wrappedhtml?: boolean;
                    /**
                     * If specified, adds the named page as an XSL stylesheet. The value must be a title in the MediaWiki namespace ending in `.xsl`.
                     */
                    xslt?: string;
                    /**
                     * If specified, adds an XML namespace.
                     */
                    includexmlnamespace?: boolean;
                }
            }
        }
    }
}

/**
 * @deprecated Use {@link mw.Api.Assert `mw.Api.Assert`} instead.
 */
export type ApiAssert = mw.Api.Assert;

/**
 * @deprecated Use {@link mw.Api.TokenType `mw.Api.TokenType`} instead.
 */
export type ApiTokenType = mw.Api.TokenType;

/**
 * @deprecated Use {@link mw.Api.LegacyTokenType `mw.Api.LegacyTokenType`} instead.
 */
export type ApiLegacyTokenType = mw.Api.LegacyTokenType;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AbuseFilterCheckMatch `Partial<mw.Api.Params.Action.AbuseFilterCheckMatch>`} instead.
 */
export type AbuseFilterApiCheckMatchParams = Partial<mw.Api.Params.Action.AbuseFilterCheckMatch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AbuseFilterCheckSyntax `Partial<mw.Api.Params.Action.AbuseFilterCheckSyntax>`} instead.
 */
export type AbuseFilterApiCheckSyntaxParams = Partial<mw.Api.Params.Action.AbuseFilterCheckSyntax>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AbuseFilterEvalExpression `Partial<mw.Api.Params.Action.AbuseFilterEvalExpression>`} instead.
 */
export type AbuseFilterApiEvalExpressionParams = Partial<mw.Api.Params.Action.AbuseFilterEvalExpression>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AbuseFilterUnblockAutopromote `Partial<mw.Api.Params.Action.AbuseFilterUnblockAutopromote>`} instead.
 */
export type AbuseFilterApiUnblockAutopromoteParams = Partial<mw.Api.Params.Action.AbuseFilterUnblockAutopromote>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AbuseLogPrivateDetails `Partial<mw.Api.Params.Action.AbuseLogPrivateDetails>`} instead.
 */
export type AbuseFilterApiAbuseLogPrivateDetailsParams = Partial<mw.Api.Params.Action.AbuseLogPrivateDetails>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AcquireTempUserName `Partial<mw.Api.Params.Action.AcquireTempUserName>`} instead.
 */
export type ApiAcquireTempUserNameParams = Partial<mw.Api.Params.Action.AcquireTempUserName>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.AntiSpoof `Partial<mw.Api.Params.Action.AntiSpoof>`} instead.
 */
export type AntiSpoofApiAntiSpoofParams = Partial<mw.Api.Params.Action.AntiSpoof>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Block `Partial<mw.Api.Params.Action.Block>`} instead.
 */
export type ApiBlockParams = Partial<mw.Api.Params.Action.Block>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.BounceHandler `Partial<mw.Api.Params.Action.BounceHandler>`} instead.
 */
export type BounceHandlerApiBounceHandlerParams = Partial<mw.Api.Params.Action.BounceHandler>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CategoryTree `Partial<mw.Api.Params.Action.CategoryTree>`} instead.
 */
export type CategoryTreeApiCategoryTreeParams = Partial<mw.Api.Params.Action.CategoryTree>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CentralAuthToken `Partial<mw.Api.Params.Action.CentralAuthToken>`} instead.
 */
export type CentralAuthApiCentralAuthTokenParams = Partial<mw.Api.Params.Action.CentralAuthToken>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CentralNoticeCdnCacheUpdateBanner `Partial<mw.Api.Params.Action.CentralNoticeCdnCacheUpdateBanner>`} instead.
 */
export type ApiCentralNoticeCdnCacheUpdateBannerParams = Partial<mw.Api.Params.Action.CentralNoticeCdnCacheUpdateBanner>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CentralNoticeChoiceData `Partial<mw.Api.Params.Action.CentralNoticeChoiceData>`} instead.
 */
export type ApiCentralNoticeChoiceDataParams = Partial<mw.Api.Params.Action.CentralNoticeChoiceData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CentralNoticeQueryCampaign `Partial<mw.Api.Params.Action.CentralNoticeQueryCampaign>`} instead.
 */
export type ApiCentralNoticeQueryCampaignParams = Partial<mw.Api.Params.Action.CentralNoticeQueryCampaign>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ChangeAuthenticationData `Partial<mw.Api.Params.Action.ChangeAuthenticationData>`} instead.
 */
export type ApiChangeAuthenticationDataParams = Partial<mw.Api.Params.Action.ChangeAuthenticationData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ChangeContentModel `Partial<mw.Api.Params.Action.ChangeContentModel>`} instead.
 */
export type ApiChangeContentModelParams = Partial<mw.Api.Params.Action.ChangeContentModel>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CheckToken `Partial<mw.Api.Params.Action.CheckToken>`} instead.
 */
export type ApiCheckTokenParams = Partial<mw.Api.Params.Action.CheckToken>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CirrusConfigDump `Partial<mw.Api.Params.Action.CirrusConfigDump>`} instead.
 */
export type CirrusSearchApiConfigDumpParams = Partial<mw.Api.Params.Action.CirrusConfigDump>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CirrusMappingDump `Partial<mw.Api.Params.Action.CirrusMappingDump>`} instead.
 */
export type CirrusSearchApiMappingDumpParams = Partial<mw.Api.Params.Action.CirrusMappingDump>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CirrusProfilesDump `Partial<mw.Api.Params.Action.CirrusProfilesDump>`} instead.
 */
export type CirrusSearchApiProfilesDumpParams = Partial<mw.Api.Params.Action.CirrusProfilesDump>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CirrusSettingsDump `Partial<mw.Api.Params.Action.CirrusSettingsDump>`} instead.
 */
export type CirrusSearchApiSettingsDumpParams = Partial<mw.Api.Params.Action.CirrusSettingsDump>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ClearHasMsg `Partial<mw.Api.Params.Action.ClearHasMsg>`} instead.
 */
export type ApiClearHasMsgParams = Partial<mw.Api.Params.Action.ClearHasMsg>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ClientLogin `Partial<mw.Api.Params.Action.ClientLogin>`} instead.
 */
export type ApiClientLoginParams = Partial<mw.Api.Params.Action.ClientLogin>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Collection `Partial<mw.Api.Params.Action.Collection>`} instead.
 */
export type CollectionApiCollectionParams = Partial<mw.Api.Params.Action.Collection>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Compare `Partial<mw.Api.Params.Action.Compare>`} instead.
 */
export type ApiComparePagesParams = Partial<mw.Api.Params.Action.Compare>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CreateAccount `Partial<mw.Api.Params.Action.CreateAccount>`} instead.
 */
export type ApiAMCreateAccountParams = Partial<mw.Api.Params.Action.CreateAccount>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CreateLocalAccount `Partial<mw.Api.Params.Action.CreateLocalAccount>`} instead.
 */
export type CentralAuthApiCreateLocalAccountParams = Partial<mw.Api.Params.Action.CreateLocalAccount>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CSPReport `Partial<mw.Api.Params.Action.CSPReport>`} instead.
 */
export type ApiCSPReportParams = Partial<mw.Api.Params.Action.CSPReport>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXDelete `Partial<mw.Api.Params.Action.CXDelete>`} instead.
 */
export type ContentTranslationActionApiContentTranslationDeleteParams = Partial<mw.Api.Params.Action.CXDelete>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXPublish `Partial<mw.Api.Params.Action.CXPublish>`} instead.
 */
export type ContentTranslationActionApiContentTranslationPublishParams = Partial<mw.Api.Params.Action.CXPublish>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXPublishSection `Partial<mw.Api.Params.Action.CXPublishSection>`} instead.
 */
export type ContentTranslationActionApiSectionTranslationPublishParams = Partial<mw.Api.Params.Action.CXPublishSection>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXSave `Partial<mw.Api.Params.Action.CXSave>`} instead.
 */
export type ContentTranslationActionApiContentTranslationSaveParams = Partial<mw.Api.Params.Action.CXSave>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXSuggestionList `Partial<mw.Api.Params.Action.CXSuggestionList>`} instead.
 */
export type ContentTranslationActionApiContentTranslationSuggestionListParams = Partial<mw.Api.Params.Action.CXSuggestionList>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.CXToken `Partial<mw.Api.Params.Action.CXToken>`} instead.
 */
export type ContentTranslationActionApiContentTranslationTokenParams = Partial<mw.Api.Params.Action.CXToken>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Delete `Partial<mw.Api.Params.Action.Delete>`} instead.
 */
export type ApiDeleteParams = Partial<mw.Api.Params.Action.Delete>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DeleteGlobalAccount `Partial<mw.Api.Params.Action.DeleteGlobalAccount>`} instead.
 */
export type CentralAuthApiDeleteGlobalAccountParams = Partial<mw.Api.Params.Action.DeleteGlobalAccount>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsCompare `Partial<mw.Api.Params.Action.DiscussionToolsCompare>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsCompareParams = Partial<mw.Api.Params.Action.DiscussionToolsCompare>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsEdit `Partial<mw.Api.Params.Action.DiscussionToolsEdit>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsEditParams = Partial<mw.Api.Params.Action.DiscussionToolsEdit>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsFindComment `Partial<mw.Api.Params.Action.DiscussionToolsFindComment>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsFindCommentParams = Partial<mw.Api.Params.Action.DiscussionToolsFindComment>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsGetSubscriptions `Partial<mw.Api.Params.Action.DiscussionToolsGetSubscriptions>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsGetSubscriptionsParams = Partial<mw.Api.Params.Action.DiscussionToolsGetSubscriptions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsPageInfo `Partial<mw.Api.Params.Action.DiscussionToolsPageInfo>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsPageInfoParams = Partial<mw.Api.Params.Action.DiscussionToolsPageInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsPreview `Partial<mw.Api.Params.Action.DiscussionToolsPreview>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsPreviewParams = Partial<mw.Api.Params.Action.DiscussionToolsPreview>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.DiscussionToolsSubscribe `Partial<mw.Api.Params.Action.DiscussionToolsSubscribe>`} instead.
 */
export type DiscussionToolsApiDiscussionToolsSubscribeParams = Partial<mw.Api.Params.Action.DiscussionToolsSubscribe>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EchoMarkRead `Partial<mw.Api.Params.Action.EchoMarkRead>`} instead.
 */
export type NotificationsApiEchoMarkReadParams = Partial<mw.Api.Params.Action.EchoMarkRead>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EchoMarkSeen `Partial<mw.Api.Params.Action.EchoMarkSeen>`} instead.
 */
export type NotificationsApiEchoMarkSeenParams = Partial<mw.Api.Params.Action.EchoMarkSeen>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EchoMute `Partial<mw.Api.Params.Action.EchoMute>`} instead.
 */
export type NotificationsApiEchoMuteParams = Partial<mw.Api.Params.Action.EchoMute>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EchoPushSubscriptions `Partial<mw.Api.Params.Action.EchoPushSubscriptions>`} instead.
 */
export type NotificationsPushApiEchoPushSubscriptionsParams = Partial<mw.Api.Params.Action.EchoPushSubscriptions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Edit `Partial<mw.Api.Params.Action.Edit>`} instead.
 */
export type ApiEditPageParams = Partial<mw.Api.Params.Action.Edit>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EditMassMessageList `Partial<mw.Api.Params.Action.EditMassMessageList>`} instead.
 */
export type MediaWikiMassMessageApiEditMassMessageListParams = Partial<mw.Api.Params.Action.EditMassMessageList>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.EmailUser `Partial<mw.Api.Params.Action.EmailUser>`} instead.
 */
export type ApiEmailUserParams = Partial<mw.Api.Params.Action.EmailUser>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ExpandTemplates `Partial<mw.Api.Params.Action.ExpandTemplates>`} instead.
 */
export type ApiExpandTemplatesParams = Partial<mw.Api.Params.Action.ExpandTemplates>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FancyCaptchaReload `Partial<mw.Api.Params.Action.FancyCaptchaReload>`} instead.
 */
export type ConfirmEditFancyCaptchaApiFancyCaptchaReloadParams = Partial<mw.Api.Params.Action.FancyCaptchaReload>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FeaturedFeed `Partial<mw.Api.Params.Action.FeaturedFeed>`} instead.
 */
export type FeaturedFeedsApiFeaturedFeedsParams = Partial<mw.Api.Params.Action.FeaturedFeed>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FeedContributions `Partial<mw.Api.Params.Action.FeedContributions>`} instead.
 */
export type ApiFeedContributionsParams = Partial<mw.Api.Params.Action.FeedContributions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FeedRecentChanges `Partial<mw.Api.Params.Action.FeedRecentChanges>`} instead.
 */
export type ApiFeedRecentChangesParams = Partial<mw.Api.Params.Action.FeedRecentChanges>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FeedWatchlist `Partial<mw.Api.Params.Action.FeedWatchlist>`} instead.
 */
export type ApiFeedWatchlistParams = Partial<mw.Api.Params.Action.FeedWatchlist>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FileRevert `Partial<mw.Api.Params.Action.FileRevert>`} instead.
 */
export type ApiFileRevertParams = Partial<mw.Api.Params.Action.FileRevert>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.FlagConfig `Partial<mw.Api.Params.Action.FlagConfig>`} instead.
 */
export type ApiFlagConfigParams = Partial<mw.Api.Params.Action.FlagConfig>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GlobalBlock `Partial<mw.Api.Params.Action.GlobalBlock>`} instead.
 */
export type GlobalBlockingApiGlobalBlockParams = Partial<mw.Api.Params.Action.GlobalBlock>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GlobalPreferenceOverrides `Partial<mw.Api.Params.Action.GlobalPreferenceOverrides>`} instead.
 */
export type GlobalPreferencesApiGlobalPreferenceOverridesParams = Partial<mw.Api.Params.Action.GlobalPreferenceOverrides>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GlobalPreferences `Partial<mw.Api.Params.Action.GlobalPreferences>`} instead.
 */
export type GlobalPreferencesApiGlobalPreferencesParams = Partial<mw.Api.Params.Action.GlobalPreferences>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GlobalUserRights `Partial<mw.Api.Params.Action.GlobalUserRights>`} instead.
 */
export type CentralAuthApiGlobalUserRightsParams = Partial<mw.Api.Params.Action.GlobalUserRights>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthInvalidateImageRecommendation `Partial<mw.Api.Params.Action.GrowthInvalidateImageRecommendation>`} instead.
 */
export type GrowthExperimentsApiInvalidateImageRecommendationParams = Partial<mw.Api.Params.Action.GrowthInvalidateImageRecommendation>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthInvalidatePersonalizedPraiseSuggestion `Partial<mw.Api.Params.Action.GrowthInvalidatePersonalizedPraiseSuggestion>`} instead.
 */
export type GrowthExperimentsApiInvalidatePersonalizedPraiseSuggestionParams = Partial<mw.Api.Params.Action.GrowthInvalidatePersonalizedPraiseSuggestion>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthManageMentorList `Partial<mw.Api.Params.Action.GrowthManageMentorList>`} instead.
 */
export type GrowthExperimentsApiManageMentorListParams = Partial<mw.Api.Params.Action.GrowthManageMentorList>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthMentorDashboardUpdateData `Partial<mw.Api.Params.Action.GrowthMentorDashboardUpdateData>`} instead.
 */
export type GrowthExperimentsApiMentorDashboardUpdateDataParams = Partial<mw.Api.Params.Action.GrowthMentorDashboardUpdateData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthSetMenteeStatus `Partial<mw.Api.Params.Action.GrowthSetMenteeStatus>`} instead.
 */
export type GrowthExperimentsApiSetMenteeStatusParams = Partial<mw.Api.Params.Action.GrowthSetMenteeStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthSetMentor `Partial<mw.Api.Params.Action.GrowthSetMentor>`} instead.
 */
export type GrowthExperimentsApiSetMentorParams = Partial<mw.Api.Params.Action.GrowthSetMentor>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.GrowthStarMentee `Partial<mw.Api.Params.Action.GrowthStarMentee>`} instead.
 */
export type GrowthExperimentsApiStarMenteeParams = Partial<mw.Api.Params.Action.GrowthStarMentee>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Help `Partial<mw.Api.Params.Action.Help>`} instead.
 */
export type ApiHelpParams = Partial<mw.Api.Params.Action.Help>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.HelpPanelQuestionPoster `Partial<mw.Api.Params.Action.HelpPanelQuestionPoster>`} instead.
 */
export type GrowthExperimentsApiHelpPanelPostQuestionParams = Partial<mw.Api.Params.Action.HelpPanelQuestionPoster>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.HomePageQuestionStore `Partial<mw.Api.Params.Action.HomePageQuestionStore>`} instead.
 */
export type GrowthExperimentsApiQuestionStoreParams = Partial<mw.Api.Params.Action.HomePageQuestionStore>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllCategories `Partial<mw.Api.Params.Action.Query.List.AllCategories>`} / {@link mw.Api.Params.Action.Purge.Generator.AllCategories `Partial<mw.Api.Params.Action.Purge.Generator.AllCategories>`} / {@link mw.Api.Params.Action.Query.Generator.AllCategories `Partial<mw.Api.Params.Action.Query.Generator.AllCategories>`} / {@link mw.Api.Params.Action.Watch.Generator.AllCategories `Partial<mw.Api.Params.Action.Watch.Generator.AllCategories>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllCategories `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllCategories>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllCategories `Partial<mw.Api.Params.Action.TemplateData.Generator.AllCategories>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllCategories `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllCategories>`} instead.
 */
export type ApiQueryAllCategoriesParams = Partial<mw.Api.Params.Action.Query.List.AllCategories>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllDeletedRevisions `Partial<mw.Api.Params.Action.Query.List.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.Purge.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.Purge.Generator.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.Query.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.Query.Generator.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.Watch.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.Watch.Generator.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.TemplateData.Generator.AllDeletedRevisions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllDeletedRevisions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllDeletedRevisions>`} instead.
 */
export type ApiQueryAllDeletedRevisionsParams = Partial<mw.Api.Params.Action.Query.List.AllDeletedRevisions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllFileUsages `Partial<mw.Api.Params.Action.Query.List.AllFileUsages>`} / {@link mw.Api.Params.Action.Purge.Generator.AllFileUsages `Partial<mw.Api.Params.Action.Purge.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.Query.Generator.AllFileUsages `Partial<mw.Api.Params.Action.Query.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.Watch.Generator.AllFileUsages `Partial<mw.Api.Params.Action.Watch.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllFileUsages `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllFileUsages `Partial<mw.Api.Params.Action.TemplateData.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllFileUsages `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllFileUsages>`} / {@link mw.Api.Params.Action.Query.List.AllLinks `Partial<mw.Api.Params.Action.Query.List.AllLinks>`} / {@link mw.Api.Params.Action.Purge.Generator.AllLinks `Partial<mw.Api.Params.Action.Purge.Generator.AllLinks>`} / {@link mw.Api.Params.Action.Query.Generator.AllLinks `Partial<mw.Api.Params.Action.Query.Generator.AllLinks>`} / {@link mw.Api.Params.Action.Watch.Generator.AllLinks `Partial<mw.Api.Params.Action.Watch.Generator.AllLinks>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllLinks `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllLinks>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllLinks `Partial<mw.Api.Params.Action.TemplateData.Generator.AllLinks>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllLinks `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllLinks>`} / {@link mw.Api.Params.Action.Query.List.AllRedirects `Partial<mw.Api.Params.Action.Query.List.AllRedirects>`} / {@link mw.Api.Params.Action.Purge.Generator.AllRedirects `Partial<mw.Api.Params.Action.Purge.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.Query.Generator.AllRedirects `Partial<mw.Api.Params.Action.Query.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.Watch.Generator.AllRedirects `Partial<mw.Api.Params.Action.Watch.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllRedirects `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllRedirects `Partial<mw.Api.Params.Action.TemplateData.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllRedirects `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllRedirects>`} / {@link mw.Api.Params.Action.Query.List.AllTransclusions `Partial<mw.Api.Params.Action.Query.List.AllTransclusions>`} / {@link mw.Api.Params.Action.Purge.Generator.AllTransclusions `Partial<mw.Api.Params.Action.Purge.Generator.AllTransclusions>`} / {@link mw.Api.Params.Action.Query.Generator.AllTransclusions `Partial<mw.Api.Params.Action.Query.Generator.AllTransclusions>`} / {@link mw.Api.Params.Action.Watch.Generator.AllTransclusions `Partial<mw.Api.Params.Action.Watch.Generator.AllTransclusions>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllTransclusions `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllTransclusions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllTransclusions `Partial<mw.Api.Params.Action.TemplateData.Generator.AllTransclusions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllTransclusions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllTransclusions>`} instead.
 */
export type ApiQueryAllLinksParams = Partial<mw.Api.Params.Action.Query.List.AllFileUsages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllImages `Partial<mw.Api.Params.Action.Query.List.AllImages>`} / {@link mw.Api.Params.Action.Purge.Generator.AllImages `Partial<mw.Api.Params.Action.Purge.Generator.AllImages>`} / {@link mw.Api.Params.Action.Query.Generator.AllImages `Partial<mw.Api.Params.Action.Query.Generator.AllImages>`} / {@link mw.Api.Params.Action.Watch.Generator.AllImages `Partial<mw.Api.Params.Action.Watch.Generator.AllImages>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllImages `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllImages>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllImages `Partial<mw.Api.Params.Action.TemplateData.Generator.AllImages>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllImages `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllImages>`} instead.
 */
export type ApiQueryAllImagesParams = Partial<mw.Api.Params.Action.Query.List.AllImages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllPages `Partial<mw.Api.Params.Action.Query.List.AllPages>`} / {@link mw.Api.Params.Action.Purge.Generator.AllPages `Partial<mw.Api.Params.Action.Purge.Generator.AllPages>`} / {@link mw.Api.Params.Action.Query.Generator.AllPages `Partial<mw.Api.Params.Action.Query.Generator.AllPages>`} / {@link mw.Api.Params.Action.Watch.Generator.AllPages `Partial<mw.Api.Params.Action.Watch.Generator.AllPages>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllPages `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllPages>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllPages `Partial<mw.Api.Params.Action.TemplateData.Generator.AllPages>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllPages `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllPages>`} instead.
 */
export type ApiQueryAllPagesParams = Partial<mw.Api.Params.Action.Query.List.AllPages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllRevisions `Partial<mw.Api.Params.Action.Query.List.AllRevisions>`} / {@link mw.Api.Params.Action.Purge.Generator.AllRevisions `Partial<mw.Api.Params.Action.Purge.Generator.AllRevisions>`} / {@link mw.Api.Params.Action.Query.Generator.AllRevisions `Partial<mw.Api.Params.Action.Query.Generator.AllRevisions>`} / {@link mw.Api.Params.Action.Watch.Generator.AllRevisions `Partial<mw.Api.Params.Action.Watch.Generator.AllRevisions>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.AllRevisions `Partial<mw.Api.Params.Action.ImageRotate.Generator.AllRevisions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.AllRevisions `Partial<mw.Api.Params.Action.TemplateData.Generator.AllRevisions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllRevisions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.AllRevisions>`} instead.
 */
export type ApiQueryAllRevisionsParams = Partial<mw.Api.Params.Action.Query.List.AllRevisions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Backlinks `Partial<mw.Api.Params.Action.Query.List.Backlinks>`} / {@link mw.Api.Params.Action.Purge.Generator.Backlinks `Partial<mw.Api.Params.Action.Purge.Generator.Backlinks>`} / {@link mw.Api.Params.Action.Query.Generator.Backlinks `Partial<mw.Api.Params.Action.Query.Generator.Backlinks>`} / {@link mw.Api.Params.Action.Watch.Generator.Backlinks `Partial<mw.Api.Params.Action.Watch.Generator.Backlinks>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Backlinks `Partial<mw.Api.Params.Action.ImageRotate.Generator.Backlinks>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Backlinks `Partial<mw.Api.Params.Action.TemplateData.Generator.Backlinks>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Backlinks `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Backlinks>`} / {@link mw.Api.Params.Action.Query.List.Embeddedin `Partial<mw.Api.Params.Action.Query.List.Embeddedin>`} / {@link mw.Api.Params.Action.Purge.Generator.Embeddedin `Partial<mw.Api.Params.Action.Purge.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.Query.Generator.Embeddedin `Partial<mw.Api.Params.Action.Query.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.Watch.Generator.Embeddedin `Partial<mw.Api.Params.Action.Watch.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Embeddedin `Partial<mw.Api.Params.Action.ImageRotate.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Embeddedin `Partial<mw.Api.Params.Action.TemplateData.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Embeddedin `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Embeddedin>`} / {@link mw.Api.Params.Action.Query.List.ImageUsage `Partial<mw.Api.Params.Action.Query.List.ImageUsage>`} / {@link mw.Api.Params.Action.Purge.Generator.ImageUsage `Partial<mw.Api.Params.Action.Purge.Generator.ImageUsage>`} / {@link mw.Api.Params.Action.Query.Generator.ImageUsage `Partial<mw.Api.Params.Action.Query.Generator.ImageUsage>`} / {@link mw.Api.Params.Action.Watch.Generator.ImageUsage `Partial<mw.Api.Params.Action.Watch.Generator.ImageUsage>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.ImageUsage `Partial<mw.Api.Params.Action.ImageRotate.Generator.ImageUsage>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ImageUsage `Partial<mw.Api.Params.Action.TemplateData.Generator.ImageUsage>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ImageUsage `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ImageUsage>`} instead.
 */
export type ApiQueryBacklinksParams = Partial<mw.Api.Params.Action.Query.List.Backlinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Categories `Partial<mw.Api.Params.Action.Query.Prop.Categories>`} / {@link mw.Api.Params.Action.Purge.Generator.Categories `Partial<mw.Api.Params.Action.Purge.Generator.Categories>`} / {@link mw.Api.Params.Action.Query.Generator.Categories `Partial<mw.Api.Params.Action.Query.Generator.Categories>`} / {@link mw.Api.Params.Action.Watch.Generator.Categories `Partial<mw.Api.Params.Action.Watch.Generator.Categories>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Categories `Partial<mw.Api.Params.Action.ImageRotate.Generator.Categories>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Categories `Partial<mw.Api.Params.Action.TemplateData.Generator.Categories>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Categories `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Categories>`} instead.
 */
export type ApiQueryCategoriesParams = Partial<mw.Api.Params.Action.Query.Prop.Categories>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CategoryMembers `Partial<mw.Api.Params.Action.Query.List.CategoryMembers>`} / {@link mw.Api.Params.Action.Purge.Generator.CategoryMembers `Partial<mw.Api.Params.Action.Purge.Generator.CategoryMembers>`} / {@link mw.Api.Params.Action.Query.Generator.CategoryMembers `Partial<mw.Api.Params.Action.Query.Generator.CategoryMembers>`} / {@link mw.Api.Params.Action.Watch.Generator.CategoryMembers `Partial<mw.Api.Params.Action.Watch.Generator.CategoryMembers>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.CategoryMembers `Partial<mw.Api.Params.Action.ImageRotate.Generator.CategoryMembers>`} / {@link mw.Api.Params.Action.TemplateData.Generator.CategoryMembers `Partial<mw.Api.Params.Action.TemplateData.Generator.CategoryMembers>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.CategoryMembers `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.CategoryMembers>`} instead.
 */
export type ApiQueryCategoryMembersParams = Partial<mw.Api.Params.Action.Query.List.CategoryMembers>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.DeletedRevisions `Partial<mw.Api.Params.Action.Query.Prop.DeletedRevisions>`} / {@link mw.Api.Params.Action.Purge.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.Purge.Generator.DeletedRevisions>`} / {@link mw.Api.Params.Action.Query.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.Query.Generator.DeletedRevisions>`} / {@link mw.Api.Params.Action.Watch.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.Watch.Generator.DeletedRevisions>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.ImageRotate.Generator.DeletedRevisions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.TemplateData.Generator.DeletedRevisions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.DeletedRevisions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.DeletedRevisions>`} instead.
 */
export type ApiQueryDeletedRevisionsParams = Partial<mw.Api.Params.Action.Query.Prop.DeletedRevisions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.DuplicateFiles `Partial<mw.Api.Params.Action.Query.Prop.DuplicateFiles>`} / {@link mw.Api.Params.Action.Purge.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.Purge.Generator.DuplicateFiles>`} / {@link mw.Api.Params.Action.Query.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.Query.Generator.DuplicateFiles>`} / {@link mw.Api.Params.Action.Watch.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.Watch.Generator.DuplicateFiles>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.ImageRotate.Generator.DuplicateFiles>`} / {@link mw.Api.Params.Action.TemplateData.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.TemplateData.Generator.DuplicateFiles>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.DuplicateFiles `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.DuplicateFiles>`} instead.
 */
export type ApiQueryDuplicateFilesParams = Partial<mw.Api.Params.Action.Query.Prop.DuplicateFiles>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ExtUrlUsage `Partial<mw.Api.Params.Action.Query.List.ExtUrlUsage>`} / {@link mw.Api.Params.Action.Purge.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.Purge.Generator.ExtUrlUsage>`} / {@link mw.Api.Params.Action.Query.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.Query.Generator.ExtUrlUsage>`} / {@link mw.Api.Params.Action.Watch.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.Watch.Generator.ExtUrlUsage>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.ImageRotate.Generator.ExtUrlUsage>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.TemplateData.Generator.ExtUrlUsage>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ExtUrlUsage `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ExtUrlUsage>`} instead.
 */
export type ApiQueryExtLinksUsageParams = Partial<mw.Api.Params.Action.Query.List.ExtUrlUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.FileUsage `Partial<mw.Api.Params.Action.Query.Prop.FileUsage>`} / {@link mw.Api.Params.Action.Purge.Generator.FileUsage `Partial<mw.Api.Params.Action.Purge.Generator.FileUsage>`} / {@link mw.Api.Params.Action.Query.Generator.FileUsage `Partial<mw.Api.Params.Action.Query.Generator.FileUsage>`} / {@link mw.Api.Params.Action.Watch.Generator.FileUsage `Partial<mw.Api.Params.Action.Watch.Generator.FileUsage>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.FileUsage `Partial<mw.Api.Params.Action.ImageRotate.Generator.FileUsage>`} / {@link mw.Api.Params.Action.TemplateData.Generator.FileUsage `Partial<mw.Api.Params.Action.TemplateData.Generator.FileUsage>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.FileUsage `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.FileUsage>`} / {@link mw.Api.Params.Action.Query.Prop.LinksHere `Partial<mw.Api.Params.Action.Query.Prop.LinksHere>`} / {@link mw.Api.Params.Action.Purge.Generator.LinksHere `Partial<mw.Api.Params.Action.Purge.Generator.LinksHere>`} / {@link mw.Api.Params.Action.Query.Generator.LinksHere `Partial<mw.Api.Params.Action.Query.Generator.LinksHere>`} / {@link mw.Api.Params.Action.Watch.Generator.LinksHere `Partial<mw.Api.Params.Action.Watch.Generator.LinksHere>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.LinksHere `Partial<mw.Api.Params.Action.ImageRotate.Generator.LinksHere>`} / {@link mw.Api.Params.Action.TemplateData.Generator.LinksHere `Partial<mw.Api.Params.Action.TemplateData.Generator.LinksHere>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.LinksHere `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.LinksHere>`} / {@link mw.Api.Params.Action.Query.Prop.Redirects `Partial<mw.Api.Params.Action.Query.Prop.Redirects>`} / {@link mw.Api.Params.Action.Purge.Generator.Redirects `Partial<mw.Api.Params.Action.Purge.Generator.Redirects>`} / {@link mw.Api.Params.Action.Query.Generator.Redirects `Partial<mw.Api.Params.Action.Query.Generator.Redirects>`} / {@link mw.Api.Params.Action.Watch.Generator.Redirects `Partial<mw.Api.Params.Action.Watch.Generator.Redirects>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Redirects `Partial<mw.Api.Params.Action.ImageRotate.Generator.Redirects>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Redirects `Partial<mw.Api.Params.Action.TemplateData.Generator.Redirects>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Redirects `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Redirects>`} / {@link mw.Api.Params.Action.Query.Prop.Transcludedin `Partial<mw.Api.Params.Action.Query.Prop.Transcludedin>`} / {@link mw.Api.Params.Action.Purge.Generator.Transcludedin `Partial<mw.Api.Params.Action.Purge.Generator.Transcludedin>`} / {@link mw.Api.Params.Action.Query.Generator.Transcludedin `Partial<mw.Api.Params.Action.Query.Generator.Transcludedin>`} / {@link mw.Api.Params.Action.Watch.Generator.Transcludedin `Partial<mw.Api.Params.Action.Watch.Generator.Transcludedin>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Transcludedin `Partial<mw.Api.Params.Action.ImageRotate.Generator.Transcludedin>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Transcludedin `Partial<mw.Api.Params.Action.TemplateData.Generator.Transcludedin>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Transcludedin `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Transcludedin>`} instead.
 */
export type ApiQueryBacklinkspropParams = Partial<mw.Api.Params.Action.Query.Prop.FileUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Images `Partial<mw.Api.Params.Action.Query.Prop.Images>`} / {@link mw.Api.Params.Action.Purge.Generator.Images `Partial<mw.Api.Params.Action.Purge.Generator.Images>`} / {@link mw.Api.Params.Action.Query.Generator.Images `Partial<mw.Api.Params.Action.Query.Generator.Images>`} / {@link mw.Api.Params.Action.Watch.Generator.Images `Partial<mw.Api.Params.Action.Watch.Generator.Images>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Images `Partial<mw.Api.Params.Action.ImageRotate.Generator.Images>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Images `Partial<mw.Api.Params.Action.TemplateData.Generator.Images>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Images `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Images>`} instead.
 */
export type ApiQueryImagesParams = Partial<mw.Api.Params.Action.Query.Prop.Images>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.IWBacklinks `Partial<mw.Api.Params.Action.Query.List.IWBacklinks>`} / {@link mw.Api.Params.Action.Purge.Generator.IWBacklinks `Partial<mw.Api.Params.Action.Purge.Generator.IWBacklinks>`} / {@link mw.Api.Params.Action.Query.Generator.IWBacklinks `Partial<mw.Api.Params.Action.Query.Generator.IWBacklinks>`} / {@link mw.Api.Params.Action.Watch.Generator.IWBacklinks `Partial<mw.Api.Params.Action.Watch.Generator.IWBacklinks>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.IWBacklinks `Partial<mw.Api.Params.Action.ImageRotate.Generator.IWBacklinks>`} / {@link mw.Api.Params.Action.TemplateData.Generator.IWBacklinks `Partial<mw.Api.Params.Action.TemplateData.Generator.IWBacklinks>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.IWBacklinks `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.IWBacklinks>`} instead.
 */
export type ApiQueryIWBacklinksParams = Partial<mw.Api.Params.Action.Query.List.IWBacklinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.LangBacklinks `Partial<mw.Api.Params.Action.Query.List.LangBacklinks>`} / {@link mw.Api.Params.Action.Purge.Generator.LangBacklinks `Partial<mw.Api.Params.Action.Purge.Generator.LangBacklinks>`} / {@link mw.Api.Params.Action.Query.Generator.LangBacklinks `Partial<mw.Api.Params.Action.Query.Generator.LangBacklinks>`} / {@link mw.Api.Params.Action.Watch.Generator.LangBacklinks `Partial<mw.Api.Params.Action.Watch.Generator.LangBacklinks>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.LangBacklinks `Partial<mw.Api.Params.Action.ImageRotate.Generator.LangBacklinks>`} / {@link mw.Api.Params.Action.TemplateData.Generator.LangBacklinks `Partial<mw.Api.Params.Action.TemplateData.Generator.LangBacklinks>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.LangBacklinks `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.LangBacklinks>`} instead.
 */
export type ApiQueryLangBacklinksParams = Partial<mw.Api.Params.Action.Query.List.LangBacklinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Links `Partial<mw.Api.Params.Action.Query.Prop.Links>`} / {@link mw.Api.Params.Action.Purge.Generator.Links `Partial<mw.Api.Params.Action.Purge.Generator.Links>`} / {@link mw.Api.Params.Action.Query.Generator.Links `Partial<mw.Api.Params.Action.Query.Generator.Links>`} / {@link mw.Api.Params.Action.Watch.Generator.Links `Partial<mw.Api.Params.Action.Watch.Generator.Links>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Links `Partial<mw.Api.Params.Action.ImageRotate.Generator.Links>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Links `Partial<mw.Api.Params.Action.TemplateData.Generator.Links>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Links `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Links>`} / {@link mw.Api.Params.Action.Query.Prop.Templates `Partial<mw.Api.Params.Action.Query.Prop.Templates>`} / {@link mw.Api.Params.Action.Purge.Generator.Templates `Partial<mw.Api.Params.Action.Purge.Generator.Templates>`} / {@link mw.Api.Params.Action.Query.Generator.Templates `Partial<mw.Api.Params.Action.Query.Generator.Templates>`} / {@link mw.Api.Params.Action.Watch.Generator.Templates `Partial<mw.Api.Params.Action.Watch.Generator.Templates>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Templates `Partial<mw.Api.Params.Action.ImageRotate.Generator.Templates>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Templates `Partial<mw.Api.Params.Action.TemplateData.Generator.Templates>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Templates `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Templates>`} instead.
 */
export type ApiQueryLinksParams = Partial<mw.Api.Params.Action.Query.Prop.Links>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.PagesWithProp `Partial<mw.Api.Params.Action.Query.List.PagesWithProp>`} / {@link mw.Api.Params.Action.Purge.Generator.PagesWithProp `Partial<mw.Api.Params.Action.Purge.Generator.PagesWithProp>`} / {@link mw.Api.Params.Action.Query.Generator.PagesWithProp `Partial<mw.Api.Params.Action.Query.Generator.PagesWithProp>`} / {@link mw.Api.Params.Action.Watch.Generator.PagesWithProp `Partial<mw.Api.Params.Action.Watch.Generator.PagesWithProp>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.PagesWithProp `Partial<mw.Api.Params.Action.ImageRotate.Generator.PagesWithProp>`} / {@link mw.Api.Params.Action.TemplateData.Generator.PagesWithProp `Partial<mw.Api.Params.Action.TemplateData.Generator.PagesWithProp>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.PagesWithProp `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.PagesWithProp>`} instead.
 */
export type ApiQueryPagesWithPropParams = Partial<mw.Api.Params.Action.Query.List.PagesWithProp>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.PrefixSearch `Partial<mw.Api.Params.Action.Query.List.PrefixSearch>`} / {@link mw.Api.Params.Action.Purge.Generator.PrefixSearch `Partial<mw.Api.Params.Action.Purge.Generator.PrefixSearch>`} / {@link mw.Api.Params.Action.Query.Generator.PrefixSearch `Partial<mw.Api.Params.Action.Query.Generator.PrefixSearch>`} / {@link mw.Api.Params.Action.Watch.Generator.PrefixSearch `Partial<mw.Api.Params.Action.Watch.Generator.PrefixSearch>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.PrefixSearch `Partial<mw.Api.Params.Action.ImageRotate.Generator.PrefixSearch>`} / {@link mw.Api.Params.Action.TemplateData.Generator.PrefixSearch `Partial<mw.Api.Params.Action.TemplateData.Generator.PrefixSearch>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.PrefixSearch `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.PrefixSearch>`} instead.
 */
export type ApiQueryPrefixSearchParams = Partial<mw.Api.Params.Action.Query.List.PrefixSearch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ProtectedTitles `Partial<mw.Api.Params.Action.Query.List.ProtectedTitles>`} / {@link mw.Api.Params.Action.Purge.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.Purge.Generator.ProtectedTitles>`} / {@link mw.Api.Params.Action.Query.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.Query.Generator.ProtectedTitles>`} / {@link mw.Api.Params.Action.Watch.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.Watch.Generator.ProtectedTitles>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.ImageRotate.Generator.ProtectedTitles>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.TemplateData.Generator.ProtectedTitles>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ProtectedTitles `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ProtectedTitles>`} instead.
 */
export type ApiQueryProtectedTitlesParams = Partial<mw.Api.Params.Action.Query.List.ProtectedTitles>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.QueryPage `Partial<mw.Api.Params.Action.Query.List.QueryPage>`} / {@link mw.Api.Params.Action.Purge.Generator.QueryPage `Partial<mw.Api.Params.Action.Purge.Generator.QueryPage>`} / {@link mw.Api.Params.Action.Query.Generator.QueryPage `Partial<mw.Api.Params.Action.Query.Generator.QueryPage>`} / {@link mw.Api.Params.Action.Watch.Generator.QueryPage `Partial<mw.Api.Params.Action.Watch.Generator.QueryPage>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.QueryPage `Partial<mw.Api.Params.Action.ImageRotate.Generator.QueryPage>`} / {@link mw.Api.Params.Action.TemplateData.Generator.QueryPage `Partial<mw.Api.Params.Action.TemplateData.Generator.QueryPage>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.QueryPage `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.QueryPage>`} instead.
 */
export type ApiQueryQueryPageParams = Partial<mw.Api.Params.Action.Query.List.QueryPage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Random `Partial<mw.Api.Params.Action.Query.List.Random>`} / {@link mw.Api.Params.Action.Purge.Generator.Random `Partial<mw.Api.Params.Action.Purge.Generator.Random>`} / {@link mw.Api.Params.Action.Query.Generator.Random `Partial<mw.Api.Params.Action.Query.Generator.Random>`} / {@link mw.Api.Params.Action.Watch.Generator.Random `Partial<mw.Api.Params.Action.Watch.Generator.Random>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Random `Partial<mw.Api.Params.Action.ImageRotate.Generator.Random>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Random `Partial<mw.Api.Params.Action.TemplateData.Generator.Random>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Random `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Random>`} instead.
 */
export type ApiQueryRandomParams = Partial<mw.Api.Params.Action.Query.List.Random>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.RecentChanges `Partial<mw.Api.Params.Action.Query.List.RecentChanges>`} / {@link mw.Api.Params.Action.Purge.Generator.RecentChanges `Partial<mw.Api.Params.Action.Purge.Generator.RecentChanges>`} / {@link mw.Api.Params.Action.Query.Generator.RecentChanges `Partial<mw.Api.Params.Action.Query.Generator.RecentChanges>`} / {@link mw.Api.Params.Action.Watch.Generator.RecentChanges `Partial<mw.Api.Params.Action.Watch.Generator.RecentChanges>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.RecentChanges `Partial<mw.Api.Params.Action.ImageRotate.Generator.RecentChanges>`} / {@link mw.Api.Params.Action.TemplateData.Generator.RecentChanges `Partial<mw.Api.Params.Action.TemplateData.Generator.RecentChanges>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.RecentChanges `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.RecentChanges>`} instead.
 */
export type ApiQueryRecentChangesParams = Partial<mw.Api.Params.Action.Query.List.RecentChanges>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Revisions `Partial<mw.Api.Params.Action.Query.Prop.Revisions>`} / {@link mw.Api.Params.Action.Purge.Generator.Revisions `Partial<mw.Api.Params.Action.Purge.Generator.Revisions>`} / {@link mw.Api.Params.Action.Query.Generator.Revisions `Partial<mw.Api.Params.Action.Query.Generator.Revisions>`} / {@link mw.Api.Params.Action.Watch.Generator.Revisions `Partial<mw.Api.Params.Action.Watch.Generator.Revisions>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Revisions `Partial<mw.Api.Params.Action.ImageRotate.Generator.Revisions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Revisions `Partial<mw.Api.Params.Action.TemplateData.Generator.Revisions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Revisions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Revisions>`} instead.
 */
export type ApiQueryRevisionsParams = Partial<mw.Api.Params.Action.Query.Prop.Revisions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Search `Partial<mw.Api.Params.Action.Query.List.Search>`} / {@link mw.Api.Params.Action.Purge.Generator.Search `Partial<mw.Api.Params.Action.Purge.Generator.Search>`} / {@link mw.Api.Params.Action.Query.Generator.Search `Partial<mw.Api.Params.Action.Query.Generator.Search>`} / {@link mw.Api.Params.Action.Watch.Generator.Search `Partial<mw.Api.Params.Action.Watch.Generator.Search>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Search `Partial<mw.Api.Params.Action.ImageRotate.Generator.Search>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Search `Partial<mw.Api.Params.Action.TemplateData.Generator.Search>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Search `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Search>`} instead.
 */
export type ApiQuerySearchParams = Partial<mw.Api.Params.Action.Query.List.Search>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Watchlist `Partial<mw.Api.Params.Action.Query.List.Watchlist>`} / {@link mw.Api.Params.Action.Purge.Generator.Watchlist `Partial<mw.Api.Params.Action.Purge.Generator.Watchlist>`} / {@link mw.Api.Params.Action.Query.Generator.Watchlist `Partial<mw.Api.Params.Action.Query.Generator.Watchlist>`} / {@link mw.Api.Params.Action.Watch.Generator.Watchlist `Partial<mw.Api.Params.Action.Watch.Generator.Watchlist>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.Watchlist `Partial<mw.Api.Params.Action.ImageRotate.Generator.Watchlist>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Watchlist `Partial<mw.Api.Params.Action.TemplateData.Generator.Watchlist>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Watchlist `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Watchlist>`} instead.
 */
export type ApiQueryWatchlistParams = Partial<mw.Api.Params.Action.Query.List.Watchlist>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.WatchlistRaw `Partial<mw.Api.Params.Action.Query.List.WatchlistRaw>`} / {@link mw.Api.Params.Action.Purge.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.Purge.Generator.WatchlistRaw>`} / {@link mw.Api.Params.Action.Query.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.Query.Generator.WatchlistRaw>`} / {@link mw.Api.Params.Action.Watch.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.Watch.Generator.WatchlistRaw>`} / {@link mw.Api.Params.Action.ImageRotate.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.ImageRotate.Generator.WatchlistRaw>`} / {@link mw.Api.Params.Action.TemplateData.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.TemplateData.Generator.WatchlistRaw>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.WatchlistRaw `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.WatchlistRaw>`} instead.
 */
export type ApiQueryWatchlistRawParams = Partial<mw.Api.Params.Action.Query.List.WatchlistRaw>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ImageRotate `Partial<mw.Api.Params.Action.ImageRotate>`} instead.
 */
export type ApiDisabledParams = Partial<mw.Api.Params.Action.ImageRotate>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Import `Partial<mw.Api.Params.Action.Import>`} instead.
 */
export type ApiImportParams = Partial<mw.Api.Params.Action.Import>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.JsonConfig `Partial<mw.Api.Params.Action.JsonConfig>`} instead.
 */
export type JsonConfigJCApiParams = Partial<mw.Api.Params.Action.JsonConfig>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.JsonData `Partial<mw.Api.Params.Action.JsonData>`} instead.
 */
export type JsonConfigJCDataApiParams = Partial<mw.Api.Params.Action.JsonData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.LanguageSearch `Partial<mw.Api.Params.Action.LanguageSearch>`} instead.
 */
export type UniversalLanguageSelectorApiLanguageSearchParams = Partial<mw.Api.Params.Action.LanguageSearch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.LinkAccount `Partial<mw.Api.Params.Action.LinkAccount>`} instead.
 */
export type ApiLinkAccountParams = Partial<mw.Api.Params.Action.LinkAccount>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Login `Partial<mw.Api.Params.Action.Login>`} instead.
 */
export type ApiLoginParams = Partial<mw.Api.Params.Action.Login>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Logout `Partial<mw.Api.Params.Action.Logout>`} instead.
 */
export type ApiLogoutParams = Partial<mw.Api.Params.Action.Logout>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ManageTags `Partial<mw.Api.Params.Action.ManageTags>`} instead.
 */
export type ApiManageTagsParams = Partial<mw.Api.Params.Action.ManageTags>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.MassMessage `Partial<mw.Api.Params.Action.MassMessage>`} instead.
 */
export type MediaWikiMassMessageApiMassMessageParams = Partial<mw.Api.Params.Action.MassMessage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.MergeHistory `Partial<mw.Api.Params.Action.MergeHistory>`} instead.
 */
export type ApiMergeHistoryParams = Partial<mw.Api.Params.Action.MergeHistory>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Move `Partial<mw.Api.Params.Action.Move>`} instead.
 */
export type ApiMoveParams = Partial<mw.Api.Params.Action.Move>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.OATHValidate `Partial<mw.Api.Params.Action.OATHValidate>`} instead.
 */
export type OATHAuthApiModuleApiOATHValidateParams = Partial<mw.Api.Params.Action.OATHValidate>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.OpenSearch `Partial<mw.Api.Params.Action.OpenSearch>`} instead.
 */
export type ApiOpenSearchParams = Partial<mw.Api.Params.Action.OpenSearch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Options `Partial<mw.Api.Params.Action.Options>`} instead.
 */
export type ApiOptionsParams = Partial<mw.Api.Params.Action.Options>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.PageTriageAction `Partial<mw.Api.Params.Action.PageTriageAction>`} instead.
 */
export type PageTriageApiPageTriageActionParams = Partial<mw.Api.Params.Action.PageTriageAction>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.PageTriageList `Partial<mw.Api.Params.Action.PageTriageList>`} instead.
 */
export type PageTriageApiPageTriageListParams = Partial<mw.Api.Params.Action.PageTriageList>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.PageTriageStats `Partial<mw.Api.Params.Action.PageTriageStats>`} instead.
 */
export type PageTriageApiPageTriageStatsParams = Partial<mw.Api.Params.Action.PageTriageStats>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.PageTriageTagCopyvio `Partial<mw.Api.Params.Action.PageTriageTagCopyvio>`} instead.
 */
export type PageTriageApiPageTriageTagCopyvioParams = Partial<mw.Api.Params.Action.PageTriageTagCopyvio>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.PageTriageTagging `Partial<mw.Api.Params.Action.PageTriageTagging>`} instead.
 */
export type PageTriageApiPageTriageTaggingParams = Partial<mw.Api.Params.Action.PageTriageTagging>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ParamInfo `Partial<mw.Api.Params.Action.ParamInfo>`} instead.
 */
export type ApiParamInfoParams = Partial<mw.Api.Params.Action.ParamInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Parse `Partial<mw.Api.Params.Action.Parse>`} instead.
 */
export type ApiParseParams = Partial<mw.Api.Params.Action.Parse>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ParserMigration `Partial<mw.Api.Params.Action.ParserMigration>`} instead.
 */
export type ParserMigrationApiParserMigrationParams = Partial<mw.Api.Params.Action.ParserMigration>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Patrol `Partial<mw.Api.Params.Action.Patrol>`} instead.
 */
export type ApiPatrolParams = Partial<mw.Api.Params.Action.Patrol>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Protect `Partial<mw.Api.Params.Action.Protect>`} instead.
 */
export type ApiProtectParams = Partial<mw.Api.Params.Action.Protect>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ContentTranslation `Partial<mw.Api.Params.Action.Query.List.ContentTranslation>`} / {@link mw.Api.Params.Action.Purge.Generator.ContentTranslation `Partial<mw.Api.Params.Action.Purge.Generator.ContentTranslation>`} / {@link mw.Api.Params.Action.Query.Generator.ContentTranslation `Partial<mw.Api.Params.Action.Query.Generator.ContentTranslation>`} / {@link mw.Api.Params.Action.Watch.Generator.ContentTranslation `Partial<mw.Api.Params.Action.Watch.Generator.ContentTranslation>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ContentTranslation `Partial<mw.Api.Params.Action.TemplateData.Generator.ContentTranslation>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ContentTranslation `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ContentTranslation>`} instead.
 */
export type ContentTranslationActionApiQueryContentTranslationParams = Partial<mw.Api.Params.Action.Query.List.ContentTranslation>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.Query.List.ContentTranslationSuggestions>`} / {@link mw.Api.Params.Action.Purge.Generator.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.Purge.Generator.ContentTranslationSuggestions>`} / {@link mw.Api.Params.Action.Query.Generator.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.Query.Generator.ContentTranslationSuggestions>`} / {@link mw.Api.Params.Action.Watch.Generator.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.Watch.Generator.ContentTranslationSuggestions>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.TemplateData.Generator.ContentTranslationSuggestions>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ContentTranslationSuggestions `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ContentTranslationSuggestions>`} instead.
 */
export type ContentTranslationActionApiQueryContentTranslationSuggestionsParams = Partial<mw.Api.Params.Action.Query.List.ContentTranslationSuggestions>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GeoSearch `Partial<mw.Api.Params.Action.Query.List.GeoSearch>`} / {@link mw.Api.Params.Action.Purge.Generator.GeoSearch `Partial<mw.Api.Params.Action.Purge.Generator.GeoSearch>`} / {@link mw.Api.Params.Action.Query.Generator.GeoSearch `Partial<mw.Api.Params.Action.Query.Generator.GeoSearch>`} / {@link mw.Api.Params.Action.Watch.Generator.GeoSearch `Partial<mw.Api.Params.Action.Watch.Generator.GeoSearch>`} / {@link mw.Api.Params.Action.TemplateData.Generator.GeoSearch `Partial<mw.Api.Params.Action.TemplateData.Generator.GeoSearch>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.GeoSearch `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.GeoSearch>`} instead.
 */
export type GeoDataApiQueryGeoSearchElasticParams = Partial<mw.Api.Params.Action.Query.List.GeoSearch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GrowthTasks `Partial<mw.Api.Params.Action.Query.List.GrowthTasks>`} / {@link mw.Api.Params.Action.Purge.Generator.GrowthTasks `Partial<mw.Api.Params.Action.Purge.Generator.GrowthTasks>`} / {@link mw.Api.Params.Action.Query.Generator.GrowthTasks `Partial<mw.Api.Params.Action.Query.Generator.GrowthTasks>`} / {@link mw.Api.Params.Action.Watch.Generator.GrowthTasks `Partial<mw.Api.Params.Action.Watch.Generator.GrowthTasks>`} / {@link mw.Api.Params.Action.TemplateData.Generator.GrowthTasks `Partial<mw.Api.Params.Action.TemplateData.Generator.GrowthTasks>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.GrowthTasks `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.GrowthTasks>`} instead.
 */
export type GrowthExperimentsApiQueryGrowthTasksParams = Partial<mw.Api.Params.Action.Query.List.GrowthTasks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.MostViewed `Partial<mw.Api.Params.Action.Query.List.MostViewed>`} / {@link mw.Api.Params.Action.Purge.Generator.MostViewed `Partial<mw.Api.Params.Action.Purge.Generator.MostViewed>`} / {@link mw.Api.Params.Action.Query.Generator.MostViewed `Partial<mw.Api.Params.Action.Query.Generator.MostViewed>`} / {@link mw.Api.Params.Action.Watch.Generator.MostViewed `Partial<mw.Api.Params.Action.Watch.Generator.MostViewed>`} / {@link mw.Api.Params.Action.TemplateData.Generator.MostViewed `Partial<mw.Api.Params.Action.TemplateData.Generator.MostViewed>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.MostViewed `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.MostViewed>`} instead.
 */
export type PageViewInfoApiQueryMostViewedParams = Partial<mw.Api.Params.Action.Query.List.MostViewed>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Oldreviewedpages `Partial<mw.Api.Params.Action.Query.List.Oldreviewedpages>`} / {@link mw.Api.Params.Action.Purge.Generator.Oldreviewedpages `Partial<mw.Api.Params.Action.Purge.Generator.Oldreviewedpages>`} / {@link mw.Api.Params.Action.Query.Generator.Oldreviewedpages `Partial<mw.Api.Params.Action.Query.Generator.Oldreviewedpages>`} / {@link mw.Api.Params.Action.Watch.Generator.Oldreviewedpages `Partial<mw.Api.Params.Action.Watch.Generator.Oldreviewedpages>`} / {@link mw.Api.Params.Action.TemplateData.Generator.Oldreviewedpages `Partial<mw.Api.Params.Action.TemplateData.Generator.Oldreviewedpages>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.Oldreviewedpages `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.Oldreviewedpages>`} instead.
 */
export type ApiQueryOldreviewedpagesParams = Partial<mw.Api.Params.Action.Query.List.Oldreviewedpages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ProjectPages `Partial<mw.Api.Params.Action.Query.List.ProjectPages>`} / {@link mw.Api.Params.Action.Purge.Generator.ProjectPages `Partial<mw.Api.Params.Action.Purge.Generator.ProjectPages>`} / {@link mw.Api.Params.Action.Query.Generator.ProjectPages `Partial<mw.Api.Params.Action.Query.Generator.ProjectPages>`} / {@link mw.Api.Params.Action.Watch.Generator.ProjectPages `Partial<mw.Api.Params.Action.Watch.Generator.ProjectPages>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ProjectPages `Partial<mw.Api.Params.Action.TemplateData.Generator.ProjectPages>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ProjectPages `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ProjectPages>`} instead.
 */
export type PageAssessmentsApiQueryProjectPagesParams = Partial<mw.Api.Params.Action.Query.List.ProjectPages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ReadingListEntries `Partial<mw.Api.Params.Action.Query.List.ReadingListEntries>`} / {@link mw.Api.Params.Action.Purge.Generator.ReadingListEntries `Partial<mw.Api.Params.Action.Purge.Generator.ReadingListEntries>`} / {@link mw.Api.Params.Action.Query.Generator.ReadingListEntries `Partial<mw.Api.Params.Action.Query.Generator.ReadingListEntries>`} / {@link mw.Api.Params.Action.Watch.Generator.ReadingListEntries `Partial<mw.Api.Params.Action.Watch.Generator.ReadingListEntries>`} / {@link mw.Api.Params.Action.TemplateData.Generator.ReadingListEntries `Partial<mw.Api.Params.Action.TemplateData.Generator.ReadingListEntries>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.ReadingListEntries `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.ReadingListEntries>`} instead.
 */
export type ReadingListsApiQueryReadingListEntriesParams = Partial<mw.Api.Params.Action.Query.List.ReadingListEntries>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.WBListEntityUsage `Partial<mw.Api.Params.Action.Query.List.WBListEntityUsage>`} / {@link mw.Api.Params.Action.Purge.Generator.WBListEntityUsage `Partial<mw.Api.Params.Action.Purge.Generator.WBListEntityUsage>`} / {@link mw.Api.Params.Action.Query.Generator.WBListEntityUsage `Partial<mw.Api.Params.Action.Query.Generator.WBListEntityUsage>`} / {@link mw.Api.Params.Action.Watch.Generator.WBListEntityUsage `Partial<mw.Api.Params.Action.Watch.Generator.WBListEntityUsage>`} / {@link mw.Api.Params.Action.TemplateData.Generator.WBListEntityUsage `Partial<mw.Api.Params.Action.TemplateData.Generator.WBListEntityUsage>`} / {@link mw.Api.Params.Action.SetNotificationTimestamp.Generator.WBListEntityUsage `Partial<mw.Api.Params.Action.SetNotificationTimestamp.Generator.WBListEntityUsage>`} instead.
 */
export type WikibaseClientApiListEntityUsageParams = Partial<mw.Api.Params.Action.Query.List.WBListEntityUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Purge `Partial<mw.Api.Params.Action.Purge>`} instead.
 */
export type ApiPurgeParams = Partial<mw.Api.Params.Action.Purge>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.CategoryInfo `Partial<mw.Api.Params.Action.Query.Prop.CategoryInfo>`} instead.
 */
export type ApiQueryCategoryInfoParams = Partial<mw.Api.Params.Action.Query.Prop.CategoryInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.CirrusBuildDoc `Partial<mw.Api.Params.Action.Query.Prop.CirrusBuildDoc>`} instead.
 */
export type CirrusSearchApiQueryBuildDocumentParams = Partial<mw.Api.Params.Action.Query.Prop.CirrusBuildDoc>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.CirrusCompSuggestBuildDoc `Partial<mw.Api.Params.Action.Query.Prop.CirrusCompSuggestBuildDoc>`} instead.
 */
export type CirrusSearchApiQueryCompSuggestBuildDocParams = Partial<mw.Api.Params.Action.Query.Prop.CirrusCompSuggestBuildDoc>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.CirrusDoc `Partial<mw.Api.Params.Action.Query.Prop.CirrusDoc>`} instead.
 */
export type CirrusSearchApiQueryCirrusDocParams = Partial<mw.Api.Params.Action.Query.Prop.CirrusDoc>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Contributors `Partial<mw.Api.Params.Action.Query.Prop.Contributors>`} instead.
 */
export type ApiQueryContributorsParams = Partial<mw.Api.Params.Action.Query.Prop.Contributors>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Coordinates `Partial<mw.Api.Params.Action.Query.Prop.Coordinates>`} instead.
 */
export type GeoDataApiQueryCoordinatesParams = Partial<mw.Api.Params.Action.Query.Prop.Coordinates>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Description `Partial<mw.Api.Params.Action.Query.Prop.Description>`} instead.
 */
export type WikibaseClientApiDescriptionParams = Partial<mw.Api.Params.Action.Query.Prop.Description>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.ExtLinks `Partial<mw.Api.Params.Action.Query.Prop.ExtLinks>`} instead.
 */
export type ApiQueryExternalLinksParams = Partial<mw.Api.Params.Action.Query.Prop.ExtLinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Extracts `Partial<mw.Api.Params.Action.Query.Prop.Extracts>`} instead.
 */
export type TextExtractsApiQueryExtractsParams = Partial<mw.Api.Params.Action.Query.Prop.Extracts>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Flagged `Partial<mw.Api.Params.Action.Query.Prop.Flagged>`} instead.
 */
export type ApiQueryFlaggedParams = Partial<mw.Api.Params.Action.Query.Prop.Flagged>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.GlobalUsage `Partial<mw.Api.Params.Action.Query.Prop.GlobalUsage>`} instead.
 */
export type GlobalUsageApiQueryGlobalUsageParams = Partial<mw.Api.Params.Action.Query.Prop.GlobalUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.GrowthImageSuggestionData `Partial<mw.Api.Params.Action.Query.Prop.GrowthImageSuggestionData>`} instead.
 */
export type GrowthExperimentsApiQueryImageSuggestionDataParams = Partial<mw.Api.Params.Action.Query.Prop.GrowthImageSuggestionData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.ImageInfo `Partial<mw.Api.Params.Action.Query.Prop.ImageInfo>`} instead.
 */
export type ApiQueryImageInfoParams = Partial<mw.Api.Params.Action.Query.Prop.ImageInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.Info `Partial<mw.Api.Params.Action.Query.Prop.Info>`} instead.
 */
export type ApiQueryInfoParams = Partial<mw.Api.Params.Action.Query.Prop.Info>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.IsReviewed `Partial<mw.Api.Params.Action.Query.Prop.IsReviewed>`} instead.
 */
export type PageTriageApiIsReviewedParams = Partial<mw.Api.Params.Action.Query.Prop.IsReviewed>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.IWLinks `Partial<mw.Api.Params.Action.Query.Prop.IWLinks>`} instead.
 */
export type ApiQueryIWLinksParams = Partial<mw.Api.Params.Action.Query.Prop.IWLinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.LangLinks `Partial<mw.Api.Params.Action.Query.Prop.LangLinks>`} instead.
 */
export type ApiQueryLangLinksParams = Partial<mw.Api.Params.Action.Query.Prop.LangLinks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.LangLinksCount `Partial<mw.Api.Params.Action.Query.Prop.LangLinksCount>`} instead.
 */
export type ContentTranslationActionApiQueryLangLinksCountParams = Partial<mw.Api.Params.Action.Query.Prop.LangLinksCount>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.MapData `Partial<mw.Api.Params.Action.Query.Prop.MapData>`} instead.
 */
export type KartographerApiQueryMapDataParams = Partial<mw.Api.Params.Action.Query.Prop.MapData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.MMContent `Partial<mw.Api.Params.Action.Query.Prop.MMContent>`} instead.
 */
export type MediaWikiMassMessageApiQueryMMContentParams = Partial<mw.Api.Params.Action.Query.Prop.MMContent>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.PageAssessments `Partial<mw.Api.Params.Action.Query.Prop.PageAssessments>`} instead.
 */
export type PageAssessmentsApiQueryPageAssessmentsParams = Partial<mw.Api.Params.Action.Query.Prop.PageAssessments>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.PageImages `Partial<mw.Api.Params.Action.Query.Prop.PageImages>`} instead.
 */
export type PageImagesApiQueryPageImagesParams = Partial<mw.Api.Params.Action.Query.Prop.PageImages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.PageProps `Partial<mw.Api.Params.Action.Query.Prop.PageProps>`} instead.
 */
export type ApiQueryPagePropsParams = Partial<mw.Api.Params.Action.Query.Prop.PageProps>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.PageTerms `Partial<mw.Api.Params.Action.Query.Prop.PageTerms>`} instead.
 */
export type WikibaseClientApiPageTermsParams = Partial<mw.Api.Params.Action.Query.Prop.PageTerms>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.PageViews `Partial<mw.Api.Params.Action.Query.Prop.PageViews>`} instead.
 */
export type PageViewInfoApiQueryPageViewsParams = Partial<mw.Api.Params.Action.Query.Prop.PageViews>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.StashImageInfo `Partial<mw.Api.Params.Action.Query.Prop.StashImageInfo>`} instead.
 */
export type ApiQueryStashImageInfoParams = Partial<mw.Api.Params.Action.Query.Prop.StashImageInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.TranscodeStatus `Partial<mw.Api.Params.Action.Query.Prop.TranscodeStatus>`} instead.
 */
export type MediaWikiTimedMediaHandlerApiTranscodeStatusParams = Partial<mw.Api.Params.Action.Query.Prop.TranscodeStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.VideoInfo `Partial<mw.Api.Params.Action.Query.Prop.VideoInfo>`} instead.
 */
export type MediaWikiTimedMediaHandlerApiQueryVideoInfoParams = Partial<mw.Api.Params.Action.Query.Prop.VideoInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Prop.WBEntityUsage `Partial<mw.Api.Params.Action.Query.Prop.WBEntityUsage>`} instead.
 */
export type WikibaseClientApiPropsEntityUsageParams = Partial<mw.Api.Params.Action.Query.Prop.WBEntityUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AbuseFilters `Partial<mw.Api.Params.Action.Query.List.AbuseFilters>`} instead.
 */
export type AbuseFilterApiQueryAbuseFiltersParams = Partial<mw.Api.Params.Action.Query.List.AbuseFilters>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AbuseLog `Partial<mw.Api.Params.Action.Query.List.AbuseLog>`} instead.
 */
export type AbuseFilterApiQueryAbuseLogParams = Partial<mw.Api.Params.Action.Query.List.AbuseLog>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.AllUsers `Partial<mw.Api.Params.Action.Query.List.AllUsers>`} instead.
 */
export type ApiQueryAllUsersParams = Partial<mw.Api.Params.Action.Query.List.AllUsers>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.BetaFeatures `Partial<mw.Api.Params.Action.Query.List.BetaFeatures>`} instead.
 */
export type BetaFeaturesApiQueryBetaFeaturesParams = Partial<mw.Api.Params.Action.Query.List.BetaFeatures>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Blocks `Partial<mw.Api.Params.Action.Query.List.Blocks>`} instead.
 */
export type ApiQueryBlocksParams = Partial<mw.Api.Params.Action.Query.List.Blocks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CentralNoticeActiveCampaigns `Partial<mw.Api.Params.Action.Query.List.CentralNoticeActiveCampaigns>`} instead.
 */
export type ApiCentralNoticeQueryActiveCampaignsParams = Partial<mw.Api.Params.Action.Query.List.CentralNoticeActiveCampaigns>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CentralNoticeLogs `Partial<mw.Api.Params.Action.Query.List.CentralNoticeLogs>`} instead.
 */
export type ApiCentralNoticeLogsParams = Partial<mw.Api.Params.Action.Query.List.CentralNoticeLogs>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CheckUser `Partial<mw.Api.Params.Action.Query.List.CheckUser>`} instead.
 */
export type MediaWikiCheckUserApiQueryCheckUserParams = Partial<mw.Api.Params.Action.Query.List.CheckUser>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CheckUserLog `Partial<mw.Api.Params.Action.Query.List.CheckUserLog>`} instead.
 */
export type MediaWikiCheckUserApiQueryCheckUserLogParams = Partial<mw.Api.Params.Action.Query.List.CheckUserLog>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ContentTranslationCorpora `Partial<mw.Api.Params.Action.Query.List.ContentTranslationCorpora>`} instead.
 */
export type ContentTranslationActionApiQueryContentTranslationCorporaParams = Partial<mw.Api.Params.Action.Query.List.ContentTranslationCorpora>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ContentTranslationLangTrend `Partial<mw.Api.Params.Action.Query.List.ContentTranslationLangTrend>`} instead.
 */
export type ContentTranslationActionApiQueryContentTranslationLanguageTrendParams = Partial<mw.Api.Params.Action.Query.List.ContentTranslationLangTrend>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.ContentTranslationStats `Partial<mw.Api.Params.Action.Query.List.ContentTranslationStats>`} instead.
 */
export type ContentTranslationActionApiQueryContentTranslationStatsParams = Partial<mw.Api.Params.Action.Query.List.ContentTranslationStats>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CXPublishedTranslations `Partial<mw.Api.Params.Action.Query.List.CXPublishedTranslations>`} instead.
 */
export type ContentTranslationActionApiQueryPublishedTranslationsParams = Partial<mw.Api.Params.Action.Query.List.CXPublishedTranslations>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.CXTranslatorStats `Partial<mw.Api.Params.Action.Query.List.CXTranslatorStats>`} instead.
 */
export type ContentTranslationActionApiQueryTranslatorStatsParams = Partial<mw.Api.Params.Action.Query.List.CXTranslatorStats>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Deletedrevs `Partial<mw.Api.Params.Action.Query.List.Deletedrevs>`} instead.
 */
export type ApiQueryDeletedrevsParams = Partial<mw.Api.Params.Action.Query.List.Deletedrevs>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Filearchive `Partial<mw.Api.Params.Action.Query.List.Filearchive>`} instead.
 */
export type ApiQueryFilearchiveParams = Partial<mw.Api.Params.Action.Query.List.Filearchive>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GadgetCategories `Partial<mw.Api.Params.Action.Query.List.GadgetCategories>`} instead.
 */
export type GadgetsApiQueryGadgetCategoriesParams = Partial<mw.Api.Params.Action.Query.List.GadgetCategories>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Gadgets `Partial<mw.Api.Params.Action.Query.List.Gadgets>`} instead.
 */
export type GadgetsApiQueryGadgetsParams = Partial<mw.Api.Params.Action.Query.List.Gadgets>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GlobalAllUsers `Partial<mw.Api.Params.Action.Query.List.GlobalAllUsers>`} instead.
 */
export type CentralAuthApiQueryGlobalAllUsersParams = Partial<mw.Api.Params.Action.Query.List.GlobalAllUsers>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GlobalBlocks `Partial<mw.Api.Params.Action.Query.List.GlobalBlocks>`} instead.
 */
export type GlobalBlockingApiQueryGlobalBlocksParams = Partial<mw.Api.Params.Action.Query.List.GlobalBlocks>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GlobalGroups `Partial<mw.Api.Params.Action.Query.List.GlobalGroups>`} instead.
 */
export type CentralAuthApiQueryGlobalGroupsParams = Partial<mw.Api.Params.Action.Query.List.GlobalGroups>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GrowthMentorList `Partial<mw.Api.Params.Action.Query.List.GrowthMentorList>`} instead.
 */
export type GrowthExperimentsApiQueryMentorListParams = Partial<mw.Api.Params.Action.Query.List.GrowthMentorList>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GrowthMentorMentee `Partial<mw.Api.Params.Action.Query.List.GrowthMentorMentee>`} instead.
 */
export type GrowthExperimentsApiQueryMentorMenteeParams = Partial<mw.Api.Params.Action.Query.List.GrowthMentorMentee>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.GrowthStarredMentees `Partial<mw.Api.Params.Action.Query.List.GrowthStarredMentees>`} instead.
 */
export type GrowthExperimentsApiQueryStarredMenteesParams = Partial<mw.Api.Params.Action.Query.List.GrowthStarredMentees>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.LintErrors `Partial<mw.Api.Params.Action.Query.List.LintErrors>`} instead.
 */
export type MediaWikiLinterApiQueryLintErrorsParams = Partial<mw.Api.Params.Action.Query.List.LintErrors>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.LogEvents `Partial<mw.Api.Params.Action.Query.List.LogEvents>`} instead.
 */
export type ApiQueryLogEventsParams = Partial<mw.Api.Params.Action.Query.List.LogEvents>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.MyStashedFiles `Partial<mw.Api.Params.Action.Query.List.MyStashedFiles>`} instead.
 */
export type ApiQueryMyStashedFilesParams = Partial<mw.Api.Params.Action.Query.List.MyStashedFiles>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.PagePropNames `Partial<mw.Api.Params.Action.Query.List.PagePropNames>`} instead.
 */
export type ApiQueryPagePropNamesParams = Partial<mw.Api.Params.Action.Query.List.PagePropNames>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Projects `Partial<mw.Api.Params.Action.Query.List.Projects>`} instead.
 */
export type PageAssessmentsApiQueryProjectsParams = Partial<mw.Api.Params.Action.Query.List.Projects>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Tags `Partial<mw.Api.Params.Action.Query.List.Tags>`} instead.
 */
export type ApiQueryTagsParams = Partial<mw.Api.Params.Action.Query.List.Tags>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.UserContribs `Partial<mw.Api.Params.Action.Query.List.UserContribs>`} instead.
 */
export type ApiQueryUserContribsParams = Partial<mw.Api.Params.Action.Query.List.UserContribs>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.Users `Partial<mw.Api.Params.Action.Query.List.Users>`} instead.
 */
export type ApiQueryUsersParams = Partial<mw.Api.Params.Action.Query.List.Users>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.List.WikiSets `Partial<mw.Api.Params.Action.Query.List.WikiSets>`} instead.
 */
export type CentralAuthApiQueryWikiSetsParams = Partial<mw.Api.Params.Action.Query.List.WikiSets>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.AllMessages `Partial<mw.Api.Params.Action.Query.Meta.AllMessages>`} instead.
 */
export type ApiQueryAllMessagesParams = Partial<mw.Api.Params.Action.Query.Meta.AllMessages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.AuthManagerInfo `Partial<mw.Api.Params.Action.Query.Meta.AuthManagerInfo>`} instead.
 */
export type ApiQueryAuthManagerInfoParams = Partial<mw.Api.Params.Action.Query.Meta.AuthManagerInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Babel `Partial<mw.Api.Params.Action.Query.Meta.Babel>`} instead.
 */
export type MediaWikiBabelApiQueryBabelParams = Partial<mw.Api.Params.Action.Query.Meta.Babel>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.CXDeletedTranslations `Partial<mw.Api.Params.Action.Query.Meta.CXDeletedTranslations>`} instead.
 */
export type ContentTranslationActionApiQueryDeletedTranslationsParams = Partial<mw.Api.Params.Action.Query.Meta.CXDeletedTranslations>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.FeatureUsage `Partial<mw.Api.Params.Action.Query.Meta.FeatureUsage>`} instead.
 */
export type ApiFeatureUsageApiQueryFeatureUsageParams = Partial<mw.Api.Params.Action.Query.Meta.FeatureUsage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.FileRepoInfo `Partial<mw.Api.Params.Action.Query.Meta.FileRepoInfo>`} instead.
 */
export type ApiQueryFileRepoInfoParams = Partial<mw.Api.Params.Action.Query.Meta.FileRepoInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GlobalPreferences `Partial<mw.Api.Params.Action.Query.Meta.GlobalPreferences>`} instead.
 */
export type GlobalPreferencesApiQueryGlobalPreferencesParams = Partial<mw.Api.Params.Action.Query.Meta.GlobalPreferences>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GlobalRenameStatus `Partial<mw.Api.Params.Action.Query.Meta.GlobalRenameStatus>`} instead.
 */
export type CentralAuthApiQueryGlobalRenameStatusParams = Partial<mw.Api.Params.Action.Query.Meta.GlobalRenameStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GlobalUserInfo `Partial<mw.Api.Params.Action.Query.Meta.GlobalUserInfo>`} instead.
 */
export type CentralAuthApiQueryGlobalUserInfoParams = Partial<mw.Api.Params.Action.Query.Meta.GlobalUserInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GrowthMenteeStatus `Partial<mw.Api.Params.Action.Query.Meta.GrowthMenteeStatus>`} instead.
 */
export type GrowthExperimentsApiQueryMenteeStatusParams = Partial<mw.Api.Params.Action.Query.Meta.GrowthMenteeStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GrowthMentorStatus `Partial<mw.Api.Params.Action.Query.Meta.GrowthMentorStatus>`} instead.
 */
export type GrowthExperimentsApiQueryMentorStatusParams = Partial<mw.Api.Params.Action.Query.Meta.GrowthMentorStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.GrowthNextSuggestedTaskType `Partial<mw.Api.Params.Action.Query.Meta.GrowthNextSuggestedTaskType>`} instead.
 */
export type GrowthExperimentsApiQueryNextSuggestedTaskTypeParams = Partial<mw.Api.Params.Action.Query.Meta.GrowthNextSuggestedTaskType>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Languageinfo `Partial<mw.Api.Params.Action.Query.Meta.Languageinfo>`} instead.
 */
export type ApiQueryLanguageinfoParams = Partial<mw.Api.Params.Action.Query.Meta.Languageinfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.LinterStats `Partial<mw.Api.Params.Action.Query.Meta.LinterStats>`} instead.
 */
export type MediaWikiLinterApiQueryLinterStatsParams = Partial<mw.Api.Params.Action.Query.Meta.LinterStats>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Notifications `Partial<mw.Api.Params.Action.Query.Meta.Notifications>`} instead.
 */
export type NotificationsApiEchoNotificationsParams = Partial<mw.Api.Params.Action.Query.Meta.Notifications>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.OATH `Partial<mw.Api.Params.Action.Query.Meta.OATH>`} instead.
 */
export type OATHAuthApiModuleApiQueryOATHParams = Partial<mw.Api.Params.Action.Query.Meta.OATH>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.ORES `Partial<mw.Api.Params.Action.Query.Meta.ORES>`} instead.
 */
export type ORESHooksApiQueryORESParams = Partial<mw.Api.Params.Action.Query.Meta.ORES>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.ReadingLists `Partial<mw.Api.Params.Action.Query.Meta.ReadingLists>`} instead.
 */
export type ReadingListsApiQueryReadingListsParams = Partial<mw.Api.Params.Action.Query.Meta.ReadingLists>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Siteinfo `Partial<mw.Api.Params.Action.Query.Meta.Siteinfo>`} instead.
 */
export type ApiQuerySiteinfoParams = Partial<mw.Api.Params.Action.Query.Meta.Siteinfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.SiteViews `Partial<mw.Api.Params.Action.Query.Meta.SiteViews>`} instead.
 */
export type PageViewInfoApiQuerySiteViewsParams = Partial<mw.Api.Params.Action.Query.Meta.SiteViews>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Tokens `Partial<mw.Api.Params.Action.Query.Meta.Tokens>`} instead.
 */
export type ApiQueryTokensParams = Partial<mw.Api.Params.Action.Query.Meta.Tokens>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.UnreadNotificationPages `Partial<mw.Api.Params.Action.Query.Meta.UnreadNotificationPages>`} instead.
 */
export type NotificationsApiEchoUnreadNotificationPagesParams = Partial<mw.Api.Params.Action.Query.Meta.UnreadNotificationPages>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.UserInfo `Partial<mw.Api.Params.Action.Query.Meta.UserInfo>`} instead.
 */
export type ApiQueryUserInfoParams = Partial<mw.Api.Params.Action.Query.Meta.UserInfo>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query.Meta.Wikibase `Partial<mw.Api.Params.Action.Query.Meta.Wikibase>`} instead.
 */
export type WikibaseClientApiClientInfoParams = Partial<mw.Api.Params.Action.Query.Meta.Wikibase>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Query `Partial<mw.Api.Params.Action.Query>`} instead.
 */
export type ApiQueryParams = Partial<mw.Api.Params.Action.Query>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ReadingLists `Partial<mw.Api.Params.Action.ReadingLists>`} instead.
 */
export type ReadingListsApiReadingListsParams = Partial<mw.Api.Params.Action.ReadingLists>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.RemoveAuthenticationData `Partial<mw.Api.Params.Action.RemoveAuthenticationData>`} / {@link mw.Api.Params.Action.UnlinkAccount `Partial<mw.Api.Params.Action.UnlinkAccount>`} instead.
 */
export type ApiRemoveAuthenticationDataParams = Partial<mw.Api.Params.Action.RemoveAuthenticationData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ResetPassword `Partial<mw.Api.Params.Action.ResetPassword>`} instead.
 */
export type ApiResetPasswordParams = Partial<mw.Api.Params.Action.ResetPassword>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Review `Partial<mw.Api.Params.Action.Review>`} instead.
 */
export type ApiReviewParams = Partial<mw.Api.Params.Action.Review>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.RevisionDelete `Partial<mw.Api.Params.Action.RevisionDelete>`} instead.
 */
export type ApiRevisionDeleteParams = Partial<mw.Api.Params.Action.RevisionDelete>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Rollback `Partial<mw.Api.Params.Action.Rollback>`} instead.
 */
export type ApiRollbackParams = Partial<mw.Api.Params.Action.Rollback>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Rsd `Partial<mw.Api.Params.Action.Rsd>`} instead.
 */
export type ApiRsdParams = Partial<mw.Api.Params.Action.Rsd>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SanitizeMapData `Partial<mw.Api.Params.Action.SanitizeMapData>`} instead.
 */
export type KartographerApiSanitizeMapDataParams = Partial<mw.Api.Params.Action.SanitizeMapData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ScribuntoConsole `Partial<mw.Api.Params.Action.ScribuntoConsole>`} instead.
 */
export type ScribuntoApiScribuntoConsoleParams = Partial<mw.Api.Params.Action.ScribuntoConsole>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SecurePollAuth `Partial<mw.Api.Params.Action.SecurePollAuth>`} instead.
 */
export type SecurePollApiSecurePollAuthParams = Partial<mw.Api.Params.Action.SecurePollAuth>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SetGlobalAccountStatus `Partial<mw.Api.Params.Action.SetGlobalAccountStatus>`} instead.
 */
export type CentralAuthApiSetGlobalAccountStatusParams = Partial<mw.Api.Params.Action.SetGlobalAccountStatus>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SetNotificationTimestamp `Partial<mw.Api.Params.Action.SetNotificationTimestamp>`} instead.
 */
export type ApiSetNotificationTimestampParams = Partial<mw.Api.Params.Action.SetNotificationTimestamp>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SetPageLanguage `Partial<mw.Api.Params.Action.SetPageLanguage>`} instead.
 */
export type ApiSetPageLanguageParams = Partial<mw.Api.Params.Action.SetPageLanguage>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ShortenUrl `Partial<mw.Api.Params.Action.ShortenUrl>`} instead.
 */
export type UrlShortenerApiShortenUrlParams = Partial<mw.Api.Params.Action.ShortenUrl>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SiteMatrix `Partial<mw.Api.Params.Action.SiteMatrix>`} instead.
 */
export type SiteMatrixApiSiteMatrixParams = Partial<mw.Api.Params.Action.SiteMatrix>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SpamBlacklist `Partial<mw.Api.Params.Action.SpamBlacklist>`} instead.
 */
export type SpamBlacklistApiSpamBlacklistParams = Partial<mw.Api.Params.Action.SpamBlacklist>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Stabilize `Partial<mw.Api.Params.Action.Stabilize>`} instead.
 */
export type ApiStabilizeProtectParams = Partial<mw.Api.Params.Action.Stabilize>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.StashEdit `Partial<mw.Api.Params.Action.StashEdit>`} instead.
 */
export type ApiStashEditParams = Partial<mw.Api.Params.Action.StashEdit>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.StreamConfigS `Partial<mw.Api.Params.Action.StreamConfigS>`} instead.
 */
export type EventStreamConfigApiStreamConfigsParams = Partial<mw.Api.Params.Action.StreamConfigS>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.StrikeVote `Partial<mw.Api.Params.Action.StrikeVote>`} instead.
 */
export type SecurePollApiStrikeVoteParams = Partial<mw.Api.Params.Action.StrikeVote>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SXDelete `Partial<mw.Api.Params.Action.SXDelete>`} instead.
 */
export type ContentTranslationActionApiSectionTranslationDeleteParams = Partial<mw.Api.Params.Action.SXDelete>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.SXSave `Partial<mw.Api.Params.Action.SXSave>`} instead.
 */
export type ContentTranslationActionApiSectionTranslationSaveParams = Partial<mw.Api.Params.Action.SXSave>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Tag `Partial<mw.Api.Params.Action.Tag>`} instead.
 */
export type ApiTagParams = Partial<mw.Api.Params.Action.Tag>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.TemplateData `Partial<mw.Api.Params.Action.TemplateData>`} instead.
 */
export type TemplateDataApiTemplateDataParams = Partial<mw.Api.Params.Action.TemplateData>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Thank `Partial<mw.Api.Params.Action.Thank>`} instead.
 */
export type ThanksApiCoreThankParams = Partial<mw.Api.Params.Action.Thank>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.TimedText `Partial<mw.Api.Params.Action.TimedText>`} instead.
 */
export type MediaWikiTimedMediaHandlerApiTimedTextParams = Partial<mw.Api.Params.Action.TimedText>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.TitleBlacklist `Partial<mw.Api.Params.Action.TitleBlacklist>`} instead.
 */
export type TitleBlacklistApiTitleBlacklistParams = Partial<mw.Api.Params.Action.TitleBlacklist>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.TorBlock `Partial<mw.Api.Params.Action.TorBlock>`} instead.
 */
export type TorBlockApiTorBlockParams = Partial<mw.Api.Params.Action.TorBlock>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.TranscodeReset `Partial<mw.Api.Params.Action.TranscodeReset>`} instead.
 */
export type MediaWikiTimedMediaHandlerApiTranscodeResetParams = Partial<mw.Api.Params.Action.TranscodeReset>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ULSLocalization `Partial<mw.Api.Params.Action.ULSLocalization>`} instead.
 */
export type UniversalLanguageSelectorApiULSLocalizationParams = Partial<mw.Api.Params.Action.ULSLocalization>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ULSSetLang `Partial<mw.Api.Params.Action.ULSSetLang>`} instead.
 */
export type UniversalLanguageSelectorApiULSSetLanguageParams = Partial<mw.Api.Params.Action.ULSSetLang>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Unblock `Partial<mw.Api.Params.Action.Unblock>`} instead.
 */
export type ApiUnblockParams = Partial<mw.Api.Params.Action.Unblock>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Undelete `Partial<mw.Api.Params.Action.Undelete>`} instead.
 */
export type ApiUndeleteParams = Partial<mw.Api.Params.Action.Undelete>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Upload `Partial<mw.Api.Params.Action.Upload>`} instead.
 */
export type ApiUploadParams = Partial<mw.Api.Params.Action.Upload>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Userrights `Partial<mw.Api.Params.Action.Userrights>`} instead.
 */
export type ApiUserrightsParams = Partial<mw.Api.Params.Action.Userrights>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.ValidatePassword `Partial<mw.Api.Params.Action.ValidatePassword>`} instead.
 */
export type ApiValidatePasswordParams = Partial<mw.Api.Params.Action.ValidatePassword>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.VisualEditor `Partial<mw.Api.Params.Action.VisualEditor>`} instead.
 */
export type VisualEditorApiVisualEditorParams = Partial<mw.Api.Params.Action.VisualEditor>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.VisualEditorEdit `Partial<mw.Api.Params.Action.VisualEditorEdit>`} instead.
 */
export type VisualEditorApiVisualEditorEditParams = Partial<mw.Api.Params.Action.VisualEditorEdit>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.Watch `Partial<mw.Api.Params.Action.Watch>`} instead.
 */
export type ApiWatchParams = Partial<mw.Api.Params.Action.Watch>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.WebappManifest `Partial<mw.Api.Params.Action.WebappManifest>`} instead.
 */
export type MobileFrontendApiWebappManifestParams = Partial<mw.Api.Params.Action.WebappManifest>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.WebAuthn `Partial<mw.Api.Params.Action.WebAuthn>`} instead.
 */
export type WebAuthnApiWebAuthnParams = Partial<mw.Api.Params.Action.WebAuthn>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.WikiLove `Partial<mw.Api.Params.Action.WikiLove>`} instead.
 */
export type WikiLoveApiWikiLoveParams = Partial<mw.Api.Params.Action.WikiLove>;

/**
 * @deprecated Use {@link mw.Api.Params.Action.WikimediaEventsBlockedEdit `Partial<mw.Api.Params.Action.WikimediaEventsBlockedEdit>`} instead.
 */
export type WikimediaEventsApiWikimediaEventsBlockedEditParams = Partial<mw.Api.Params.Action.WikimediaEventsBlockedEdit>;

/**
 * @deprecated Use {@link mw.Api.Params.Format.Json `Partial<mw.Api.Params.Format.Json>`} / {@link mw.Api.Params.Format.JsonFM `Partial<mw.Api.Params.Format.JsonFM>`} / {@link mw.Api.Params.Format.RawFM `Partial<mw.Api.Params.Format.RawFM>`} instead.
 */
export type ApiFormatJsonParams = Partial<mw.Api.Params.Format.Json>;

/**
 * @deprecated Use {@link mw.Api.Params.Format.None `Partial<mw.Api.Params.Format.None>`} instead.
 */
export type ApiFormatNoneParams = Partial<mw.Api.Params.Format.None>;

/**
 * @deprecated Use {@link mw.Api.Params.Format.Php `Partial<mw.Api.Params.Format.Php>`} / {@link mw.Api.Params.Format.PhpFM `Partial<mw.Api.Params.Format.PhpFM>`} instead.
 */
export type ApiFormatPhpParams = Partial<mw.Api.Params.Format.Php>;

/**
 * @deprecated Use {@link mw.Api.Params.Format.Xml `Partial<mw.Api.Params.Format.Xml>`} / {@link mw.Api.Params.Format.XmlFM `Partial<mw.Api.Params.Format.XmlFM>`} instead.
 */
export type ApiFormatXmlParams = Partial<mw.Api.Params.Format.Xml>;

export {};
